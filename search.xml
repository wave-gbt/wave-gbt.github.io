<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Java 并发编程学习 - 概述]]></title>
      <url>/java-concurrent-programming-outline.html</url>
      <content type="html"><![CDATA[<p>　　看薛兆丰的《经济学通识》，他总结到，人类面临着四大基本约束：东西不够，生命有限，互相依赖，需要协调。当我看到这句话的时候，我猛然间意识到：计算机也同样面临着这四大基本约束。<br>　　在计算中，CPU、内存、IO、硬盘、带宽等，这些资源也都有不够的时候，而每个线程的也有着自己的生命周期，并且它们之间又是相互依赖的，也同样需要协调。有了上面的这种想法，我觉得我学习计算机的知识有了章法可循。</p>
<a id="more"></a>
<p>并发编程知识全景图<br><img src="/img/11e0c64618c04edba52619f41aaa3565.png" alt="并发编程全景图之思维导图"></p>
<p>并发编程领域可以抽象成三个核心问题：分工、同步和互斥。</p>
<h2 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h2><p>类似于现实中一个组织完成一个项目，项目经理要拆分任务，安排合适的成员去完成。</p>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>每个小任务间可能存在相互依赖，同步需要做的是在前置任务完成后，通知后置任务启动。</p>
<h2 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h2><p>互斥主要解决正确性问题。互斥要求同一时间，只允许一个线程访问共享变量。</p>
<p><strong>学习方法论:</strong> 我认为工程上的解决方案，一定要有理论做基础。「跳出来，看全景」 和 「钻进去，看本质」，这两条方法论，我想是适合很多领域的学习的。</p>
<blockquote>
<p>Reference:　<a href="https://time.geekbang.org/column/intro/159" target="_blank" rel="noopener">极客时间-Java并发编程实战</a>　　</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最长公共前缀]]></title>
      <url>/longest-common-prefix.html</url>
      <content type="html"><![CDATA[<p>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 “”。<br><a id="more"></a></p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure></p>
<p><strong>思路</strong><br>先利用<code>Arrays.sort(strs)</code>为数组排序，再将数组第一个元素和最后一个元素的字符从前往后对比即可。 </p>
<p><strong>实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">replaceSpace</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 如果检查值不合法及就返回空串</span></span><br><span class="line">		<span class="keyword">if</span> (!checkStrs(strs)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 数组长度</span></span><br><span class="line">		<span class="keyword">int</span> len = strs.length;</span><br><span class="line">		<span class="comment">// 用于保存结果</span></span><br><span class="line">		StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		<span class="comment">// 给字符串数组的元素按照升序排序(包含数字的话，数字会排在前面)</span></span><br><span class="line">		Arrays.sort(strs);</span><br><span class="line">		<span class="keyword">int</span> m = strs[<span class="number">0</span>].length();</span><br><span class="line">		<span class="keyword">int</span> n = strs[len - <span class="number">1</span>].length();</span><br><span class="line">		<span class="keyword">int</span> num = Math.min(m, n);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (strs[<span class="number">0</span>].charAt(i) == strs[len - <span class="number">1</span>].charAt(i)) &#123;</span><br><span class="line">				res.append(strs[<span class="number">0</span>].charAt(i));</span><br><span class="line">			&#125; <span class="keyword">else</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkStrs</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (strs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 遍历strs检查元素值</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (strs[i] == <span class="keyword">null</span> || strs[i].length() == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 测试</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String[] strs = &#123; <span class="string">"customer"</span>, <span class="string">"car"</span>, <span class="string">"cat"</span> &#125;;</span><br><span class="line">		<span class="comment">// String[] strs = &#123; "customer", "car", null &#125;;//空串</span></span><br><span class="line">		<span class="comment">// String[] strs = &#123;&#125;;//空串</span></span><br><span class="line">		<span class="comment">// String[] strs = null;//空串</span></span><br><span class="line">		System.out.println(Main.replaceSpace(strs));<span class="comment">// c</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何保证幂等机制]]></title>
      <url>/how-to-guarantee-idempotent-mechanism.html</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>　　其实这是一个很常见的问题，做后端开发会经常遇到这个问题，如何保证消息消费不被重复消费，或者说如何保证一个接口多次调用只会产生一种结果，不管调多少次，资源都不会发生改变。如果重复消费了或者调用了，如何保证不造成系统异常。所以幂等机制的核心就是保证资源唯一性。<br><a id="more"></a></p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>　　需要保证幂等性的场景就是需要限定接口只能调用一次；消息重复消费之后，要保证资源不会发生改变。例如：</p>
<ul>
<li>支付接口</li>
<li>退款接口</li>
<li>新增数据的接口</li>
<li>…</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>利用数据库的唯一索引，针对我们需要约束的资源字段创建唯一索引，可以防止插入重复的数据。需要注意的是，如果是分库分表的情况，唯一索引的情况就不能限制资源数据的唯一性。</li>
<li>可以先根据数据库唯一索引查一下，如果存在，就做更新操作。 这块要注意的是如何避免并发场景（分布式锁）。</li>
<li>如果是直接写 redis，每次都是set，天然就幂等的。</li>
<li>利用 redis 做一层校验，每次调接口或这消费消息之前先查一下 redis 里有没有全局的ID，如果没有消费过，加redis，再处理消息或接口。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 沉淀 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[All Or Nothing]]></title>
      <url>/goodbye-2018.html</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>关键字</strong>：<code>don&#39;t be nervous</code>, <code>业务or技术</code>, <code>人情味儿</code>, <code>慎独</code><br><a id="more"></a></p>
</blockquote>
<p>　　年前和学弟吃了个饭，听他讲了讲毕业这半年有什么变化，进步了多少，因为公司涉及的领域各有不同，所以技术领域或者说业务领域有很大的差别，没有什么反复探讨的东西，不过有一句话倒是令我影响深刻：<code>其他人或者公司不注重的细节，积累起来就是自身的核心价值。</code></p>
<p>　　<strong>don’t be nervous</strong>，这一年在亚信做了一些小事儿，佣金业务，智能调度，监控预警等，相应的也接触到了一些”新鲜”的技术, 微服务(SpringBoot), 微服务治理框架(SpringCloud, Dubbo), 分布式定时任务调度平台(elastic-job,xxl-job), 消息中间件(rabbitMQ, rocketMQ, kafka), 全文搜索引擎(Elasticsearch)等，能结合业务的发展方向对基础技术有一定的预判和快速上手，在面对方方面面的技术过程中，最重要的就是不要害怕，不要惊慌失措，不要逃避，这就是学习工程化，在技术宽度达到一定阶段后，就能根据不同的业务需求，进行技术选型，避免业务发展受到基础技术的拖累而不知所措。</p>
<p>　　<strong>业务or技术</strong>，纯粹的业务做的久了，难免心生倦怠，觉得技术得不到成长，工作内容除了<code>CRUD</code>就是<code>if...else</code>,就算接到有挑战的开发任务,有了上面<code>don&#39;t be nervous</code>的心态之后，也能心态平和的迎刃而解。我当然知道这是很多开发者面对的问题。其实这是一种相对割裂的眼光看问题，<code>实际上，所谓的业务代码和技术代码，它们的区别，仅仅是和业务的距离远近不同而已：业务代码离业务更近，技术代码离业务稍远。他们最终都是指向业务实现的</code>。2018年，我没有很好的去阅读他人的代码了解全局的业务形态，也没有在自己的技术栈上下功夫深钻底层实现，其实这两者只要有一个做的出色，就能有很大的成长。每当心生倦怠的时候，不妨多读读<a href="https://mp.weixin.qq.com/s/MiV-_xkWeT-mWMZbmJ8NBA" target="_blank" rel="noopener">《对开发来讲，业务重要还是技术重要？》</a>。</p>
<p>　　<strong>人情味儿</strong>，其实说到一个公司的人情味儿，当然离不开领导的关怀，组内和睦。我这里主要想说的是关于开发过程中，项目组或者说开发小组所给予的试错空间，容错性，很大程度上每个人写的代码都会被组长review一遍，或者就算是生产出了问题，自然有测试同事和负责发版的同事发现并修复，只要不导致重大生产后果，上线之后还存活的bug也不会被专门针对，逐渐的开发少了对自己代码负责的心态，没有对代码敬畏之心。我曾经问一个实习生毕业之后还来亚信的原因，答案是清闲，安稳。我不觉得清闲松散是一个项目组有人情味的表现，死海效应已经泛滥。其实团队有这么大的试错性，对于提升个人技术是特别好的一件事，任何可以实现业务需求的方式，就都可以去尝试，并且分享出来一起探讨利弊是一个很好的组内技术交流方式。</p>
<p>　　<strong>慎独</strong>, 马未都的脱口秀节目《观复嘟嘟》曾经有一期以江湖为主题，这其中就有一段关于慎独更加清晰明了的对话。一位女观众问：“像我们这种普通人如果要在江湖上混，应该注意些什么？” 他说：“<code>要很注意的一点，就是古人一再提醒的叫慎独。慎独就是你一个人独处的时候，你自己给自己一个交代，你给自己内心一个交代，我老说，你这事你对谁都不重要，对你自己最重要</code>。你当下所有对工作的敷衍，最后都成了人生对你的敷衍。希望2019以此为戒，对自己负责。</p>
]]></content>
      
        
        <tags>
            
            <tag> Life-Talk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch Jest 实践]]></title>
      <url>/es-jest-practice.html</url>
      <content type="html"><![CDATA[<h2 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h2><p><a href="https://github.com/searchbox-io/Jest/tree/master/jest" target="_blank" rel="noopener">GitHub</a><br>Jest是 <code>Elasticsearch</code> 的 Java Http Rest 客户端。ElasticSearch 已经具备应用于 Elasticsearch 内部的 Java API，但是 Jest 弥补了ES自有API缺少Elasticsearch Http Rest接口客户端的不足。<br><a id="more"></a></p>
<h2 id="springBoot-集成-Jest-依赖"><a href="#springBoot-集成-Jest-依赖" class="headerlink" title="springBoot 集成 Jest 依赖"></a>springBoot 集成 Jest 依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.searchbox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jest&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h2><p><img src="/img/20170813164101013.png" alt="jest 使用"></p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建查询表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> criterias</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> SearchSourceBuilder <span class="title">buildSearch</span><span class="params">(List&lt;Criteria&gt; criterias, EqlPage page)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指定查询的库表</span></span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(page)) &#123;</span><br><span class="line">        searchSourceBuilder.from((page.getCurrentPage() - <span class="number">1</span>) * page.getPageRows()).size(page.getPageRows());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(criterias)) &#123;</span><br><span class="line">        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">        criterias.stream().forEach(t -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (SHOULD.equals(t.getFieldType())) &#123;</span><br><span class="line">                <span class="comment">// 设置 should 匹配条件</span></span><br><span class="line">                boolQueryBuilder.should(QueryBuilders.termQuery(t.getFieldName(), t.getFieldValue()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (MUST.equals(t.getFieldType())) &#123;</span><br><span class="line">                <span class="comment">// 设置 must 匹配条件</span></span><br><span class="line">                boolQueryBuilder.must(QueryBuilders.termQuery(t.getFieldName(), t.getFieldValue()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (RANGE.equals(t.getFieldType())) &#123;</span><br><span class="line">                <span class="comment">// 设置 range 区间匹配条件</span></span><br><span class="line">                boolQueryBuilder.must(</span><br><span class="line">                        QueryBuilders.rangeQuery(t.getFieldName()).format(DATE_FORMAT).from(t.getFieldValue()).to(t.getFieldValue2()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        searchSourceBuilder.query(boolQueryBuilder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> searchSourceBuilder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es 执行查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchSourceBuilder</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;OrderBean&gt; <span class="title">search</span><span class="params">(SearchSourceBuilder searchSourceBuilder,EqlPage page)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    List&lt;OrderBean&gt; list = Lists.newArrayList();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SearchResult result = client.execute(<span class="keyword">new</span> Search.Builder(searchSourceBuilder.toString())</span><br><span class="line">                <span class="comment">// multiple index or types can be added.</span></span><br><span class="line">                .addIndex(baseConfig.getEsIndex())</span><br><span class="line">                .addType(baseConfig.getEsType())</span><br><span class="line">                <span class="comment">// 设置排序字段与排序方式</span></span><br><span class="line">                .addSort(<span class="keyword">new</span> Sort(StringUtils.isBlank(page.getSortField()) ? <span class="string">"create_time"</span> : page.getSortField(),</span><br><span class="line">                        StringUtils.isEmpty(page.getSort())</span><br><span class="line">                                ? Sort.Sorting.DESC : Sort.Sorting.ASC))</span><br><span class="line">                .build());</span><br><span class="line"></span><br><span class="line">        result.getSourceAsObjectList(OrderBean.class, <span class="keyword">false</span>);</span><br><span class="line">        List&lt;SearchResult.Hit&lt;Object, Void&gt;&gt; hits = result.getHits(Object.class);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(hits)) &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"es - list size :&#123;&#125;"</span>, hits.size());</span><br><span class="line">        <span class="comment">// 将查询结果映射到java实体里</span></span><br><span class="line">        hits.stream().forEach(t -&gt; &#123;</span><br><span class="line">            String news = JSON.toJSONString(t.source);</span><br><span class="line">            OrderBean order = JSON.parseObject(news, OrderBean.class);</span><br><span class="line">            list.add(order);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 获取查询总记录数</span></span><br><span class="line">        page.setTotalRows(result.getTotal().intValue());</span><br><span class="line">        <span class="comment">// 设置总页数</span></span><br><span class="line">        page.setPageNum((page.getTotalRows() - <span class="number">1</span>) / page.getPageRows() + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.info(<span class="string">"es - 查询失败：&#123;&#125;"</span>,JSON.toJSONString(e.getMessage()));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(<span class="string">"9999"</span>,<span class="string">"es 查询失败：&#123;&#125;"</span>,e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ES </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用两个栈实现队列]]></title>
      <url>/achieve-queues-with-two-stack.html</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>　　用两个栈来实现一个队列，完成队列的 Push 和 Pop 操作。<br><a id="more"></a></p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>　　首先清楚栈和队列的特点，栈的特点是先进后出，队列的特点是先进先出。也就是说，栈的删除操作在表尾进行，队列的删除操作在表头进行。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>in 栈用来处理入栈（push）操作，out 栈用来处理出栈（pop）操作。一个元素进入 in 栈之后，出栈的顺序被反转。当元素要出栈时，需要先进入 out 栈，此时元素出栈顺序再一次被反转，因此出栈顺序就和最开始入栈顺序是相同的，先进入的元素先退出，这就是队列的顺序。<br><img src="/img/immmstack.png" alt="入栈出栈思路"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Integer&gt; in = new Stack&lt;Integer&gt;();</span><br><span class="line">Stack&lt;Integer&gt; out = new Stack&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">// 入栈 (in 栈)</span><br><span class="line">public void push(int node) &#123;</span><br><span class="line">    in.push(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 出栈</span><br><span class="line">public int pop() throws Exception &#123;</span><br><span class="line">    if (out.isEmpty())  // 如果 out 栈为空，in 栈不为空，把元素从 in 栈顶出栈，放到 out 栈底</span><br><span class="line">        while (!in.isEmpty())</span><br><span class="line">            out.push(in.pop());</span><br><span class="line"></span><br><span class="line">    if (out.isEmpty())</span><br><span class="line">        throw new Exception(&quot;queue is empty&quot;);</span><br><span class="line"></span><br><span class="line">    return out.pop();   // 然后从 out 的栈的栈顶出栈，就是当时最先入栈的元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>题目来源：<a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&amp;tqId=11158&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">nowcoder</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> nowcoder </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二维数组中的查找]]></title>
      <url>/find-in-two-dimensional-array.html</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>　　在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br><a id="more"></a></p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Consider the following matrix:</span><br><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Given target = 5, return true.</span><br><span class="line">Given target = 20, return false.</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>从右上角开始查找。矩阵中的一个数，它左边的数都比它小，下边的数都比它大。因此，从右上角开始查找，就可以根据 target 和当前元素的大小关系来缩小查找区间。</p>
<p>复杂度：O(M + N) + O(1)</p>
<p>当前元素的查找区间为左下角的所有元素，例如元素 12 的查找区间如下：<br><img src="/img/222array.png" alt="二维数组中的查找"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public boolean Find(int target, int[][] matrix) &#123;</span><br><span class="line">    if (matrix == null || matrix.length == 0 || matrix[0].length == 0)</span><br><span class="line">        return false;</span><br><span class="line">    int rows = matrix.length, cols = matrix[0].length;</span><br><span class="line">    int r = 0, c = cols - 1; // 从右上角开始</span><br><span class="line">    while (r &lt;= rows - 1 &amp;&amp; c &gt;= 0) &#123;</span><br><span class="line">        if (target == matrix[r][c]) </span><br><span class="line">            return true;</span><br><span class="line">        else if (target &gt; matrix[r][c]) // 如果比右上角的数大,就往下找；否则往左找</span><br><span class="line">            r++;</span><br><span class="line">        else </span><br><span class="line">            c--;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>题目来源：<a href="https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;tqId=11154&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">nowcoder</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> nowcoder </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于缓存]]></title>
      <url>/about-cache.html</url>
      <content type="html"><![CDATA[<p>对于热点数据，缓存的价值非常大，主要解决热点数据访问的性能问题。提供高性能的数据快速访问。<br><a id="more"></a></p>
<h2 id="缓存特征"><a href="#缓存特征" class="headerlink" title="缓存特征"></a>缓存特征</h2><h3 id="命中率"><a href="#命中率" class="headerlink" title="命中率"></a>命中率</h3><p>当某个请求能够通过访问缓存而得到响应时，称为缓存命中。</p>
<p>缓存命中率越高，缓存的利用率也就越高。</p>
<h3 id="最大空间"><a href="#最大空间" class="headerlink" title="最大空间"></a>最大空间</h3><p>缓存通常位于内存中，内存的空间通常比磁盘空间小的多，因此缓存的最大空间不可能非常大。</p>
<p>当缓存存放的数据量超过最大空间时，就需要淘汰部分数据来存放新到达的数据。</p>
<h3 id="清空策略"><a href="#清空策略" class="headerlink" title="清空策略"></a>清空策略</h3><ul>
<li><p>FIFO (First In First Out)：先进先出策略，在实时性的场景下，需要经常访问最新的数据，那么就可以使用 FIFO，使得最先进入的数据（最晚的数据）被淘汰。</p>
</li>
<li><p>LRU (Least Recently Used)：最近最久未使用策略，优先淘汰最久未使用的数据，也就是上次被访问时间距离现在最久的数据。该策略可以保证内存中的数据都是热点数据，也就是经常被访问的数据，从而保证缓存命中率。</p>
</li>
<li><p>LFU (less frequently used)：最少使用策略，无论是否过期，根据元素的被使用次数判断，清除使用次数较少的元素释放空间。策略算法主要比较元素的hitCount（命中次数）。在保证高频数据有效性场景下，可选择这类策略。</p>
</li>
</ul>
<h2 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>当 HTTP 响应允许进行缓存时，浏览器会将 HTML、CSS、JavaScript、图片等静态资源进行缓存。</p>
<h3 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h3><p>网络服务提供商（ISP）是网络访问的第一跳，通过将数据缓存在 ISP 中能够大大提高用户的访问速度。</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理位于服务器之前，请求与响应都需要经过反向代理。通过将数据缓存在反向代理，在用户请求反向代理时就可以直接使用缓存进行响应。</p>
<h3 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h3><p>使用 Guava Cache 将数据缓存在服务器本地内存中，服务器代码可以直接读取本地内存中的缓存，速度非常快。</p>
<h3 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h3><p>使用 Redis、Memcache 等分布式缓存将数据缓存在分布式缓存系统中。</p>
<p>相对于本地缓存来说，分布式缓存单独部署，可以根据需求分配硬件资源。不仅如此，服务器集群都可以访问分布式缓存，而本地缓存需要在服务器集群之间进行同步，实现难度和性能开销上都非常大。</p>
<h3 id="数据库缓存"><a href="#数据库缓存" class="headerlink" title="数据库缓存"></a>数据库缓存</h3><p>MySQL 等数据库管理系统具有自己的查询缓存机制来提高查询效率。</p>
<h2 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>指的是对某个一定不存在的数据进行请求，该请求将会穿透缓存到达数据库。</p>
<p><strong>解决方案：</strong></p>
<ul>
<li>对这些不存在的数据缓存一个空数据；</li>
<li>对这类请求进行过滤。</li>
</ul>
<h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>指的是由于数据没有被加载到缓存中，或者缓存数据在同一时间大面积失效（过期），又或者缓存服务器宕机，导致大量的请求都到达数据库。</p>
<p>在有缓存的系统中，系统非常依赖于缓存，缓存分担了很大一部分的数据请求。当发生缓存雪崩时，数据库无法处理这么大的请求，导致数据库崩溃。</p>
<p><strong>解决方案：</strong></p>
<ul>
<li>为了防止缓存在同一时间大面积过期导致的缓存雪崩，可以通过观察用户行为，合理设置缓存过期时间来实现；</li>
<li>为了防止缓存服务器宕机出现的缓存雪崩，可以使用分布式缓存，分布式缓存中每一个节点只缓存部分的数据，当某个节点宕机时可以保证其它节点的缓存仍然可用。</li>
<li>也可以进行缓存预热，避免在系统刚启动不久由于还未将大量数据进行缓存而导致缓存雪崩。</li>
</ul>
<h3 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h3><p>缓存一致性要求数据更新的同时缓存数据也能够实时更新。</p>
<p><strong>解决方案：</strong></p>
<ul>
<li>在数据更新的同时立即去更新缓存；</li>
<li>在读缓存之前先判断缓存是否是最新的，如果不是最新的先进行更新。</li>
</ul>
<p>要保证缓存一致性需要付出很大的代价，缓存数据最好是那些对一致性要求不高的数据，允许缓存数据存在一些脏数据。</p>
<blockquote>
<p>Reference: </p>
<ul>
<li><a href="https://tech.meituan.com/cache_about.html" target="_blank" rel="noopener">缓存那些事</a></li>
<li><a href="https://www.aspirationhosting.com/aspiration-cdn/" target="_blank" rel="noopener">How Aspiration CDN helps to improve your website loading speed?</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 缓存 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[消息可靠性投递的技术方案]]></title>
      <url>/message-reliability-delivery-suggestion.html</url>
      <content type="html"><![CDATA[<p>　　使用 <code>MQ</code> 技术最常见的核心需求，需要保证消息不丢失，100%投递成功。以下是一个可靠性投递的流程图，以说明可靠性投递的概念。<br><a id="more"></a><br><img src="/img/MQkekao.jpg" alt="可靠性投递的流程图"></p>
<p><strong>step 1：</strong> 首先把消息信息(业务数据）存储到数据库中，紧接着，我们再把这个消息记录也存储到一张消息记录表里(者另外一个同源数据库的消息记录表)<br><strong>step 2：</strong> 发送消息到<code>MQ Broker</code>节点（采用 confirm 方式发送，会有异步的返回结果）<br><strong>step 3：</strong> 生产者端接受<code>MQ Broker</code>节点返回的 confirm 确认消息结果<br><strong>step 4：</strong> 进行更新消息记录表里的消息状态。比如默认 status = 0 当收到消息确认成功后，更新为1即可<br><strong>step 5：</strong> 但是在消息确认这个过程中可能由于网络闪断、MQ Broker端异常等原因导致 回送消息失败或者异常。这个时候就需要发送方（生产者）对消息进行可靠性投递了，保障消息不丢失，100%的投递成功！（有一种极限情况是闪断，Broker返回的成功确认消息，但是生产端由于网络闪断没收到，这个时候重新投递可能会造成消息重复，需要消费端去做幂等处理）所以我们需要有一个定时任务，（比如每5分钟拉取一下处于中间状态的消息，当然这个消息可以设置一个超时时间，比如超过1分钟 Status = 0 ，也就说明了1分钟这个时间窗口内，我们的消息没有被确认，那么会被定时任务拉取出来）<br><strong>step 6：</strong> 接下来我们把中间状态的消息进行重新投递 retry send，继续发送消息到MQ ，当然也可能有多种原因导致发送失败<br><strong>step 7：</strong> 我们可以采用设置最大努力尝试次数，比如投递了3次，还是失败，那么我们可以将最终状态设置为Status = 2 ，最后 交由人工解决处理此类问题（或者把消息转储到失败表中）。</p>
<p>具体的技术实现细节参考慕课视频《RabbitMQ消息中间件极速入门与实战》</p>
<blockquote>
<p>Reference:</p>
<ul>
<li><a href="https://www.imooc.com/learn/1042" target="_blank" rel="noopener">RabbitMQ消息中间件极速入门与实战</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[保证服务可用行性的核心思路]]></title>
      <url>/improve-service-availability.html</url>
      <content type="html"><![CDATA[<p>　　如何保障稳定性，提高可用性呢？其实，可以分为几个方面：通过技术和流程防止故障产生、并且在发生故障时，减少故障的定位时间，以及提高故障恢复时间。<br><a id="more"></a><br><img src="/img/1532601081166-ca0c87c3-569c-4c68-8679-6d7aaf8972ce.jpeg" alt="保证服务可用行性的核心思路"></p>
<blockquote>
<p>Reference:</p>
<ul>
<li>梁桂钊的知识星球 –「服务端思维」</li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度地图API-判断坐标点在多边形区域内]]></title>
      <url>/judge-point-isInPolygon.html</url>
      <content type="html"><![CDATA[<p>　　在智能派单的业务中,判断一个订单的收货地址在哪个配送员的配送范围之内,就显得极为关键。网上参考了一些解决思路和方法,做了一些实践和归纳。<br><a id="more"></a></p>
<h3 id="射线法思路"><a href="#射线法思路" class="headerlink" title="射线法思路"></a>射线法思路</h3><ul>
<li><a href="http://www.html-js.com/article/1517" target="_blank" rel="noopener">判断一个点是否在多边形内部 [1] 射线法思路</a></li>
<li><a href="http://www.html-js.com/article/1528" target="_blank" rel="noopener">判断一个点是否在多边形内部 [2] 射线法实现</a></li>
</ul>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 判断点是否在多边形内，如果点位于多边形的顶点或边上，也算做点在多边形内，直接返回true</span><br><span class="line">     * @param point 检测点</span><br><span class="line">     * @param pts   多边形的顶点</span><br><span class="line">     * @return      点在多边形内返回true,否则返回false</span><br><span class="line">     */</span><br><span class="line">    public static boolean IsPtInPoly(Point2D.Double point, List&lt;Point2D.Double&gt; pts)&#123;</span><br><span class="line"></span><br><span class="line">        int N = pts.size();</span><br><span class="line">        boolean boundOrVertex = true; //如果点位于多边形的顶点或边上，也算做点在多边形内，直接返回true</span><br><span class="line">        int intersectCount = 0;//cross points count of x</span><br><span class="line">        double precision = 2e-10; //浮点类型计算时候与0比较时候的容差</span><br><span class="line">        Point2D.Double p1, p2;//neighbour bound vertices</span><br><span class="line">        Point2D.Double p = point; //当前点</span><br><span class="line"></span><br><span class="line">        p1 = pts.get(0);//left vertex</span><br><span class="line">        for(int i = 1; i &lt;= N; ++i)&#123;//check all rays</span><br><span class="line">            if(p.equals(p1))&#123;</span><br><span class="line">                return boundOrVertex;//p is an vertex</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            p2 = pts.get(i % N);//right vertex</span><br><span class="line">            if(p.x &lt; Math.min(p1.x, p2.x) || p.x &gt; Math.max(p1.x, p2.x))&#123;//ray is outside of our interests</span><br><span class="line">                p1 = p2;</span><br><span class="line">                continue;//next ray left point</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(p.x &gt; Math.min(p1.x, p2.x) &amp;&amp; p.x &lt; Math.max(p1.x, p2.x))&#123;//ray is crossing over by the algorithm (common part of)</span><br><span class="line">                if(p.y &lt;= Math.max(p1.y, p2.y))&#123;//x is before of ray</span><br><span class="line">                    if(p1.x == p2.x &amp;&amp; p.y &gt;= Math.min(p1.y, p2.y))&#123;//overlies on a horizontal ray</span><br><span class="line">                        return boundOrVertex;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if(p1.y == p2.y)&#123;//ray is vertical</span><br><span class="line">                        if(p1.y == p.y)&#123;//overlies on a vertical ray</span><br><span class="line">                            return boundOrVertex;</span><br><span class="line">                        &#125;else&#123;//before ray</span><br><span class="line">                            ++intersectCount;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;else&#123;//cross point on the left side</span><br><span class="line">                        double xinters = (p.x - p1.x) * (p2.y - p1.y) / (p2.x - p1.x) + p1.y;//cross point of y</span><br><span class="line">                        if(Math.abs(p.y - xinters) &lt; precision)&#123;//overlies on a ray</span><br><span class="line">                            return boundOrVertex;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        if(p.y &lt; xinters)&#123;//before ray</span><br><span class="line">                            ++intersectCount;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;//special case when ray is crossing through the vertex</span><br><span class="line">                if(p.x == p2.x &amp;&amp; p.y &lt;= p2.y)&#123;//p crossing over p2</span><br><span class="line">                    Point2D.Double p3 = pts.get((i+1) % N); //next vertex</span><br><span class="line">                    if(p.x &gt;= Math.min(p1.x, p3.x) &amp;&amp; p.x &lt;= Math.max(p1.x, p3.x))&#123;//p.x lies between p1.x &amp; p3.x</span><br><span class="line">                        ++intersectCount;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        intersectCount += 2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p1 = p2;//next ray left point</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(intersectCount % 2 == 0)&#123;//偶数在多边形外</span><br><span class="line">            return false;</span><br><span class="line">        &#125; else &#123; //奇数在多边形内</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="百度地图-API-的使用"><a href="#百度地图-API-的使用" class="headerlink" title="百度地图 API 的使用"></a>百度地图 API 的使用</h3><ul>
<li>需要申请且认证为开发者。</li>
<li>需要在<a href="http://lbsyun.baidu.com/apiconsole/key" target="_blank" rel="noopener">控制台</a>创建应用,获取相应的服务密钥(<code>AK</code>)</li>
<li>在开发文档中选择自己需要的api,根据具体api的服务文档和使用指南发送请求,使用服务即可。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 沉淀 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于开发中单表查和连表查的取舍]]></title>
      <url>/single-or-join-query.html</url>
      <content type="html"><![CDATA[<p>　　关于开发中单表查询和连接查询怎么取舍？连表配合索引一次查询就可以出来，单表的话可能需要 n 次读取数据库。<br><a id="more"></a> </p>
<h3 id="处理策略"><a href="#处理策略" class="headerlink" title="处理策略"></a>处理策略</h3><p>　　能单表就单表，尽量不要连表，不光有开销，连表后复用性降低，系统复杂性会增加。而且数据库做关联是很耗性能的。把连表查拆分成两次查询也是基于查出结果的 idList 去查另一张表，开销很小，查询出的结果可以做一次merge组合。</p>
<h3 id="通用的-merge-方法"><a href="#通用的-merge-方法" class="headerlink" title="通用的 merge 方法"></a>通用的 merge 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wave</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-06-20 11:24</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把 sourceList 的一些属性合并到 targetList 中</span></span><br><span class="line"><span class="comment">     * 基于 testFunction 的条件,合入逻辑实现为 biConsumer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> testFunction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> biConsumer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;S&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, S&gt; <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(List&lt;T&gt; targetList, List&lt;S&gt; sourceList,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    BiFunction&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> S,Boolean&gt; testFunction,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> S&gt; biConsumer)</span> </span>&#123;</span><br><span class="line">        targetList.forEach((t)-&gt;&#123;</span><br><span class="line">            Optional&lt;S&gt; optional = sourceList.stream().filter(s -&gt; testFunction.apply(t,s)).findFirst();</span><br><span class="line">            <span class="keyword">if</span> (optional.isPresent()) &#123;</span><br><span class="line">                biConsumer.accept(t,optional.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 基于两个 list 的 id 做关联, 将 name 属性 merge 到目标 list </span><br><span class="line"> *</span><br><span class="line">**/</span><br><span class="line">MergeUtil.merge(targetList,sourceList,</span><br><span class="line">                (target,source)-&gt;target.id().equals(source.id()),</span><br><span class="line">                (target,source)-&gt;target.setName(source.getName));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Reference:</p>
<ul>
<li>梁桂钊的知识星球 –「服务端思维」</li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 沉淀 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lambda 表达式]]></title>
      <url>/lambda-expressions.html</url>
      <content type="html"><![CDATA[<h2 id="什么是-Lambda"><a href="#什么是-Lambda" class="headerlink" title="什么是 Lambda?"></a>什么是 Lambda?</h2><p>我们知道，对于一个Java变量，我们可以赋给其一个“<strong>值</strong>”。<br><img src="/img/lambda/p1.jpg" alt="normal"></p>
<p>如果你想把“<strong>一块代码</strong>”赋给一个Java变量，应该怎么做呢？<br><a id="more"></a></p>
<p>比如，我想把右边那块代码，赋给一个叫做<code>aBlockOfCode</code>的Java变量：<br><img src="/img/lambda/p2.jpg" alt="p2"></p>
<p>在Java 8之前，这个是做不到的。但是Java 8问世之后，利用Lambda特性，就可以做到了。<br><img src="/img/lambda/p3.jpg" alt="p3"></p>
<p>当然，这个并不是一个很简洁的写法。所以，为了使这个赋值操作更加<strong>elegant</strong>, 我们可以移除一些没用的声明。<br><img src="/img/lambda/p4.jpg" alt="p4"></p>
<p>这样，我们就成功的非常优雅的把“一块代码”赋给了一个变量。<strong>而“这块代码”，或者说“这个被赋给一个变量的函数”，就是一个Lambda表达式</strong>。<br>但是这里仍然有一个问题，就是变量<code>aBlockOfCode</code>的类型应该是什么？在Java 8里面，<strong>所有的Lambda的类型都是一个接口，而Lambda表达式本身，也就是”那段代码“，需要是这个接口的实现</strong>。这是我认为理解Lambda的一个关键所在，简而言之就是，<strong>Lambda表达式本身就是一个接口的实现</strong>。直接这样说可能还是有点让人困扰，我们继续看看例子。我们给上面的aBlockOfCode加上一个类型：</p>
<p><img src="/img/lambda/p5.jpg" alt="p5"><br>这种只有<strong>一个接口函数需要被实现的接口类型，我们叫它”函数式接口“</strong>。为了避免后来的人在这个接口中增加接口函数导致其有多个接口函数需要被实现，变成”非函数接口”，我们可以在这个上面加上一个声明@FunctionalInterface, 这样别人就无法在里面添加新的接口函数了：<br><img src="/img/lambda/p6.jpg" alt="p6"></p>
<p>这样，我们就得到了一个完整的Lambda表达式声明：<br><img src="/img/lambda/p7.jpg" alt="p7"></p>
<h2 id="Lambda表达式有什么作用"><a href="#Lambda表达式有什么作用" class="headerlink" title="Lambda表达式有什么作用?"></a>Lambda表达式有什么作用?</h2><p><strong>最直观的作用就是使得代码变得异常简洁。</strong><br>我们可以对比一下Lambda表达式和传统的Java对同一个接口的实现：<br><img src="/img/lambda/p8.jpg" alt="p8"></p>
<p>这两种写法本质上是等价的。但是显然，Java 8中的写法更加优雅简洁。并且，由于Lambda可以直接赋值给一个变量，<strong>我们就可以直接把Lambda作为参数传给函数, 而传统的Java必须有明确的接口实现的定义，初始化才行：</strong><br><img src="/img/lambda/p9.jpg" alt="p9"><br>有些情况下，这个接口实现只需要用到一次。传统的Java 7必须要求你定义一个“污染环境”的接口实现MyInterfaceImpl，而相较之下Java 8的Lambda, 就显得干净很多。</p>
<h2 id="Lambda结合FunctionalInterface-Lib-forEach-stream-，method-reference等新特性可以使代码变的更加简洁！"><a href="#Lambda结合FunctionalInterface-Lib-forEach-stream-，method-reference等新特性可以使代码变的更加简洁！" class="headerlink" title="Lambda结合FunctionalInterface Lib, forEach, stream()，method reference等新特性可以使代码变的更加简洁！"></a>Lambda结合FunctionalInterface Lib, forEach, stream()，method reference等新特性可以使代码变的更加简洁！</h2><p>直接上例子。</p>
<p>假设Person的定义和List<person>的值都给定。<br><img src="/img/lambda/p10.jpg" alt="p10"><br>现在需要你打印出guiltyPersons List里面所有LastName以”Z”开头的人的FirstName。</person></p>
<p><strong>原生态Lambda写法</strong>：定义两个函数式接口，定义一个静态函数，调用静态函数并给参数赋值Lambda表达式。<br><img src="/img/lambda/p12.jpg" alt="p12"><br>这个代码实际上已经比较简洁了，但是我们还可以更简洁么？当然可以。在Java 8中有一个函数式接口的包，里面定义了大量可能用到的函数式接口（<a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html" target="_blank" rel="noopener">java.util.function (Java Platform SE 8 )</a>）。所以，我们在这里压根都不需要定义NameChecker和Executor这两个函数式接口，直接用Java 8函数式接口包里的Predicate<t>和Consumer<t>就可以了——因为他们这一对的接口定义和NameChecker/Executor其实是一样的。<br><img src="/img/lambda/pp.jpg" alt="pp"><br><strong>第一步简化 - 利用函数式接口包：</strong><br><img src="/img/lambda/p13.jpg" alt="p13"><br>静态函数里面的for each循环其实是非常碍眼的。这里可以利用Iterable自带的forEach()来替代。forEach()本身可以接受一个Consumer<t> 参数。<br><strong>第二步简化 - 用Iterable.forEach()取代foreach loop：</strong><br><img src="/img/lambda/p14.jpg" alt="p14"><br>由于静态函数其实只是对List进行了一通操作，这里我们可以甩掉静态函数，直接使用stream()特性来完成。stream()的几个方法都是接受Predicate<t>，Consumer<t>等参数的（<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html" target="_blank" rel="noopener">java.util.stream (Java Platform SE 8 )</a>）。你理解了上面的内容，stream()这里就非常好理解了，并不需要多做解释。<br><strong>第三步简化 - 利用stream()替代静态函数：</strong><br><img src="/img/lambda/p15.jpg" alt="p15"><br>对比最开始的Lambda写法，这里已经非常非常简洁了。但是如果，我们的要求变一下，变成print这个人的全部信息，及p -&gt; System.out.println(p); 那么还可以利用Method reference来继续简化。所谓Method reference, 就是用已经写好的别的Object/Class的method来代替Lambda expression。格式如下：<br><img src="/img/lambda/p16.jpg" alt="p16"><br><strong>第四步简化 - 如果是println(p)，则可以利用Method reference代替forEach中的Lambda表达式：</strong><br><img src="/img/lambda/p17.jpg" alt="p17"><br>这基本上就是能写的最简洁的版本了。</t></t></t></t></t></p>
<h2 id="Lambda配合Optional可以使Java对于null的处理变的异常优雅"><a href="#Lambda配合Optional可以使Java对于null的处理变的异常优雅" class="headerlink" title="Lambda配合Optional可以使Java对于null的处理变的异常优雅"></a>Lambda配合Optional<t>可以使Java对于null的处理变的异常优雅</t></h2><p>这里假设我们有一个person object，以及一个person object的Optional wrapper:<br><img src="/img/lambda/p18.jpg" alt="p18"><br>Optional<t>如果不结合Lambda使用的话，并不能使原来繁琐的null check变的简单。<br><img src="/img/lambda/p20.jpg" alt="p20"><br><strong>只有当Optional<t>结合Lambda一起使用的时候，才能发挥出其真正的威力！</t></strong></t></p>
<p>我们现在就来对比一下下面四种常见的null处理中，Java 8的Lambda+Optional<t>和传统Java两者之间对于null的处理差异。<br><strong>情况一 - 存在则开干</strong><br><img src="/img/lambda/p21.jpg" alt="p21"><br><strong>情况二 - 存在则返回，无则返回屁</strong><br><img src="/img/lambda/p22.jpg" alt="p22"><br><strong>情况三 - 存在则返回，无则由函数产生</strong><br><img src="/img/lambda/p23.jpg" alt="p23"><br><strong>情况四 - 夺命连环null检查</strong><br><img src="/img/lambda/p24.jpg" alt="p24"><br>由上述四种情况可以清楚地看到，Optional<t>+Lambda可以让我们少写很多ifElse块。尤其是对于情况四那种夺命连环null检查，传统java的写法显得冗长难懂，而新的Optional<t>+Lambda则清新脱俗，清楚简洁。</t></t></t></p>
<p>关于Java的Lambda, 还有东西需要讨论和学习。比如如何handle lambda exception，如何利用Lambda的特性来进行parallel processing等。总之，我只是一如既往地介绍个大概，让你大概知道，哦！原来是这样子就OK了。网上关于Lambda有很多相关的教程，多看多练。假以时日，必定有所精益。</p>
<blockquote>
<p>Reference:　<a href="https://www.zhihu.com/question/20125256/answer/324121308" target="_blank" rel="noopener">Sevenvidia-知乎</a>　　</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RocketMQ 初试]]></title>
      <url>/rocketmq-start-learn.html</url>
      <content type="html"><![CDATA[<p>　　近期的项目需求需要用到消息队列, 结合实际的业务需求(佣金结算), 需要对市面上的几种消息中间件进行选型分析, 从功能维度(优先级队列、延迟队列、死信队列、重试队列、消费模式、消息过滤、消息顺序性、事务性消息等), 性能,可靠性 + 可用性, 运维管理, 日志追踪, 社区力度及生态发展等层面进行考虑, 根据各自的侧重点, 选择合适自己的消息中间件尤为重要。<br><a id="more"></a>　　<br>　　我这次选择了阿里开源的<code>RocketMQ</code>,下面主要记录下我的首次使用,与<code>Spring</code>集成,采用<code>push</code>方式接收消息。</p>
<h2 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apache.rocketmq.consumer.PushConsumer=WeChatConsumer</span><br><span class="line">apache.rocketmq.producer.producerGroup=WeChatProducer</span><br><span class="line">apache.rocketmq.namesrvAddr=XX.XX.XX.XX:9876</span><br></pre></td></tr></table></figure>
<h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Producer.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产者的组名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;apache.rocketmq.producer.producerGroup&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String producerGroup;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NameServer 地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;apache.rocketmq.namesrvAddr&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String namesrvAddr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defaultMQProducer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//生产者的组名</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(producerGroup);</span><br><span class="line">        <span class="comment">//指定NameServer地址，多个地址以 ; 隔开</span></span><br><span class="line">        producer.setNamesrvAddr(namesrvAddr);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *  从文件中获取待消费消息数据：</span></span><br><span class="line"><span class="comment">        *  4418040302625808|2018-04-03 10:35:52|81|820|16608187978|2018-04-03 14:22:56|9095180232</span></span><br><span class="line"><span class="comment">           6518040101499088|2018-04-01 10:50:20|75|750|13037219257|2018-04-03 14:22:55|3579901463</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        File fin = <span class="keyword">new</span> File(<span class="string">"E:\\work\\20180403_1432_002.REQ"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Producer对象在使用之前必须要调用start初始化，初始化一次即可</span></span><br><span class="line"><span class="comment">             * 注意：切记不可以在每次发送消息时，都调用start方法</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            producer.start();</span><br><span class="line">            List&lt;String&gt; msgList = ReadFile.readFile(fin);</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(msgList)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            StopWatch stop = <span class="keyword">new</span> StopWatch();</span><br><span class="line">            stop.start();</span><br><span class="line">            <span class="keyword">for</span> (String str : msgList) &#123;</span><br><span class="line">                <span class="comment">// 拆分字符串, id 记录流水号</span></span><br><span class="line">                String[] msgArr = str.split(<span class="string">"\\|"</span>);</span><br><span class="line">                Message msg = <span class="keyword">new</span> Message(<span class="string">"WXData"</span>,<span class="string">"push"</span>,msgArr[<span class="number">0</span>],str.getBytes());</span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                SendResult result = producer.send(msg);</span><br><span class="line">                logger.info(<span class="string">"id:&#123;&#125;,result:&#123;&#125;"</span>, result.getMsgId(), result.getSendStatus());</span><br><span class="line">            &#125;</span><br><span class="line">            stop.stop();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            producer.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费者的组名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;apache.rocketmq.consumer.PushConsumer&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String consumerGroup;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NameServer 地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;apache.rocketmq.namesrvAddr&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String namesrvAddr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Consumer.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CalcCommissionService calcService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// spring框架的注解，在方法上加该注解会在项目启动的时候执行该方法，也可以理解为在spring容器初始化的时候执行该方法</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defaultMQPushConsumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//消费者的组名</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(consumerGroup);</span><br><span class="line">        <span class="comment">//指定NameServer地址，多个地址以 ; 隔开</span></span><br><span class="line">        consumer.setNamesrvAddr(namesrvAddr);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//订阅WXData下的push消息</span></span><br><span class="line">            consumer.subscribe(<span class="string">"WXData"</span>, <span class="string">"push"</span>);</span><br><span class="line">            <span class="comment">//设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费</span></span><br><span class="line">            <span class="comment">//如果非第一次启动，那么按照上次消费的位置继续消费</span></span><br><span class="line">            consumer.setConsumeFromWhere(</span><br><span class="line">                    ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line">            consumer.registerMessageListener(</span><br><span class="line">                    (List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext Context) -&gt; &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Message msg = list.get(<span class="number">0</span>);</span><br><span class="line">                            String msgBody = <span class="keyword">new</span> String (msg.getBody());</span><br><span class="line">                            <span class="comment">// TODO　coding...</span></span><br><span class="line"></span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER; <span class="comment">// 稍后重试</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;   <span class="comment">// 消费成功</span></span><br><span class="line">                    &#125;);</span><br><span class="line">            consumer.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * test rocketMQ</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Producer rocketMQProvider;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testMQ"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testMq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rocketMQProvider.defaultMQProducer();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> MQ </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 高并发编程「三」]]></title>
      <url>/java-concurrent-programming-3.html</url>
      <content type="html"><![CDATA[<h2 id="ConcurrentMap"><a href="#ConcurrentMap" class="headerlink" title="ConcurrentMap"></a>ConcurrentMap</h2><p>　　Map(Set)如果在不加锁的情况下, 可以使用 <code>HashMap</code>,<code>treeMap</code>,<code>LinkedHashMap</code>等。如果想加锁,可以使用 <code>HashTable</code>(用的比较少),如果并发不高的情况下，可以使用 <code>Collections.synchronizedXXX</code>,如果并发性比较高的情况, 建议使用 <code>ConcurrentHashMap</code>,如果并发性比较高，并且要求排序的情况下，建议使用 <code>ConcurrentSkipListMap</code>。<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_ConcurrentMap</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 16 段, 分段锁,高并发的时候效率比较高</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//Map&lt;String, String&gt; map = new ConcurrentHashMap&lt;&gt;();</span></span><br><span class="line">		Map&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentSkipListMap&lt;&gt;(); <span class="comment">//高并发并且排序</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * Hashtable 本身就带锁,效率比较低</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//Map&lt;String, String&gt; map = new Hashtable&lt;&gt;();</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 可以对 HashMap 加锁：Collections.synchronizedXXX</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//Map&lt;String, String&gt; map =  new HashMap&lt;&gt;();</span></span><br><span class="line">		<span class="comment">//TreeMap</span></span><br><span class="line">		Random r = <span class="keyword">new</span> Random();</span><br><span class="line">		Thread[] ths = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">		CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(ths.length);</span><br><span class="line">		<span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ths.length; i++) &#123;</span><br><span class="line">			ths[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">10000</span>; j++) map.put(<span class="string">"a"</span> + r.nextInt(<span class="number">100000</span>), <span class="string">"a"</span> + r.nextInt(<span class="number">100000</span>));</span><br><span class="line">				latch.countDown();</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		Arrays.asList(ths).forEach(t-&gt;t.start());</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			latch.await();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">		System.out.println(end - start);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CopyOnWriteList"><a href="#CopyOnWriteList" class="headerlink" title="CopyOnWriteList"></a>CopyOnWriteList</h2><p>写时复制容器 <code>copy on write</code>,多线程环境下,写时效率低,读时效率高,适合写少读多的环境。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_CopyOnWriteList</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; lists = </span><br><span class="line">				<span class="comment">//new ArrayList&lt;&gt;(); //这个会出并发问题！</span></span><br><span class="line">				<span class="comment">//new Vector();</span></span><br><span class="line">				<span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">		Random r = <span class="keyword">new</span> Random();</span><br><span class="line">		Thread[] ths = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ths.length; i++) &#123;</span><br><span class="line">			Runnable task = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">	</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++) lists.add(<span class="string">"a"</span> + r.nextInt(<span class="number">10000</span>));</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;;</span><br><span class="line">			ths[i] = <span class="keyword">new</span> Thread(task);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		runAndComputeTime(ths);</span><br><span class="line">		</span><br><span class="line">		System.out.println(lists.size());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runAndComputeTime</span><span class="params">(Thread[] ths)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> s1 = System.currentTimeMillis();</span><br><span class="line">		Arrays.asList(ths).forEach(t-&gt;t.start());</span><br><span class="line">		Arrays.asList(ths).forEach(t-&gt;&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				t.join();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">long</span> s2 = System.currentTimeMillis();</span><br><span class="line">		System.out.println(s2 - s1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="SynchronizedList"><a href="#SynchronizedList" class="headerlink" title="SynchronizedList"></a>SynchronizedList</h2><p>　　<code>new ArrayList()</code> 是没有锁的，如果想给这个list上锁，可以通过调用<code>Collections</code> 的静态方法 <code>synchronizedList()</code>,将不加锁的容器返回成一个加了锁的容器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_SynchronizedList</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; strs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		List&lt;String&gt; strsSync = Collections.synchronizedList(strs);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ConcurrentQueue"><a href="#ConcurrentQueue" class="headerlink" title="ConcurrentQueue"></a>ConcurrentQueue</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_ConcurrentQueue</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Queue&lt;String&gt; strs = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="comment">// offer 类似于 add,有一个boolean类型的返回值,表示是否添加成功</span></span><br><span class="line">			strs.offer(<span class="string">"a"</span> + i);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		System.out.println(strs);</span><br><span class="line"></span><br><span class="line">		System.out.println(strs.size());</span><br><span class="line">		<span class="comment">// 表示从队列头部拿出一个,队列数量减少一个</span></span><br><span class="line">		System.out.println(strs.poll());</span><br><span class="line">		System.out.println(strs.size());</span><br><span class="line">		<span class="comment">// 表示从队列中拿出来，但是不删除，队列数量不会变</span></span><br><span class="line">		System.out.println(strs.peek());</span><br><span class="line">		System.out.println(strs.size());</span><br><span class="line"></span><br><span class="line">		<span class="comment">//双端队列Deque, 可以从两端取，也可以往两端添加</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h2><p>　　无界队列，使用链表实现的阻塞式容器,添加了两个方法，<code>put</code>,<code>take</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_LinkedBlockingQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> BlockingQueue&lt;String&gt; strs = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					strs.put(<span class="string">"a"</span> + i); <span class="comment">//如果满了，就会等待</span></span><br><span class="line">					TimeUnit.MILLISECONDS.sleep(r.nextInt(<span class="number">1000</span>));</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="string">"p1"</span>).start();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">				<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						System.out.println(Thread.currentThread().getName() + <span class="string">" take -"</span> + strs.take()); <span class="comment">//如果空了，就会等待</span></span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;, <span class="string">"c"</span> + i).start();</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p>　　<code>ArrayBlockingQueue</code>,是有界队列，能装的元素的个数是固定的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T06_ArrayBlockingQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> BlockingQueue&lt;String&gt; strs = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			strs.put(<span class="string">"a"</span> + i);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		strs.put(<span class="string">"aaa"</span>); <span class="comment">//满了就会等待，程序阻塞</span></span><br><span class="line">		<span class="comment">//strs.add("aaa"); // 会报异常</span></span><br><span class="line">		<span class="comment">//strs.offer("aaa"); // 会通过返回值通知是否添加成功</span></span><br><span class="line">		<span class="comment">//strs.offer("aaa", 1, TimeUnit.SECONDS); // 一秒钟之后加不进去，就不加了</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(strs);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h2><p>　　  无界队列，队列里的每一个元素都有一个时间表示自己还有多久时间可以被消费,可以用来做执行定时任务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T07_DelayQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> BlockingQueue&lt;MyTask&gt; tasks = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> Random r = <span class="keyword">new</span> Random();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Delayed</span> </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> runningTime;</span><br><span class="line">		</span><br><span class="line">		MyTask(<span class="keyword">long</span> rt) &#123;</span><br><span class="line">			<span class="keyword">this</span>.runningTime = rt;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>.getDelay(TimeUnit.MILLISECONDS) &lt; o.getDelay(TimeUnit.MILLISECONDS))</span><br><span class="line">				<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.getDelay(TimeUnit.MILLISECONDS) &gt; o.getDelay(TimeUnit.MILLISECONDS)) </span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> unit.convert(runningTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span> + runningTime;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">		MyTask t1 = <span class="keyword">new</span> MyTask(now + <span class="number">1000</span>);</span><br><span class="line">		MyTask t2 = <span class="keyword">new</span> MyTask(now + <span class="number">2000</span>);</span><br><span class="line">		MyTask t3 = <span class="keyword">new</span> MyTask(now + <span class="number">1500</span>);</span><br><span class="line">		MyTask t4 = <span class="keyword">new</span> MyTask(now + <span class="number">2500</span>);</span><br><span class="line">		MyTask t5 = <span class="keyword">new</span> MyTask(now + <span class="number">500</span>);</span><br><span class="line">		</span><br><span class="line">		tasks.put(t1);</span><br><span class="line">		tasks.put(t2);</span><br><span class="line">		tasks.put(t3);</span><br><span class="line">		tasks.put(t4);</span><br><span class="line">		tasks.put(t5);</span><br><span class="line">		</span><br><span class="line">		System.out.println(tasks);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">			System.out.println(tasks.take());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="TransferQueue"><a href="#TransferQueue" class="headerlink" title="TransferQueue"></a>TransferQueue</h2><p>　　提供一个<code>transfer</code>方法。 消费者先启动，当生产者生产的时候，先找消费者，有消费者直接给消费者，而不是放入队列,效率更高， 用在更高的并发场景下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T08_TransferQueue</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		LinkedTransferQueue&lt;String&gt; strs = <span class="keyword">new</span> LinkedTransferQueue&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*new Thread(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">			try &#123;</span></span><br><span class="line"><span class="comment">				System.out.println(strs.take());</span></span><br><span class="line"><span class="comment">			&#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">				e.printStackTrace();</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125;).start();*/</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//strs.transfer("aaa");</span></span><br><span class="line">		</span><br><span class="line">		strs.put(<span class="string">"aaa"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				System.out.println(strs.take());</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="SynchronusQueue"><a href="#SynchronusQueue" class="headerlink" title="SynchronusQueue"></a>SynchronusQueue</h2><p>　　没有容量的队列，有消息直接被消费，而不能放入队列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T09_SynchronusQueue</span> </span>&#123; <span class="comment">//容量为0</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		BlockingQueue&lt;String&gt; strs = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				System.out.println(strs.take());</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).start();</span><br><span class="line">		</span><br><span class="line">		strs.put(<span class="string">"aaa"</span>); <span class="comment">//阻塞等待消费者消费</span></span><br><span class="line">		<span class="comment">//strs.add("aaa");</span></span><br><span class="line">		System.out.println(strs.size());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[问题沉淀「二」]]></title>
      <url>/questions-share-2.html</url>
      <content type="html"><![CDATA[<p>关键字: <code>幂等</code>、<code>CountDownLatch</code>、<code>异常处理</code>、<code>B+ 树</code><br><a id="more"></a></p>
<p><strong>问题：</strong> 如何保证幂等机制<br><strong>解决方案：</strong><br>　　幂等机制的核心是保证资源唯一性，例如客户端重复提交或服务端的多次重试只会产生一份结果。支付场景、退款场景，涉及金钱的交易不能出现多次扣款等问题。事实上，查询接口用于获取资源，因为它只是查询数据而不会影响到资源的变化，因此不管调用多少次接口，资源都不会改变，所以是它是幂等的。而新增接口是非幂等的，因为调用接口多次，它都将会产生资源的变化。因此，我们需要在出现重复提交时进行幂等处理。</p>
<p>那么，如何保证幂等机制呢？事实上，我们有很多实现方案。其中，一种方案就是常见的创建唯一索引。在数据库中针对我们需要约束的资源字段创建唯一索引，可以防止插入重复的数据。但是，遇到分库分表的情况是，唯一索引也就不那么好使了，此时，我们可以先查询一次数据库，然后判断是否约束的资源字段存在重复，没有的重复时再进行插入操作。注意的是，为了避免并发场景，我们可以通过锁机制，例如悲观锁与乐观锁保证数据的唯一性。这里，分布式锁是一种经常使用的方案，它通常情况下是一种悲观锁的实现。但是，很多人经常把悲观锁、乐观锁、分布式锁当作幂等机制的解决方案，这个是不正确的。除此之外，我们还可以引入状态机，通过状态机进行状态的约束以及状态跳转，确保同一个业务的流程化执行，从而实现数据幂等。</p>
<p>事实上，并不是所有的接口都要保证幂等，换句话说，是否需要幂等机制可以通过考量需不需要确保资源唯一性，例如行为日志可以不考虑幂等性。当然，还有一种设计方案是接口不考虑幂等机制，而是在业务实现的时候通过业务层面来保证，例如允许存在多份数据，但是在业务处理的时候获取最新的版本进行处理。</p>
<hr>
<p><strong>问题：</strong> <code>redis key</code> 过期后如何防止流量瞬间打在DB上?<br><strong>探讨：</strong><br>因为key过期后，不确定有多大的流量打在db上，所以，要提前reload<br>这种情况，没有特别好的方式。有文章说用分布式锁。其实是错误的，这样所有流量压力也会打到锁上，这种只是把压力转换了。<br>最好的方式只能对DB做限流，热点数据做本地缓存，这样能防止一个特别热的key，很大的流量都到DB。<br>什么是热点数据？而且基本上所有item都是长尾效应，用户能接触的只有10%的商品；剩下的90%商品都用不到缓存，<br>热与否，是会随时间的变化而变化的~，当然99%的公司，不需要考虑这个问题，所以很多时候在大流量面前<br>很多方案变的那么无力！！！</p>
<hr>
<p><strong>问题：</strong> <code>CountDownLatch</code> 实际运用在项目中什么样的场景？<br><strong>解答：</strong></p>
<ol>
<li>做某个事情可能会有前置条件，比如 A depends on B，C，那 A 要等到 B,C 任务完成了才能开始。比如聚餐，可能需要等所有人到齐才能开始，比赛颁奖需要等所有运动员赛完了，才能开始颁奖。等等…</li>
<li>futureTask 只是等待线程池里的线程执行完毕，但是线程间没有依赖关系，完全互相独立的。所以 fututreTask 和 countDownLatch 适用的场景不一样。</li>
</ol>
<hr>
<p><strong>问题：</strong> 项目中的异常一般是不是不在 controller 层 catch 处理，而是丢给专门的 ControllerAdvice 处理？<br><strong>解答：</strong><br>ControllerAdvice 处理确实是一种好方案。我们自定义一个运行时异常，然后统一处理，并且封装给一个统一格式的异常 JSON 格式。</p>
<hr>
<p><strong>问题：</strong> 为什么 B+ 树适合做索引？<br><strong>解答：</strong><br>索引本身很大，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘 I/O 消耗，相对于内存存取，I/O 存取的消耗要高几个数量级，所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘 I/O 操作次数的渐进复杂度。换句话说，索引的结构组织要尽量减少查找过程中磁盘 I/O 的存取次数。而 B+ 树带有顺序访问的指针，并且利用了磁盘预读以及计算机局部性原理，相比 B 树和红黑树，B+ 树的磁盘IO数最少。具体原理看：<a href="https://www.cnblogs.com/tgycoder/p/5410057.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></p>
<blockquote>
<p>Reference:</p>
<ul>
<li>梁桂钊的知识星球 –「服务端思维」</li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 沉淀 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[问题沉淀「一」]]></title>
      <url>/questions-share-1.html</url>
      <content type="html"><![CDATA[<p>关键字: <code>mysql字符编码</code>、<code>索引</code>、<code>介绍项目</code>、<code>跨库跨表关联</code><br><a id="more"></a></p>
<p><strong>问题：</strong> 在 join 操作时，为什么 MySQL 编码不同，性能差距很大。<br><strong>解决方案：</strong><br>　　问题字符集转换遵循由小到大的原则，因为utf8mb4是utf8的超集，所以这里把utf8转换成utf8mb4，即把t1.code转换成utf8mb4字符集，转换了之后，由于t1.code上面的索引仍然是utf8字符集，所以这个索引就被执行计划忽略了，然后t1表只能选择全表扫描。更糟糕的是，如果t2筛选出来的记录不止1条，那么t1就会被全表扫描多次，性能之差可想而知。<a href="https://mp.weixin.qq.com/s/ns9eRxjXZfUPNSpfgGA7UA?from=groupmessage&amp;isappinstalled=0" target="_blank" rel="noopener">链接:MySQL表字段字符集不同导致的索引失效问题</a></p>
<hr>
<p><strong>问题：</strong> MySQL的最左前缀在第一字段不存在的情况下，为什么使用到了索引？<br><strong>解决方案：</strong><br>　　可以认真阅读这篇文章。<a href="https://www.zhihu.com/question/36996520?from=groupmessage&amp;isappinstalled=0" target="_blank" rel="noopener">链接：mysql索引最左匹配原则的理解? - 知乎</a></p>
<hr>
<p><strong>问题：</strong> 面试中面试官让谈一谈 MySQL 中的索引，怎么回答比较好？<br><strong>解决方案：</strong><br>　　MySQL是很常用的数据库，其中改善性能最好的方式，就是通过数据库中合理地使用索引。因此，首先可以谈谈在项目中如何设计索引。其次，索引使用的注意事项有哪些，例如复合索引的最左前缀原则，范围查询对多列查询的影响等。最后，如果面试官对原理比较感兴趣，可能再聊聊数据库索引的原理，为什么要用 B-tree，聚集索引与非聚集索引的区别这些问题。此外，加分项，还可以说说自己在项目中，遇到了哪些索引的难点，例如之前提到的编码转换的索引失效问题，以及通过曲线救国的方式满足业务场景。</p>
<hr>
<p><strong>问题：</strong> 如何介绍项目<br><strong>解决方案：</strong><br>　　面试官问这个问题，主要是考察你的概述能力和全局视野。当然，今天我们聊的并不是面试题，而是我们怎么去理解和复盘我们每天做的事情。有的人经常抱怨自己每天在堆业务，但没有成长。事实上，很多情况下确实在堆业务，但并不是没有成长的。并非做中间件或者技术架构才是成长，例如我们的需求分析能力，沟通协作能力，产品思维能力，抽象建模能力等都是一个非常重要的硬实力。首先，请你静下来思考，你真的了解自己每天在做的事情吗，你真的了解自己所做的业务吗？</p>
<p>  好的，现在进入正文，我们如何理解和复盘项目。这里，列了一个清单，请大家好好思考下这些内容。</p>
<ol>
<li>明确项目的周期。</li>
<li>明确项目的价值。（为什么做这个项目，它解决了用户什么痛点，它带来什么价值？）</li>
<li>明确项目的功能。（这个项目涉及哪些功能？）</li>
<li>明确项目的技术。（这个项目用到哪些技术？）</li>
<li>明确个人在项目中的位置和作用。（你在这个项目的承担角色？）</li>
<li>明确项目的整体架构。</li>
<li>明确项目的优缺点,如果重新设计你会如何设计。</li>
<li>明确项目的亮点。（这个项目有什么亮点？）</li>
<li>明确技术成长。（你通过这个项目有哪些技术成长？）</li>
</ol>
<hr>
<p><strong>问题：</strong> 分库与分表，联合查询就遇到跨库关联和跨表关系问题，那应该怎么办？<br><strong>解决方案：</strong> </p>
<ol>
<li>其实，数据量小的情况下，怎么使用都没有问题的。</li>
<li>如果在数据量大的情况下，不一定分库分表，单库也不行的。看阿里编码规范，禁止存储过程，尽量不要使用join，有也不要超过3个。</li>
<li>联合查询不一定性能就差，如果很多join，都能用到主键或者唯一键性能也不差的。</li>
<li>业务解偶，单张表也能更好缓存。</li>
<li>在单库单表的情况下，联合查询是非常容易的。但是，随着分库与分表的演变，联合查询就遇到跨库关联和跨表关系问题。在设计之初就应该尽量避免联合查询，可以通过程序中进行拼装，或者通过反范式化设计进行规避。</li>
</ol>
<blockquote>
<p>Reference:</p>
<ul>
<li>梁桂钊的知识星球 –「服务端思维」</li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 沉淀 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 高并发编程「二」]]></title>
      <url>/java-concurrent-programming-2.html</url>
      <content type="html"><![CDATA[<h2 id="reentrantlock"><a href="#reentrantlock" class="headerlink" title="reentrantlock"></a>reentrantlock</h2><p><code>reentrantlock</code>可以用于替代<code>synchronized</code>，使用reentrantlock可以完成同样的功能,需要注意的是，必须要手动释放锁,使用<code>synchronized</code>锁定的话如果遇到异常，jvm会自动释放锁，但是<code>lock</code>必须手动释放锁，因此经常在<code>finally</code>中进行锁的释放<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock2</span> </span>&#123;</span><br><span class="line">	Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			lock.lock(); <span class="comment">//synchronized(this)</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">				System.out.println(i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			lock.unlock();  <span class="comment">// 手动释放锁</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		lock.lock();</span><br><span class="line">		System.out.println(<span class="string">"m2 ..."</span>);</span><br><span class="line">		lock.unlock();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ReentrantLock2 rl = <span class="keyword">new</span> ReentrantLock2();</span><br><span class="line">		<span class="keyword">new</span> Thread(rl::m1).start();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">new</span> Thread(rl::m2).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>reentrantlock</code>可以进行<strong>尝试锁定</strong><code>tryLock</code>，这样无法锁定，或者在指定时间内无法锁定，线程可以决定是否继续等待<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock3</span> </span>&#123;</span><br><span class="line">	Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			lock.lock();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">				System.out.println(i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			lock.unlock();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 使用tryLock进行尝试锁定，不管锁定与否，方法都将继续执行</span></span><br><span class="line"><span class="comment">	 * 可以根据tryLock的返回值来判定是否锁定</span></span><br><span class="line"><span class="comment">	 * 也可以指定tryLock的时间，由于tryLock(time)抛出异常，所以要注意unclock的处理，必须放到finally中</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		boolean locked = lock.tryLock();</span></span><br><span class="line"><span class="comment">		System.out.println("m2 ..." + locked);</span></span><br><span class="line"><span class="comment">		if(locked) lock.unlock();</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="keyword">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			locked = lock.tryLock(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">			System.out.println(<span class="string">"m2 ..."</span> + locked);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(locked) lock.unlock();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ReentrantLock3 rl = <span class="keyword">new</span> ReentrantLock3();</span><br><span class="line">		<span class="keyword">new</span> Thread(rl::m1).start();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">new</span> Thread(rl::m2).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>ReentrantLock</code>还可以调用<code>lockInterruptibly</code>方法，可以对线程<code>interrupt</code>方法做出响应<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock4</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">		</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				lock.lock();</span><br><span class="line">				System.out.println(<span class="string">"t1 start"</span>);</span><br><span class="line">				TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);</span><br><span class="line">				System.out.println(<span class="string">"t1 end"</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				System.out.println(<span class="string">"interrupted!"</span>);</span><br><span class="line">			&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">				lock.unlock();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		t1.start();</span><br><span class="line">		</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">//lock.lock();</span></span><br><span class="line">				lock.lockInterruptibly(); <span class="comment">//可以对interrupt()方法做出响应</span></span><br><span class="line">				System.out.println(<span class="string">"t2 start"</span>);</span><br><span class="line">				TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">				System.out.println(<span class="string">"t2 end"</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				System.out.println(<span class="string">"interrupted!"</span>);</span><br><span class="line">			&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">				lock.unlock();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		t2.start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		t2.interrupt(); <span class="comment">//打断线程2的等待</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>ReentrantLock</code>还可以指定为<strong>公平锁</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock5</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock=<span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>); <span class="comment">//参数为true表示为公平锁，请对比输出结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"获得锁"</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReentrantLock5 rl=<span class="keyword">new</span> ReentrantLock5();</span><br><span class="line">        Thread th1=<span class="keyword">new</span> Thread(rl);</span><br><span class="line">        Thread th2=<span class="keyword">new</span> Thread(rl);</span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p><code>ThreadLocal</code> 线程局部变量,<code>ThreadLocal</code>是使用空间换时间，<code>synchronized</code>是使用时间换空间,比如在<code>hibernate</code>中<code>session</code>就存在与<code>ThreadLocal</code>中，避免<code>synchronized</code>的使用.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal2</span> </span>&#123;</span><br><span class="line">	<span class="comment">//volatile static Person p = new Person();</span></span><br><span class="line">	<span class="keyword">static</span> ThreadLocal&lt;Person&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">				</span><br><span class="line">		<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			System.out.println(tl.get());</span><br><span class="line">		&#125;).start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			tl.set(<span class="keyword">new</span> Person());</span><br><span class="line">		&#125;).start(); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">		String name = <span class="string">"zhangsan"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一道有意思的多线程编程题]]></title>
      <url>/java-multi-thread-problem.html</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>实现一个容器，提供两个方法，add，size<br>写两个线程，线程1添加10个元素到容器中，线程2实现监控元素的个数，当个数到5个时，线程2给出提示并结束<br><a id="more"></a></p>
<p><strong>代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyContainer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//添加volatile，使t2能够得到通知</span></span><br><span class="line">	<span class="keyword">volatile</span> List lists = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">		lists.add(o);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> lists.size();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MyContainer2 c = <span class="keyword">new</span> MyContainer2();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">				c.add(<span class="keyword">new</span> Object());</span><br><span class="line">				System.out.println(<span class="string">"add "</span> + i);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="string">"t1"</span>).start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span>(c.size() == <span class="number">5</span>) &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">"t2 结束"</span>);</span><br><span class="line">		&#125;, <span class="string">"t2"</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样给 lists 添加 <code>volatile</code> 之后，t2能够接到通知，但是t2线程的死循环很浪费cpu，再看看下面这个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyContainer4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//添加volatile，使t2能够得到通知</span></span><br><span class="line">	<span class="keyword">volatile</span> List lists = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">		lists.add(o);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> lists.size();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MyContainer4 c = <span class="keyword">new</span> MyContainer4();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">				System.out.println(<span class="string">"t2启动"</span>);</span><br><span class="line">				<span class="keyword">if</span>(c.size() != <span class="number">5</span>) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						lock.wait();</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">"t2 结束"</span>);</span><br><span class="line">				<span class="comment">//通知t1继续执行</span></span><br><span class="line">				lock.notify();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;, <span class="string">"t2"</span>).start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			System.out.println(<span class="string">"t1启动"</span>);</span><br><span class="line">			<span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">					c.add(<span class="keyword">new</span> Object());</span><br><span class="line">					System.out.println(<span class="string">"add "</span> + i);</span><br><span class="line">					</span><br><span class="line">					<span class="keyword">if</span>(c.size() == <span class="number">5</span>) &#123;</span><br><span class="line">						lock.notify();</span><br><span class="line">						<span class="comment">//释放锁，让t2得以执行</span></span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							lock.wait();</span><br><span class="line">						&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">							e.printStackTrace();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="string">"t1"</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里使用<code>wait</code>和<code>notify</code>做到，wait会释放锁，而notify不会释放锁,notify之后，t1必须释放锁，t2退出后，也必须notify，通知t1继续执行,整个通信过程比较繁琐<br>下面这种方法使用<code>Latch</code>（门闩）替代wait notify来进行通知<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyContainer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加volatile，使t2能够得到通知</span></span><br><span class="line">	<span class="keyword">volatile</span> List lists = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">		lists.add(o);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> lists.size();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MyContainer c = <span class="keyword">new</span> MyContainer();</span><br><span class="line"></span><br><span class="line">		CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			System.out.println(<span class="string">"t2启动"</span>);</span><br><span class="line">			<span class="keyword">if</span> (c.size() != <span class="number">5</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					latch.await();</span><br><span class="line">					</span><br><span class="line">					<span class="comment">//也可以指定等待时间</span></span><br><span class="line">					<span class="comment">//latch.await(5000, TimeUnit.MILLISECONDS);</span></span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">"t2 结束"</span>);</span><br><span class="line"></span><br><span class="line">		&#125;, <span class="string">"t2"</span>).start();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			System.out.println(<span class="string">"t1启动"</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				c.add(<span class="keyword">new</span> Object());</span><br><span class="line">				System.out.println(<span class="string">"add "</span> + i);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (c.size() == <span class="number">5</span>) &#123;</span><br><span class="line">					<span class="comment">// 打开门闩，让t2得以执行</span></span><br><span class="line">					latch.countDown();</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;, <span class="string">"t1"</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好处是通信方式简单，同时也可以指定等待时间,使用<code>await</code>和<code>countdown</code>方法替代<code>wait</code>和<code>notify</code>,<code>CountDownLatch</code>不涉及锁定，当count的值为零时当前线程继续运行,当不涉及同步，只是涉及线程通信的时候，用<code>synchronized + wait/notify</code>就显得太重了,这时应该考虑countdownlatch/cyclicbarrier/semaphore.</p>
]]></content>
      
        
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cmd 与 bash 基础命令入门]]></title>
      <url>/cmd-and-bash.html</url>
      <content type="html"><![CDATA[<p>不论是 bash 还是 cmd ，我们也通常称它们为“命令行工具”或者是“命令行界面(CLI)”。<br>最后，为什么我们要学习它们？因为学习它们，<code>cmd</code> 可以让我们可以在 windows 或者 <code>bash</code> linux 等简单使用场景中，脱离对鼠标与用户界面的依赖，从而提高编码效率。<br><a id="more"></a></p>
<h2 id="CMD-基础命令"><a href="#CMD-基础命令" class="headerlink" title="CMD 基础命令"></a>CMD 基础命令</h2><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><h4 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h4><p>cd ：进入指定的目录或者是显示当前的目录。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd                 #显示当前的路径</span><br><span class="line">cd dir/sub-dir     #进入到dir中的sub-dir目录。</span><br><span class="line">d:                 #直接进入d盘</span><br></pre></td></tr></table></figure></p>
<h4 id="列出文件与子目录"><a href="#列出文件与子目录" class="headerlink" title="列出文件与子目录"></a>列出文件与子目录</h4><p>dir ：列出当前目录中的文件以及子目录<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir</span><br></pre></td></tr></table></figure></p>
<p><code>dir</code> 除了能默认显示当前目录的文件以及子目录，还可以显示指定目录下的文件以及子目录，同时也会统计目录下的文件以及目录的数量。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir d:\fornt    #显示D盘font目录中的资源</span><br></pre></td></tr></table></figure></p>
<p><code>dir</code> 默认不显示一些特殊属性的文件(例如被隐藏了的文件)，如果想显示所有文件,可以使用 <code>/a</code> 参数。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir /a</span><br></pre></td></tr></table></figure></p>
<p>如果只是想显示具有特定属性的文件，可以为 <code>/a</code> 参数附加对应的属性。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dir /a [d|r|h|s] #显示具有指定属性的文件</span><br><span class="line">dir /ad          #只显示目录</span><br><span class="line">dir /ar          #只显示只读文件</span><br><span class="line">dir /ah          #只显示隐藏文件</span><br><span class="line">dir /as          #只显示系统文件</span><br></pre></td></tr></table></figure></p>
<p><code>dir</code> 还有一个 <code>/o</code> 的参数也会比较常用，使用它可以分类显示文件以及目录。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dir /o [n | s | e | d]</span><br><span class="line">dir /on   #按名称(字母)显示</span><br><span class="line">dir /os   #按大小(从小到大)</span><br><span class="line">dir /oe   #按扩展名(字母顺序)</span><br><span class="line">dir /od   #按日期/时间(从先到后)</span><br></pre></td></tr></table></figure></p>
<h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><p>mkdir | md ：新建目录<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir dir               # 新建一个dir目录</span><br><span class="line">mkdir dir1\dir2\dir3    # 连续新建三个目录。</span><br></pre></td></tr></table></figure></p>
<h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><p>rmdir | rd ：删除指定目录<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">md dirname</span><br><span class="line">rd dirname</span><br><span class="line">md dir1\dir2\dir3</span><br><span class="line">rd dir1\dir2\</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：如果目录中含有其它目录或者是文件，单纯使用 <code>rd</code> 将无法删除，必须要结合一些特殊的参数，例如 <code>/s</code> 强制删除 <code>/q</code> 安静模式（不会询问）。</p>
<h4 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h4><p>xcopy ：将目录复制到指定的位置。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcopy dir e:dir1 #将dir目录复制到 E盘，并重命名为dir1。</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：使用这种方式复制目录，只能将目录以及目录中的文件复制到新的位置，但是并不能将目录中的子目录以及子目录中的所有文件也复制过去。<br>但可以通过附加一个参数 <code>/e</code> 从而实现将整个目录（所有的子目录以及文件）都复制到新的位置中。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcopy dir e:dir1 /e</span><br></pre></td></tr></table></figure></p>
<h4 id="移动目录"><a href="#移动目录" class="headerlink" title="移动目录"></a>移动目录</h4><p>move ：将指定的目录移动到新的目录中<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move C:\Users\gt\Desktop\test distDir #将指定的目录移动到新的目录中</span><br><span class="line">move dir1 dir2                        #将dir1目录移动到dir2目录中</span><br></pre></td></tr></table></figure></p>
<h4 id="重命名目录"><a href="#重命名目录" class="headerlink" title="重命名目录"></a>重命名目录</h4><p>rename | ren ：重命名文件或目录名。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ren dirName newDirName</span><br></pre></td></tr></table></figure></p>
<h4 id="显示树形目录"><a href="#显示树形目录" class="headerlink" title="显示树形目录"></a>显示树形目录</h4><p>tree ： 显示目录的树形图。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tree                          #当前目录的树形图</span><br><span class="line">tree C:\Users\gt\Desktop\     #指定目录的树形图</span><br></pre></td></tr></table></figure></p>
<p>PS：感觉此命令在我们写项目文档时很有用，使用它可以帮我们生成项目目录的树形结构。</p>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h4><p>notepad : 打开window的记事本程序新建文件。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">notepad filename.ext</span><br><span class="line">notepad 1.txt</span><br><span class="line">notepad index.js</span><br></pre></td></tr></table></figure></p>
<p>notepad 是调用window中的记事本程序来新建文件。</p>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>del ：删除指定的文件或者是清空指定目录中的文件。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">del filename #删除指定的文件</span><br><span class="line">del file1 file2 .. #删除多个文件</span><br><span class="line">del dir #清空指定目录下的所有文件</span><br><span class="line">del dir1 dir2 dir3 .. #清空多个目录下的文件。</span><br></pre></td></tr></table></figure></p>
<p>当使用 del 清空指定目录下的所有文件时，默认会有一个询问，如果想忽略询问，只需要加一个参数/q即可。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del dir /q</span><br></pre></td></tr></table></figure></p>
<p>出此之外，使用 del 还可以删除特定属性的文件<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">del /AR #可以删除只读文件</span><br><span class="line">del /AH #可以删除隐藏文件</span><br><span class="line">del /AS #可以删除系统文件</span><br></pre></td></tr></table></figure></p>
<p>最后，del 还可以结合通配符来删除匹配到文件。</p>
<h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><p>copy ：复制一个或者是多个文件<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">copy file.txt file<span class="emphasis">_copy.txt    #在当前目录由file.txt 复制为一个名为file_</span>copy.txt的新文件。</span><br><span class="line">copy C:\Users\Admin\Desktop\index.js index<span class="emphasis">_copy.js #将桌面上的index.js文件复制到当前目录，并命名为index_</span>copy.js</span><br><span class="line">copy file1 dir\file2 #相对目录进行复制。</span><br><span class="line">copy file1+file2 dir\file3 #将当前目录的file1与file2文件复制到dir目录中并合成一个新的file3文件。</span><br><span class="line">copy C:\Users\Admin\Desktop\ #将桌面上的所有文件复制到当前目录。</span><br></pre></td></tr></table></figure></p>
<p><code>copy</code> 命令还具有两个不是太常用的参数：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy file /A #复制一个ASCII文件。</span><br><span class="line">copy file /B #复制一个二进制文件。</span><br></pre></td></tr></table></figure></p>
<p><code>copy</code> 命令只能复制指定目录中的文件，而不能复制指定目录中的子目录和文件。<br>如果想复制目标目录下的所有文件和文件夹，可以使用 <code>xcopy</code> 命令，它相当于 <code>copy</code> 命令的扩展版。</p>
<h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p>move ：将指定的文件移动到新的位置。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move file.txt dir/file.txt    #将指定的文件移动到指定的目录中。</span><br><span class="line">move file.txt dir/newfile.txt #移动的同时，重新命名。</span><br></pre></td></tr></table></figure></p>
<h4 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h4><p>ren ：重命名文件<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ren oldfilename newfilename</span><br></pre></td></tr></table></figure></p>
<h4 id="文件内容比较"><a href="#文件内容比较" class="headerlink" title="文件内容比较"></a>文件内容比较</h4><p>fc ：在指定的文件集中比较文件的内容<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc file1 file2 file3</span><br></pre></td></tr></table></figure></p>
<h4 id="打印文件"><a href="#打印文件" class="headerlink" title="打印文件"></a>打印文件</h4><p>type ：在命令行工具中打印文件内容。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type file      #打印文件file的内容。</span><br><span class="line">type dir\file  #打印指定目录中file文件的内容。</span><br></pre></td></tr></table></figure></p>
<p><code>type</code> 命令还可以结合通配符一起使用，打印多个文件的内容。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type dir\*     #打印指定目录dir中所有文件的内容。</span><br></pre></td></tr></table></figure></p>
<h4 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h4><p>我们知道 <code>dir</code> 是用于列出指定目录中所有的文件或子目录，实际上 <code>dir</code> 后面还可以跟上文件名目录名或者是通配符来设置只列出匹配到的文件以及目录。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dir index.js    #列出该目录下的index.js</span><br><span class="line">dir *.js        #列出该目录下扩展名为js的所有文件。</span><br><span class="line">dir *           #列出所有文件</span><br></pre></td></tr></table></figure></p>
<p>与查找文件相同，<code>dir</code> 也可以查找指定的目录<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir dirname</span><br></pre></td></tr></table></figure></p>
<h4 id="根据内容查找文件"><a href="#根据内容查找文件" class="headerlink" title="根据内容查找文件"></a>根据内容查找文件</h4><p>find ：根据文件内容查找文件，不确定文件名称或者是扩展名时可结合通配符使用。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find "function handle" index.js #确定文件查找</span><br><span class="line">find "function handle" *.js     #根据文件名模糊查找</span><br><span class="line">find "function handle" ?.js     #查找文件名只有一个字符的js文件。</span><br><span class="line">find "function handle" /*       #查找所有文件</span><br></pre></td></tr></table></figure></p>
<p><code>find</code> 命令还具有一些其它有用的参数：<code>/i</code> 忽略大小写 , <code>/v</code> 只显示匹配到的文件，<code>/n</code> 显示行号。</p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>注意，如果想在window中设置永久的环境变量，只能通过 “我的电脑” - “属性” - “高级” - “环境变量”。<br>使用命令行来设置环境变量只对当前窗口有效，窗口关闭时，将会自动失效。</p>
<h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><p>set : 通过set命令我们即可以查看指定的环境变量，也可以设置一个新的环境变量。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set               #查看当前的所有环境变量</span><br><span class="line">set PATH          #查看环境变量PATH的值。</span><br><span class="line">set key = value   #设置一个新的环境变量并赋值。</span><br><span class="line">set key = value2  #重新对指定的环境变量赋值。</span><br></pre></td></tr></table></figure></p>
<p>path这个环境变量是用于设置可执行文件（程序）的搜索路径，是非常常用的一个环境变量。</p>
<h4 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h4><p>在CMD中，如果想引用某个环境变量，则使用 <code>%env%</code> 的格式。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo %PATH%</span><br><span class="line"></span><br><span class="line">set name=usrname</span><br><span class="line">echo %name%</span><br></pre></td></tr></table></figure></p>
<h3 id="辅助命令"><a href="#辅助命令" class="headerlink" title="辅助命令"></a>辅助命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cls        #清除屏幕。</span><br><span class="line">cmd        #进入MS-DOS</span><br><span class="line">echo       #显示消息，或将命令回显打开或关闭。</span><br><span class="line">exit       #退出 CMD.EXE 程序(命令解释程序)。</span><br><span class="line">start      #启动单独的窗口以运行指定的程序或命令。</span><br><span class="line">calc       #启动计算器</span><br><span class="line">explorer   #打开资源管理器</span><br><span class="line">notepad    #打开记事本</span><br><span class="line">dxdiag     #检查DirectX信息</span><br><span class="line">regedt32   #注册表编辑器</span><br><span class="line">Msconfig   #系统配置实用程序</span><br><span class="line">taskmgr    #打开任务管理器</span><br><span class="line">help       #查看MS-DOS命令帮助。</span><br><span class="line">command /? #查看指定命令详细帮助文档。</span><br><span class="line">wmic       #进入wmic（Windows Management Instrumentation），它是windows管理工具命令行版，使用wmic我们可以对整个系统进行管理，例如远程连接、硬件管理、进程管理、账号管理、服务管理、目录管理、共享管理等等，可说它是一个增强版的CMD。</span><br></pre></td></tr></table></figure>
<h2 id="BASH-基本命令"><a href="#BASH-基本命令" class="headerlink" title="BASH 基本命令"></a>BASH 基本命令</h2><h3 id="目录操作-1"><a href="#目录操作-1" class="headerlink" title="目录操作"></a>目录操作</h3><h4 id="切换目录-1"><a href="#切换目录-1" class="headerlink" title="切换目录"></a>切换目录</h4><p>cd ：进入指定的目录。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd   #进入个人目录</span><br><span class="line">cd / #进入根目录</span><br><span class="line">cd - #返回上次的目录</span><br></pre></td></tr></table></figure></p>
<p>如果不确定自己当前的目录位置，可以结合 <code>pwd</code> 命令，便会在命令行中打印出当前目录路径。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure></p>
<h4 id="列出文件与子目录-1"><a href="#列出文件与子目录-1" class="headerlink" title="列出文件与子目录"></a>列出文件与子目录</h4><p>ls ：列出当前目录中的文件以及子目录<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line"><span class="code">``` </span></span><br><span class="line"><span class="code">`ls` 除了能默认显示当前目录的资源以及子目录，还可以显示指定目录下的文件以及子目录</span></span><br><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">ls ../   #列出上级目录下的资源和子目录</span></span><br><span class="line"><span class="code">ls /     #列出根目录下的资源和子目录。</span></span><br><span class="line"><span class="code">ls /home #列出home目录下的资源和子目录。</span></span><br></pre></td></tr></table></figure></p>
<p><code>ls</code> 默认不显示具有特殊属性的文件(例如被隐藏了的文件)，如果想显示所有文件,可以使用 <code>-a</code> 参数<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure></p>
<p>如果要查看资源或目录更详细的信息，可以附加 <code>-l</code> 属性<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure></p>
<h4 id="创建目录-1"><a href="#创建目录-1" class="headerlink" title="创建目录"></a>创建目录</h4><p>mkdir ：创建目录。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir dir                 #创建一个目录dir</span><br><span class="line">mkdir dir1 dir2 dir3..    #同时创建多个同级目录</span><br></pre></td></tr></table></figure></p>
<p>如果想创建一个目录树，可以附加一个 -p 参数。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p a/b/c/d</span><br></pre></td></tr></table></figure></p>
<h4 id="删除目录-1"><a href="#删除目录-1" class="headerlink" title="删除目录"></a>删除目录</h4><p>rmdir ：删除空目录<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ：强制删除目录(包括非空目录)。</span><br><span class="line">rmdir emptyDir #删除一个空目录</span><br></pre></td></tr></table></figure></p>
<p>如果想删除一个非空目录，则需要使用 rm 命令，并使用 -rf 参数。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf dir                  #删除一个非空目录。</span><br><span class="line">rm -rf dir1 dir2 dir3       #同时删除多个非空目录。</span><br><span class="line">rm -rf pattern              #删除按照特定模式匹配到的目录。</span><br></pre></td></tr></table></figure></p>
<h4 id="复制目录-1"><a href="#复制目录-1" class="headerlink" title="复制目录"></a>复制目录</h4><p>cp -a ：复制目录到指定的位置。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -a dir ../dir  #将当期目录复制一份到上级目录中。</span><br><span class="line">cp -a dir dir2    #复制目录并重命名。</span><br></pre></td></tr></table></figure></p>
<h4 id="移动目录-1"><a href="#移动目录-1" class="headerlink" title="移动目录"></a>移动目录</h4><p>mv ：移动目录到指定位置。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv file file2                         #同级移动，相当于重命名目录file为file2</span><br><span class="line">mv file ../file2                      #将目录移动到上级目录中并重命名。</span><br><span class="line">sudo mv /home/user/file /home/        #将指定位置的目录移动到指定位置中。</span><br></pre></td></tr></table></figure></p>
<p>另外，<code>mv</code> 也可以结合通配符进行使用。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv * ../   #将所有的目录与文件都复制到上级目录中。</span><br></pre></td></tr></table></figure></p>
<h4 id="重命名目录-1"><a href="#重命名目录-1" class="headerlink" title="重命名目录"></a>重命名目录</h4><p>利用 <code>mv</code> 命令同级移动功能，并结合重命名的特点，就可以做到目录的重命名。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv file newfile2              #同级移动，相当于重命名目录file为newfile2</span><br></pre></td></tr></table></figure></p>
<h4 id="显示树形目录-1"><a href="#显示树形目录-1" class="headerlink" title="显示树形目录"></a>显示树形目录</h4><p>tree ：显示目录的树形图。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tree       #当前目录的树形图</span><br><span class="line">tree /     #根目录下的树形图</span><br></pre></td></tr></table></figure></p>
<p>PS：感觉此命令在我们写项目文档时很有用，使用它可以帮我们生成项目目录的树形图。</p>
<h4 id="常用目录说明"><a href="#常用目录说明" class="headerlink" title="常用目录说明"></a>常用目录说明</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/     #根目录</span><br><span class="line">/bin  #命令保存目录</span><br><span class="line">/boot #启动目录</span><br><span class="line">/dev  #设备文件命令</span><br><span class="line">/etc  #配置文件保存目录</span><br><span class="line">/home #家目录</span><br><span class="line">/lib  #系统库保存命令</span><br><span class="line">/mnt  #系统挂载目录</span><br></pre></td></tr></table></figure>
<h3 id="文件操作-1"><a href="#文件操作-1" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="新建文件-1"><a href="#新建文件-1" class="headerlink" title="新建文件"></a>新建文件</h4><p>touch ：新建文件<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch filename             #新建一个文件。</span><br><span class="line">touch file1 file2 file3... #同时新建多个文件。</span><br><span class="line">touch dir/file             #在指定的位置中新建一个文件。</span><br></pre></td></tr></table></figure></p>
<p>如果终端已经附加了 <code>vi</code> 编辑器，也可以使用 <code>vi filename</code> 的形式来创建文件，与 <code>cmd</code> 中的 <code>notepad</code> 命令功能类似。</p>
<h4 id="删除文件-1"><a href="#删除文件-1" class="headerlink" title="删除文件"></a>删除文件</h4><p>rm ：删除文件。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm file      #删除文件</span><br><span class="line">rm dir/file  #删除指定目录中的文件</span><br><span class="line">rm dir/*     #删除指定目录中的所有文件。</span><br></pre></td></tr></table></figure></p>
<h4 id="复制文件-1"><a href="#复制文件-1" class="headerlink" title="复制文件"></a>复制文件</h4><p>cp ：复制文件到指定的位置<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp file file1    #将文件复制一份并重新命名。</span><br><span class="line">cp file ../      #将文件复制一份到上级目录中。</span><br><span class="line">sudo cp file /   #将文件复制到根目录中。</span><br></pre></td></tr></table></figure></p>
<p><code>cp</code> 还可以结合通配符一起使用，将匹配到的文件复制到指定的位置中。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp dir/*  ./  #指定目录中的所有文件复制到当前目录中。</span><br></pre></td></tr></table></figure></p>
<h4 id="移动文件-1"><a href="#移动文件-1" class="headerlink" title="移动文件"></a>移动文件</h4><p>mv ：移动文件到指定的位置<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv file ../       #将文件移动到上级目录中。</span><br><span class="line">mv ../file ./     #将上级的文件移动到当前目录中。</span><br><span class="line">sudo mv file /    #将文件移动到根目录中。</span><br></pre></td></tr></table></figure></p>
<p>mv 不仅可以移动文件，还可以在移动后重命名文件。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv filename1 ../filename2</span><br></pre></td></tr></table></figure></p>
<p>mv还可以结合通配符使用。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv na?.txt ../nbc.txt</span><br></pre></td></tr></table></figure></p>
<h4 id="重命名文件-1"><a href="#重命名文件-1" class="headerlink" title="重命名文件"></a>重命名文件</h4><p>利用 mv 命令同级移动的功能再结合其可以重命名的特点，从而实现文件的重命名。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv file file2           #同级移动，相当于重命名文件file为file2</span><br></pre></td></tr></table></figure></p>
<h4 id="文件内容比较-1"><a href="#文件内容比较-1" class="headerlink" title="文件内容比较"></a>文件内容比较</h4><p>diff ：比较多个文件内容的不同<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff file1 file2 ...</span><br></pre></td></tr></table></figure></p>
<h4 id="打印文件-1"><a href="#打印文件-1" class="headerlink" title="打印文件"></a>打印文件</h4><p>cat ：在命令行工具中打印文件的内容<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat filename    #打印指定文件的内容</span><br><span class="line">cat file1 file2 #同时打印多个文件的内容</span><br></pre></td></tr></table></figure></p>
<p><code>cat</code> 命令除了能打印文件的内容，还可以合并多个文件的内容保存到一个新的文件中。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file1 file2 &gt; newfile</span><br></pre></td></tr></table></figure></p>
<p>除此之外，还可以结合通配符来打印匹配到的所有文件内容。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat a*</span><br><span class="line">cat *.txt</span><br></pre></td></tr></table></figure></p>
<p>如果查看的文件内容很多，还可以使用 <code>less</code> 命令<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less file</span><br></pre></td></tr></table></figure></p>
<p>然后使用 <code>space</code> 便可以向下一页一页的翻动，或者 <code>pgup</code> 向上翻页 , <code>pgdn</code> 向下翻页，<code>q</code> 则可以退出 <code>less</code> 命令。</p>
<h4 id="查找文件-1"><a href="#查找文件-1" class="headerlink" title="查找文件"></a>查找文件</h4><p>find ：可以根绝名称、大小、修改时间来查找指定的文件。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find -name httpd.conf #在当前目录下查找httpd.conf文件。</span><br><span class="line">find -name *.js       #在当前目录下查找所有js文件。</span><br><span class="line">find -empty           #查找所有为空的目录。</span><br><span class="line">find -size -1000      #查找小于1000KB的文件。</span><br><span class="line">find -size +1000      #查找大于1000KB的文件。</span><br></pre></td></tr></table></figure></p>
<p><code>find</code> 命令默认在当前目录进行查找，你也可以指定一个目录进行查找。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -name *.txt          #在根目录下查找所有的txt文件。</span><br><span class="line">find /etc -name httpd.conf  #在etc目录下查找httpd.conf文件。</span><br></pre></td></tr></table></figure></p>
<p>与根据文件名查找文件相同，也可以使用 <code>find</code> 按照目录名来查找目录。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name dirname</span><br></pre></td></tr></table></figure></p>
<h4 id="根据内容查找文件-1"><a href="#根据内容查找文件-1" class="headerlink" title="根据内容查找文件"></a>根据内容查找文件</h4><p>grep ：可以根据指定的内容来查找含有这些内容的文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep pattern *  #查找当前目录含有指定匹配模式的文件。pattren可以是一个正则表达式。</span><br><span class="line">grep c *        #查找当前目录含有单词c的文件。</span><br></pre></td></tr></table></figure></p>
<p>如果想忽略内容的大小写可以附加一个 <code>-i</code> 的参数。<br>显示匹配行及行号附加 <code>-n</code><br>如果只显示文件名，不显示具体匹配到的内容，则附加 <code>-l</code> 参数</p>
<h4 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h4><p>gzip ：单独压缩指定的文件，压缩后删除被压缩文件，只保留压缩后的文件，并且不能压缩目录。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip file                   #压缩指定的文件</span><br><span class="line">gzip file1 file2 file3...   #同时压缩多个文件</span><br></pre></td></tr></table></figure></p>
<p><code>gzip</code> 还可以与通配符结合使用，压缩匹配到的文件。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip <span class="emphasis">*.*</span></span><br><span class="line">gzip ?.?.*</span><br></pre></td></tr></table></figure></p>
<p>若想列出某个 .gz 压缩文件中的内容，可以附加一个 <code>-l</code> 参数。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -l file.gz</span><br></pre></td></tr></table></figure></p>
<p>解压某个.gz 文件，则使用 <code>gunzip</code> 命令。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip file.gz</span><br></pre></td></tr></table></figure></p>
<p>zip ：与 <code>gzip</code> 相比 <code>zip</code> 可以压缩目录还可以将多个文件压缩在一起，并保留被压缩的文件。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip filename.zip file1 file2 ...   #将指定的文件压缩到一个新创建的压缩文件中。</span><br></pre></td></tr></table></figure></p>
<p><code>zip</code> 也可以结合通配符使用，压缩匹配到的文件。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip filename.zip *.txt</span><br></pre></td></tr></table></figure></p>
<p>更强的是 <code>zip</code> 还可以一次性压缩一个目录<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip filename.zip dir</span><br></pre></td></tr></table></figure></p>
<p>同样的，若想列出某个 .zip 压缩文件中的内容，可以附加一个 <code>-l</code> 参数。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -l filename.zip</span><br></pre></td></tr></table></figure></p>
<p>解压某个<code>.zip</code> 文件，则使用 <code>unzip</code> 命令。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip file.zip</span><br></pre></td></tr></table></figure></p>
<h4 id="打包与解包"><a href="#打包与解包" class="headerlink" title="打包与解包"></a>打包与解包</h4><p>tar ：它是linux下的一个打包命令，它可以将一大堆松散的文件或者是目录打包在一起，从而保证资源的完整性。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf package.tar file1 file2 file3 ...</span><br></pre></td></tr></table></figure></p>
<p>如果要打包一个目录，则指定目录名：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf package.tar dirname</span><br></pre></td></tr></table></figure></p>
<p>如果想解包，则附加 <code>-xvf</code> 的参数即可。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf package.tar</span><br></pre></td></tr></table></figure></p>
<p>如果只是想列出某个包中含有的文件或目录,则附加 <code>-tvf</code> 参数即可。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar tvf package.tar</span><br></pre></td></tr></table></figure></p>
<p><code>tar</code> 命令只能打包，而不能压缩，而 <code>gzip</code> 虽然可以压缩但是只能对文件进行单独压缩，并且只保留压缩后的文件，而不保留被压缩的文件，所以将 <code>tar</code> + <code>gzip</code> 结合使用，将会互补其短，产生更大的功效。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar package.tar file1 file2 file3 ... #将多个文件打包在package.tar包文件中。</span><br><span class="line">gzip package.tar.gz package.tar       #将通过tar打包的文件再进行压缩。</span><br></pre></td></tr></table></figure></p>
<p>解压缩解包也要依次进行。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gunzip package.tar.gz #解压缩</span><br><span class="line">tar -xvf package.tar  #解包</span><br></pre></td></tr></table></figure></p>
<p>当然，你也可以通过附加参数的方式一次性的打包压缩。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf package.tar.gz</span><br></pre></td></tr></table></figure></p>
<p>然后一次性的解压缩解包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf package.tar.gz</span><br></pre></td></tr></table></figure></p>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctr+c  #终止当前命令</span><br><span class="line">ctr+l  ##清屏  相当于 clear</span><br><span class="line">ctr+a  #光标移到行首</span><br><span class="line">ctr+e  #光标移到行尾</span><br><span class="line">ctr+u  #把光标所在位置删除到行首</span><br><span class="line">ctr+d  #删除光标前面的字符，一旦内容全部删除再按则会退出窗口。</span><br><span class="line">ctr+h  #删除光标后面的字符，</span><br></pre></td></tr></table></figure>
<h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clear   #清除屏幕。</span><br><span class="line">echo    #显示消息，或将命令回显打开或关闭。</span><br><span class="line">whoami  #返回当前登录用户名。</span><br><span class="line">passwd  #允许当前登录的用户更改其密码。</span><br><span class="line">file    #尝试判断指定文件的类型。</span><br><span class="line">exit    #退出命令行工具</span><br><span class="line">users   #显示当前登录系统地用户</span><br><span class="line">last    #查看用户的登录日志</span><br><span class="line">cammand --help  #查看相关命令的帮助文档。</span><br><span class="line">ping    #查看网络状态</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[八张图理解 JAVA]]></title>
      <url>/top-8-diagrams-for-understanding-java.html</url>
      <content type="html"><![CDATA[<p>　　一图胜千言，下面图解均来自 Program Creek 网站的 <a href="http://www.programcreek.com/java-tutorials/" target="_blank" rel="noopener">Java教程</a>，目前它们拥有最多的票选。如果图解没有阐明问题，那么你可以借助它的标题来一窥究竟。<br><a id="more"></a></p>
<h2 id="字符串不变性"><a href="#字符串不变性" class="headerlink" title="字符串不变性"></a>字符串不变性</h2><p>下面这张图展示了这段代码做了什么<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = &quot;abcd&quot;;</span><br><span class="line">s = s.concat(&quot;ef&quot;);</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/566535260001c98e06500279.jpg" alt="字符串不变性"></p>
<h2 id="equals-方法、hashCode-方法的区别"><a href="#equals-方法、hashCode-方法的区别" class="headerlink" title="equals()方法、hashCode()方法的区别"></a>equals()方法、hashCode()方法的区别</h2><p>HashCode被设计用来提高性能。equals()方法与hashCode()方法的区别在于：</p>
<ol>
<li>如果两个对象相等(equal)，那么他们一定有相同的哈希值。</li>
<li>如果两个对象的哈希值相同，但他们未必相等(equal)。</li>
</ol>
<p><img src="/img/5665355c0001a41106500369.jpg" alt="equals"></p>
<h2 id="Java异常类的层次结构"><a href="#Java异常类的层次结构" class="headerlink" title="Java异常类的层次结构"></a>Java异常类的层次结构</h2><p>图中红色部分为受检查异常。它们必须被捕获，或者在函数中声明为抛出该异常。</p>
<p><img src="/img/56653579000175e204981024.jpg" alt="java 异常类的层次结构"></p>
<h2 id="集合类的层次结构"><a href="#集合类的层次结构" class="headerlink" title="集合类的层次结构"></a>集合类的层次结构</h2><p>注意Collections和Collection的区别。（Collections包含有各种有关集合操作的静态多态方法）</p>
<p><img src="/img/5665359400016c2f09100467.jpg" alt="集合类的层次结构"></p>
<h2 id="Java同步"><a href="#Java同步" class="headerlink" title="Java同步"></a>Java同步</h2><p>Java同步机制可通过类比建筑物来阐明。</p>
<p><img src="/img/566535b60001050603240216.jpg" alt="Java同步"></p>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>别名意味着有多个变量指向同一可被更新的内存块，这些别名分别是不同的对象类型。</p>
<p><img src="/img/566535fb000113f703170201.jpg" alt="别名"></p>
<h2 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h2><p>图解表明了方法和对象在运行时内存中的位置。</p>
<p><img src="/img/566536260001052904960257.jpg" alt="堆和栈"></p>
<h2 id="Java虚拟机运行时数据区域"><a href="#Java虚拟机运行时数据区域" class="headerlink" title="Java虚拟机运行时数据区域"></a>Java虚拟机运行时数据区域</h2><p>图解展示了整个虚拟机运行时数据区域的情况。</p>
<p><img src="/img/5665364300010ec905010363.jpg" alt="Java虚拟机运行时数据区域"></p>
<blockquote>
<p>原文链接：<a href="https://www.imooc.com/article/2592" target="_blank" rel="noopener">programcreek</a>　　翻译：ImportNew.com - era_misa<br>译文链接：<a href="http://www.importnew.com/11725.html" target="_blank" rel="noopener">http://www.importnew.com/11725.html</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 高并发编程「一」]]></title>
      <url>/java-concurrent-programming.html</url>
      <content type="html"><![CDATA[<h2 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h2><h3 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h3><p>一个程序里不同的执行路径，可以放在不同的 cpu 里同步的执行的。<br><a id="more"></a></p>
<h3 id="如何启动一个线程"><a href="#如何启动一个线程" class="headerlink" title="如何启动一个线程"></a>如何启动一个线程</h3><ol>
<li>继承java.lang.Thread类</li>
<li>实现java.lang.Runnable接口</li>
</ol>
<p>在线程的Thread对象上调用start()方法，启动新的执行线程。</p>
<h3 id="基本的线程同步"><a href="#基本的线程同步" class="headerlink" title="基本的线程同步"></a>基本的线程同步</h3><p>使用 <code>synchronized</code> </p>
<h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>java 的每个对象都有一个内置锁，<code>synchronized</code> 修饰方法时，内置锁会保护整个方法。在调用该方法前，需要获得内置锁，否则就处于阻塞状态。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> botaogou@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-02-02 15:50</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        x--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" x="</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(t,<span class="string">"THREAD"</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong><br>当 <code>synchronized</code> 锁定一个静态方法的时候，相当于锁定的是这个类的 <code>class</code> 对象，将会锁住整个类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里等值于 synchronized(T1.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"count"</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同步和非同步方法是可以同时调用的，因为非同步方法的调用时，不需要获得内置锁。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" m1 start..."</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" m1 end"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" m2 "</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T t = <span class="keyword">new</span> T();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*new Thread(()-&gt;t.m1(), "t1").start();</span></span><br><span class="line"><span class="comment">		new Thread(()-&gt;t.m2(), "t2").start();*/</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(t::m1, <span class="string">"t1"</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(t::m2, <span class="string">"t2"</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> 一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁，也就是说 synchronized 获得的锁是可重入的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"m1 start"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		m2();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"m2"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里是继承中有可能发生的情形，子类调用父类的同步方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"m start"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"m end"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> TT().m();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TT</span> <span class="keyword">extends</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"child m start"</span>);</span><br><span class="line">		<span class="keyword">super</span>.m();</span><br><span class="line">		System.out.println(<span class="string">"child m end"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>程序在执行过程中，如果出现异常，默认情况锁会被释放，所以，在并发处理的过程中，有异常要多加小心，不然可能会发生不一致的情况。比如，在一个web app处理过程中，多个servlet线程共同访问同一个资源，这时如果异常处理不合适，在第一个线程中抛出异常，其他线程就会进入同步代码区，有可能会访问到异常产生时的数据。因此要非常小心的处理同步业务逻辑中的异常<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" start"</span>);</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			count ++;</span><br><span class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">				</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(count == <span class="number">5</span>) &#123;</span><br><span class="line">				<span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>; <span class="comment">//此处抛出异常，锁将被释放，要想不被释放，可以在这里进行catch，然后让循环继续</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T t = <span class="keyword">new</span> T();</span><br><span class="line">		Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				t.m();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">new</span> Thread(r, <span class="string">"t1"</span>).start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(r, <span class="string">"t2"</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>volatile 关键字，使一个变量在多个线程间可见,使用volatile关键字，会让所有线程都会读到变量的修改值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*volatile*/</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>; <span class="comment">//对比一下有无volatile的情况下，整个程序运行结果的区别</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"m start"</span>);</span><br><span class="line">		<span class="keyword">while</span>(running) &#123;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			try &#123;</span></span><br><span class="line"><span class="comment">				TimeUnit.MILLISECONDS.sleep(10);</span></span><br><span class="line"><span class="comment">			&#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">				e.printStackTrace();</span></span><br><span class="line"><span class="comment">			&#125;*/</span></span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"m end!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T t = <span class="keyword">new</span> T();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(t::m, <span class="string">"t1"</span>).start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		t.running = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是<code>volatile</code>并不能保证多个线程共同修改running变量时所带来的不一致问题，也就是说<code>volatile</code>不能替代<code>synchronized</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>; </span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) count++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T t = <span class="keyword">new</span> T();</span><br><span class="line">		</span><br><span class="line">		List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;Thread&gt;();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">			threads.add(<span class="keyword">new</span> Thread(t::m, <span class="string">"thread-"</span>+i));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		threads.forEach((o)-&gt;o.start());</span><br><span class="line">		</span><br><span class="line">		threads.forEach((o)-&gt;&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				o.join();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		System.out.println(t.count);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对比上一个程序，可以用<code>synchronized</code>解决，<code>synchronized</code>可以保证可见性和原子性，<code>volatile</code>只能保证可见性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*volatile*/</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">			count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T t = <span class="keyword">new</span> T();</span><br><span class="line">		List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;Thread&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			threads.add(<span class="keyword">new</span> Thread(t::m, <span class="string">"thread-"</span> + i));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		threads.forEach((o) -&gt; o.start());</span><br><span class="line"></span><br><span class="line">		threads.forEach((o) -&gt; &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				o.join();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		System.out.println(t.count);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>决同样的问题的更高效的方法，使用AtomXXX类,AtomXXX类本身方法都是原子性的，但不能保证多个方法连续调用是原子性的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*volatile*/</span> <span class="comment">//int count = 0;</span></span><br><span class="line">	</span><br><span class="line">	AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">	<span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">			<span class="comment">//if count.get() &lt; 1000</span></span><br><span class="line">			count.incrementAndGet(); <span class="comment">//count++</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T t = <span class="keyword">new</span> T();</span><br><span class="line"></span><br><span class="line">		List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;Thread&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			threads.add(<span class="keyword">new</span> Thread(t::m, <span class="string">"thread-"</span> + i));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		threads.forEach((o) -&gt; o.start());</span><br><span class="line"></span><br><span class="line">		threads.forEach((o) -&gt; &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				o.join();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		System.out.println(t.count);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>synchronized</code>优化,同步代码块中的语句越少越好,比较m1和m2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//do sth need not sync</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//业务逻辑中只有下面这句需要sync，这时不应该给整个方法上锁</span></span><br><span class="line">		count ++;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//do sth need not sync</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//do sth need not sync</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//业务逻辑中只有下面这句需要sync，这时不应该给整个方法上锁</span></span><br><span class="line">		<span class="comment">//采用细粒度的锁，可以使线程争用时间变短，从而提高效率</span></span><br><span class="line">		<span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">			count ++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//do sth need not sync</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>锁定某对象o，如果o的属性发生改变，不影响锁的使用,但是如果o变成另外一个对象，则锁定的对象发生改变,应该避免将锁定对象的引用变成另外的对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	Object o = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(o) &#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(Thread.currentThread().getName());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T t = <span class="keyword">new</span> T();</span><br><span class="line">		<span class="comment">//启动第一个线程</span></span><br><span class="line">		<span class="keyword">new</span> Thread(t::m, <span class="string">"t1"</span>).start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//创建第二个线程</span></span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(t::m, <span class="string">"t2"</span>);</span><br><span class="line">		</span><br><span class="line">		t.o = <span class="keyword">new</span> Object(); <span class="comment">//锁对象发生改变，所以t2线程得以执行，如果注释掉这句话，线程2将永远得不到执行机会</span></span><br><span class="line">		</span><br><span class="line">		t2.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>不要以字符串常量作为锁定对象,在下面的例子中，m1和m2其实锁定的是同一个对象,这种情况还会发生比较诡异的现象，比如你用到了一个类库，在该类库中代码锁定了字符串“Hello”，但是你读不到源码，所以你在自己的代码中也锁定了”Hello”,这时候就有可能发生非常诡异的死锁阻塞，因为你的程序和你用到的类库不经意间使用了同一把锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	String s1 = <span class="string">"Hello"</span>;</span><br><span class="line">	String s2 = <span class="string">"Hello"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(s1) &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(s2) &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven 学习笔记]]></title>
      <url>/maven-learn-note.html</url>
      <content type="html"><![CDATA[<h2 id="什么是-Maven"><a href="#什么是-Maven" class="headerlink" title="什么是 Maven"></a>什么是 Maven</h2><p><strong>Maven</strong> 是跨平台的项目管理工具。主要服务于基于Java平台的项目构建，依赖管理和项目信息管理。<br><a id="more"></a></p>
<h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><ol>
<li>bin目录是包含mvn的运行脚本</li>
<li>boot目录包含一个类加载器的框架，maven使用它加载自己的类库</li>
<li>conf配置文件</li>
<li>lib包含maven运行时的依赖类库</li>
</ol>
<h2 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h2><h3 id="Maven-的下载配置"><a href="#Maven-的下载配置" class="headerlink" title="Maven 的下载配置"></a>Maven 的下载配置</h3><p><a href="http://maven.apache.org/download.cgi" title="下载地址" target="_blank" rel="noopener">Maven下载</a><br><strong>maven</strong> 环境配置，增加一个环境变量<strong>MAVEN_HOME</strong>,值是maven的安装路径（<code>C:\Program Files\apache-maven-3.5.0-bin\apache-maven-3.5.0</code>）<br>修改path则是在path最后面添加<code>;%MAVEN_HOME%\bin</code>。</p>
<h3 id="Maven-的项目结构"><a href="#Maven-的项目结构" class="headerlink" title="Maven 的项目结构"></a>Maven 的项目结构</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|----src</span><br><span class="line">|     |----main</span><br><span class="line">|     |         |----java ——存放项目的.java文件</span><br><span class="line">|     |         |----resources ——存放项目资源文件，如spring, hibernate配置文件</span><br><span class="line">|     |----test</span><br><span class="line">|     |         |----java ——存放所有测试.java文件，如JUnit测试类</span><br><span class="line">|     |         |----resources ——存放测试资源文件</span><br><span class="line">|----target ——项目输出位置</span><br><span class="line">|----pom.xml ----用于标识该项目是一个Maven项目</span><br></pre></td></tr></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn -v      查看maven版本</span><br><span class="line">compile     编译</span><br><span class="line">test        测试</span><br><span class="line">packag      打包</span><br><span class="line">clean       删除target</span><br><span class="line">install     安装jar包到本地仓库</span><br></pre></td></tr></table></figure>
<h3 id="maven快速创建项目骨架目录"><a href="#maven快速创建项目骨架目录" class="headerlink" title="maven快速创建项目骨架目录"></a>maven快速创建项目骨架目录</h3><p>两种方式：</p>
<ol>
<li>mvn archetype:generate 按照提示进行选择</li>
<li>mvn archetype:generate  -DgroupId=com.imooc.maven   -DartifactId= maven-service   -Dversion=1.0.0SNAPSHOT   -Dpackage=com.imooc.maven.demo<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>-DgroupId=组织名，公司网址反写+项目名</span><br><span class="line"><span class="bullet">2. </span>-DartifactId=项目名+模块名</span><br><span class="line"><span class="bullet">3. </span>-Dversion=版本号</span><br><span class="line"><span class="bullet">4. </span>-Dpackage=代码所存在的包名</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Maven中的坐标和仓库"><a href="#Maven中的坐标和仓库" class="headerlink" title="Maven中的坐标和仓库"></a>Maven中的坐标和仓库</h2><p><strong>构件坐标:</strong><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>groupId:公司名字+项目名</span><br><span class="line"><span class="bullet">2. </span>artifactId：项目名+模块名</span><br><span class="line"><span class="bullet">3. </span>varsion:版本号</span><br></pre></td></tr></table></figure></p>
<p><strong>仓库：</strong><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>本地仓库</span><br><span class="line"><span class="bullet">2. </span>远程仓库</span><br><span class="line"><span class="bullet">3. </span>镜像仓库</span><br></pre></td></tr></table></figure></p>
<h2 id="更改仓库默认路径"><a href="#更改仓库默认路径" class="headerlink" title="更改仓库默认路径"></a>更改仓库默认路径</h2><p>已安装到本地仓库中的jar包位置：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\用户\.m2\repository\com\tiakon\demo</span><br></pre></td></tr></table></figure></p>
<p>安装路径conf文件夹下settings.xml文件<br>打开找到这段备注的代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">| The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">| Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/path/to/local/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>将localRepository便签内的值替换成新路径即可。</strong></p>
<h2 id="maven生命周期"><a href="#maven生命周期" class="headerlink" title="maven生命周期"></a>maven生命周期</h2><p>完整的项目构建过程包括：</p>
<p><strong>清理、编译、测试、打包、集成测试、验证、部署</strong></p>
<p><strong>maven三套独立的生命周期</strong><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">clean 	清理项目</span><br><span class="line"><span class="code">        1.pre-clean	执行清理前的工作</span></span><br><span class="line"><span class="code">        2.clean		清理上一次构建生成的所有文件</span></span><br><span class="line"><span class="code">        3.post-clean 	执行清理后的文件</span></span><br><span class="line"></span><br><span class="line">default 构建项目（最核心）</span><br><span class="line"><span class="code">        compile test package install</span></span><br><span class="line"></span><br><span class="line">site 	生成项目站点</span><br><span class="line"><span class="code">        1. pre-site 	在生成项目站点前要完成的工作</span></span><br><span class="line"><span class="code">        2. site 	生成项目的站点文档</span></span><br><span class="line"><span class="code">        3. post-site	在生成项目站点后要完成的工作</span></span><br><span class="line"><span class="code">        4. site-deploy	发布生成的站点到服务器上</span></span><br></pre></td></tr></table></figure></p>
<h2 id="maven-中-pom-xml-常见元素介绍"><a href="#maven-中-pom-xml-常见元素介绍" class="headerlink" title="maven 中 pom.xml 常见元素介绍"></a>maven 中 pom.xml 常见元素介绍</h2><hr>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">	<span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">	         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">		         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!--指定了当前pom的版本--&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tiakon.maven.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HoictasStudio-MavenDemo01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	        第一个0表示大版本号</span></span><br><span class="line"><span class="comment">	        第二个0表示分支版本号</span></span><br><span class="line"><span class="comment">	        第三个0表示小版本号</span></span><br><span class="line"><span class="comment">	        0.0.1</span></span><br><span class="line"><span class="comment">	        snapshot    快照</span></span><br><span class="line"><span class="comment">	        alpha       内部测试</span></span><br><span class="line"><span class="comment">	        beta        公测</span></span><br><span class="line"><span class="comment">	        Release     稳定</span></span><br><span class="line"><span class="comment">	        GA          正式发布</span></span><br><span class="line"><span class="comment">	    --&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	        打包方式:默认是jar,可选war、zip、pom</span></span><br><span class="line"><span class="comment">	        &lt;packaging&gt;&lt;/packaging&gt;</span></span><br><span class="line"><span class="comment">	    --&gt;</span></span><br><span class="line">	    </span><br><span class="line">	      <span class="comment">&lt;!--指定编码格式--&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	        项目名</span></span><br><span class="line"><span class="comment">	        &lt;name&gt;&lt;/name&gt;</span></span><br><span class="line"><span class="comment">	        项目地址</span></span><br><span class="line"><span class="comment">	        &lt;url&gt;&lt;/url&gt;</span></span><br><span class="line"><span class="comment">	        项目描述</span></span><br><span class="line"><span class="comment">	        &lt;description&gt;&lt;/description&gt;</span></span><br><span class="line"><span class="comment">	        开发人员列表</span></span><br><span class="line"><span class="comment">	        &lt;developers&gt;&lt;/developers&gt;</span></span><br><span class="line"><span class="comment">	        许可证信息</span></span><br><span class="line"><span class="comment">	        &lt;licenses&gt;&lt;/licenses&gt;</span></span><br><span class="line"><span class="comment">	        组织信息</span></span><br><span class="line"><span class="comment">	        &lt;organization&gt;&lt;/organization&gt;</span></span><br><span class="line"><span class="comment">	    --&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	    <span class="comment">&lt;!--依赖列表--&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	        <span class="comment">&lt;!--依赖项--&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	            <span class="comment">&lt;!--&lt;type&gt;&lt;/type&gt;--&gt;</span></span><br><span class="line">	            <span class="comment">&lt;!--依赖范围--&gt;</span></span><br><span class="line">	            <span class="comment">&lt;!--&lt;scope&gt;&lt;/scope&gt;--&gt;</span></span><br><span class="line">	            <span class="comment">&lt;!--设置依赖是否可选（默认）false--&gt;</span></span><br><span class="line">	            <span class="comment">&lt;!--&lt;optional&gt;&lt;/optional&gt;--&gt;</span></span><br><span class="line">	            <span class="comment">&lt;!--排斥依赖传递列表--&gt;</span></span><br><span class="line">	            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	                &lt;exclusions&gt;</span></span><br><span class="line"><span class="comment">	                    &lt;exclusion&gt;</span></span><br><span class="line"><span class="comment">	                    &lt;/exclusion&gt;</span></span><br><span class="line"><span class="comment">	                &lt;/exclusions&gt;</span></span><br><span class="line"><span class="comment">	            --&gt;</span></span><br><span class="line">	        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!--依赖的管理，作用主要定义在父模块中，对子模块进行管理--&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	        &lt;dependencyManagement&gt;</span></span><br><span class="line"><span class="comment">	            &lt;dependencies&gt;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	            &lt;/dependencies&gt;</span></span><br><span class="line"><span class="comment">	        &lt;/dependencyManagement&gt;</span></span><br><span class="line"><span class="comment">	    --&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!--对构件的行为提供相应的支持--&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	        <span class="comment">&lt;!--插件列表--&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">	                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">	                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">	                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span></span><br><span class="line">	                                jar-no-fork</span><br><span class="line">	                            <span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">	                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">	                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!--通常用于子模块对父模块pom的继承--&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!--&lt;parent&gt;&lt;/parent&gt;--&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!--用来聚合运行Maven项目，指定多个模块一起编译--&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	        &lt;modules&gt;</span></span><br><span class="line"><span class="comment">	            &lt;module&gt;&lt;/module&gt;</span></span><br><span class="line"><span class="comment">	        &lt;/modules&gt;</span></span><br><span class="line"><span class="comment">	    --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Maven的依赖范围"><a href="#Maven的依赖范围" class="headerlink" title="Maven的依赖范围"></a>Maven的依赖范围</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">三种classpath</span><br><span class="line"><span class="code">    1. 编译</span></span><br><span class="line"><span class="code">    2. 测试</span></span><br><span class="line"><span class="code">    3. 运行</span></span><br></pre></td></tr></table></figure>
<p><strong>maven提供了6种可选依赖范围:</strong></p>
<ol>
<li>compile:    默认范围，编译测试运行都有效。</li>
<li>provided: 在编译和测试时有效。（比如说在开发JavaEE时，你在本地运行的servlet，是需要调用已添加到项目中的servlet-api.jar这个jar包的。这个过程就包含了编译【就是把Java文件编译成class文件的过程中也要调用】和测试【测试就是在本地运行】，那么他说的运行是指，整个项目已开发完成，编译、测试通过后，将class文件或包含有class文件的war包发布到服务器上的Tomcat中运行，这时启动项目，就可以直接调Tomcat中的servlet-api.jar，不必再将自己的jar包添加到项目中去。也就是说当你选择provided时，项目发布时Maven不会将你添加的jar包，加入到项目中。）</li>
<li>runtime:    在测试和运行时有效。(典型例子：JDBC驱动的实现。)</li>
<li>test: 只在测试是有效。</li>
<li>system: 类似provided，与本机系统相关联，可移植性差。</li>
<li>import: 导入范围，他只是用在dependencyManagement中，表示从其他的pom中导入dependecy的配置。（以下引用官网案例并不难理解。）</li>
</ol>
<p>Importing Dependencies<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>B<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>B<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>A<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>d<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Assuming A is the pom defined in the preceding example, the end result would be the same. <strong>All of A’s managed dependencies would be incorporated into B except for d since it is defined in this pom.</strong></p>
<p>假设A是前面示例中定义的pom，那么最终结果将是相同的。<strong>所有管理的依赖项都将被合并到B中，除了在这个pom中定义的d之外。</strong></p>
<h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><h3 id="短路优先"><a href="#短路优先" class="headerlink" title="短路优先:"></a>短路优先:</h3><p>C-&gt;B-&gt;A-&gt;X1(jar)<br>C-&gt;B-&gt;X2(jar)<br>「C依赖B,B依赖A,A和B都包含同一个不同版本的Jar,则取B的依赖版本。（c的pom.xml中不必注明jar坐标）」</p>
<h3 id="先声明先优先"><a href="#先声明先优先" class="headerlink" title="先声明先优先"></a>先声明先优先</h3><p>如果路径相同长度相同，则谁先声明，先解析谁。<br>「C依赖A和B,A和B都包含同一个不同版本的Jar,谁依赖在前取谁的依赖版本。」</p>
<h2 id="聚合与继承"><a href="#聚合与继承" class="headerlink" title="聚合与继承"></a>聚合与继承</h2><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>../HoictasStudio-MavenDemo01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>../HoictasStudio-MavenDemo02<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>../HoictasStudio-MavenDemo03<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>假设在<strong>HoictasStudio-MavenParent</strong>模块中添如以上代码，输入<code>clean install</code>命令后，即可同时安装多个jar到本地仓库中<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[INFO] HoictasStudio-MavenDemo01 .......................... SUCCESS [  4.618 s]</span><br><span class="line">[INFO] HoictasStudio-MavenDemo02 .......................... SUCCESS [  0.828 s]</span><br><span class="line">[INFO] HoictasStudio-MavenDemo03 .......................... SUCCESS [  0.923 s]</span><br><span class="line">[INFO] HoictasStudio-MavenParent .......................... SUCCESS [  0.021 s]</span><br></pre></td></tr></table></figure></p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>根据官方文档说明继承会根据父模块与子模块的包含与否，对pom.xml的写法则有两种。</strong></p>
<h4 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h4><p>假设我们有两个模块，前一个叫 <code>com.mycompany.app:my-app:1</code>，后一个叫<code>com.mycompany.app:my-module:1</code>。</p>
<p>my-app的pom文件为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>my-module的pom文件为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我们指定如下项目结构：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- my-module</span><br><span class="line">|   `-- pom.xml</span><br><span class="line">`-- pom.xml</span><br></pre></td></tr></table></figure></p>
<p>那么，我们需要<code>my-module</code>去继承<code>my-app</code>，则需要在<code>my-module</code>的pom文件中添加以下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h4><p>However, that would work if the parent project was already installed inour local repository or was in that specific directory structure (parent pom.xml is one directory higher than that of the module’s pom.xml). But what if the parent is not yet installed and if the directory structure is<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- my-module</span><br><span class="line">|   `-- pom.xml</span><br><span class="line">`-- parent</span><br><span class="line"> `-- pom.xml</span><br></pre></td></tr></table></figure></p>
<p>上一段话摘自官网对继承的介绍，就是说如果你的父模块已在本地安装或者父模块不包含子模块，目录级别甚至是比子模块的还要高，就在第一种写法上添加<code>&lt;relativePath&gt;</code>标签。</p>
<pre><code class="xml"><span class="tag">&lt;<span class="name">project</span>&gt;</span>
    <span class="tag">&lt;<span class="name">parent</span>&gt;</span>
        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>
        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span>
    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>
    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>
    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
<span class="tag">&lt;/<span class="name">project</span>&gt;</span>
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式--单例模式]]></title>
      <url>/singleton-pattern.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>　　设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。<br><a id="more"></a></p>
</blockquote>
<h2 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h2><p>单例模式的目的： 保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>单例模式的实现方式有<strong>懒汉式</strong>和<strong>饿汉式</strong></p>
<h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>顾名思义，类加载时就初始化，所以也容易产生垃圾对象，浪费内存,基于 classloder 机制避免了多线程的同步问题,也就没有加锁，执行效率会提高。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让构造函数为 private，这样该类就不会被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建 SingleObject 的一个对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single instance = <span class="keyword">new</span> Single();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供了一个静态方法，供外界获取它的静态实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后别的类通过 <code>Single.getInstance()</code> 获取 <code>Single</code> 类的唯一对象。</p>
<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><h4 id="线程不安全实现"><a href="#线程不安全实现" class="headerlink" title="线程不安全实现"></a>线程不安全实现</h4><p>这种方式属于 <code>lazy loading</code>，因为没有加锁 <code>synchronized</code>，所以不支持多线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="线程安全实现"><a href="#线程安全实现" class="headerlink" title="线程安全实现"></a>线程安全实现</h4><p>通过加 <code>synchronized</code> 保证在多线程中单例，每次调用 getInstance() 方法都需要进行线程锁定判断,加锁会影响效率。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h4><p>利用双重校验锁，第一次检查是否实例已经创建，如果还没创建，再进行同步的方式创建单例对象,安全且在多线程情况下能保持高性能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>类加载的时候并不会实例化 Singleton，而是在第一次调用 getInstance() 加载内部类 SigletonHolder，此时才进行初始化 instance 成员变量，确保内存中的对象唯一性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举的特点是，构造方法是 private 修饰的，并且成员对象实例都是预定义的，因此我们通过枚举来实现单例模式非常的便捷不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实际上，我们应该采用饿汉式还是采用懒汉式，取决于我们希望空间换取时间，还是时间换取空间的抉择问题。一般情况建议使用饿汉式，类被加载时就实例化，因此无须考虑多线程安全问题，并且对象一开始就得以创建，性能方面要优于懒汉式，如果要求懒加载，可以考虑使用静态内部类或者双检锁方式。</p>
]]></content>
      
        
        <tags>
            
            <tag> Design pattern </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot 数据访问与多数据源配置]]></title>
      <url>/SpringBoot-multi-datasource.html</url>
      <content type="html"><![CDATA[<p>在一个应用中访问多个数据源的情况在开发场景中很常见，比如 MySQL 的分库场景，所以需要配置多个数据源。<br><a id="more"></a></p>
<h2 id="引入-maven-依赖"><a href="#引入-maven-依赖" class="headerlink" title="引入 maven 依赖"></a>引入 maven 依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加 jdbc 的依赖 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mysql 连接类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 连接池类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据源相关配置"><a href="#数据源相关配置" class="headerlink" title="数据源相关配置"></a>数据源相关配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql</span></span><br><span class="line"><span class="string">spring.datasource.one.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.one.url=jdbc:mysql://localhost:3306/db1</span></span><br><span class="line"><span class="string">spring.datasource.one.username=root</span></span><br><span class="line"><span class="string">spring.datasource.one.password=root</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.datasource.two.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.two.url=jdbc:mysql://localhost:3306/db2</span></span><br><span class="line"><span class="string">spring.datasource.two.username=root</span></span><br><span class="line"><span class="string">spring.datasource.two.password=root</span></span><br></pre></td></tr></table></figure>
<h2 id="创建-dataSource-和-jdbcTemplate"><a href="#创建-dataSource-和-jdbcTemplate" class="headerlink" title="创建 dataSource 和 jdbcTemplate"></a>创建 dataSource 和 jdbcTemplate</h2><p>设定主数据源为 <code>spring.datasource.one</code> 开头的配置，并添加 <code>@Primary</code> ，这样我们还可以享受 Spring Boot 提供的自动配置 DataSource 的机能。此外，第二数据源配置为 <code>spring.datasource.two</code> 开头的配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"oneDataSource"</span>)</span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"oneDataSource"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"spring.datasource.one"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">oneDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"twoDataSource"</span>)</span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"twoDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"spring.datasource.two"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">twoDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"oneJdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">oneJdbcTemplate</span><span class="params">(@Qualifier(<span class="string">"oneDataSource"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"twoJdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">twoJdbcTemplate</span><span class="params">(@Qualifier(<span class="string">"twoDataSource"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="单元测试用例"><a href="#单元测试用例" class="headerlink" title="单元测试用例"></a>单元测试用例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@SpringApplicationConfiguration</span>(WebMain.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"oneJdbcTemplate"</span>)</span><br><span class="line">    <span class="keyword">protected</span> JdbcTemplate jdbcTemplate1;</span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"twoJdbcTemplate"</span>)</span><br><span class="line">    <span class="keyword">protected</span> JdbcTemplate jdbcTemplate2;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        jdbcTemplate1.update(<span class="string">"insert into t_author(id, name, age) values(?, ?, ?)"</span>, <span class="number">1</span>, <span class="string">"gbt"</span>, <span class="string">"22"</span>);</span><br><span class="line">        jdbcTemplate2.update(<span class="string">"insert into t_author(id, name, age) values(?, ?, ?)"</span>, <span class="number">1</span>, <span class="string">"wave"</span>, <span class="string">"23"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop 基础]]></title>
      <url>/hadoop-basis.html</url>
      <content type="html"><![CDATA[<h2 id="初始大数据"><a href="#初始大数据" class="headerlink" title="初始大数据"></a>初始大数据</h2><h3 id="什么是大数据？"><a href="#什么是大数据？" class="headerlink" title="什么是大数据？"></a>什么是大数据？</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">大数据是一个概念也是一门技术，是在以Hadoop为代表的大数据平台框架上进行各种数据分析的技术。</span><br><span class="line">大数据包括了以Hadoop和Spark为代表的基础大数据框架。</span><br><span class="line">还包括实时数据处理、离线数据处理；数据分析，数据挖掘和用机器算法进行预测分析等技术。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="学习基础要求"><a href="#学习基础要求" class="headerlink" title="学习基础要求"></a>学习基础要求</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">会 Linux 常用命令</span><br><span class="line">有一定的 Python 或者 Java 编程基础</span><br><span class="line">对 Hadoop 有一定的了解，可以搭建自己的测试环境</span><br></pre></td></tr></table></figure>
<h2 id="Hadoop-的功能和优势"><a href="#Hadoop-的功能和优势" class="headerlink" title="Hadoop 的功能和优势"></a>Hadoop 的功能和优势</h2><p>hadoop 是开源的、分布式存储、分布式计算平台，可以用来搭建大型数据仓库,PB级数据的存储、处理、分析、统计等业务<br>Hadoop包括两个核心组成:</p>
<ul>
<li>HDFS:分布式文件系统,存储海量的数据</li>
<li>MapReduce:并行处理框架,实现任务分解和调度</li>
</ul>
<p>相关开源工具：</p>
<ul>
<li>hbase 放弃了事务的特性，追求更高的扩展，提供了数据的随机读写和实时访问，实现对表数据的读写功能</li>
<li>zookeeper 监控 hadoop 每个节点的状态，管理集群配置，维护节点间数据的一致性。</li>
<li>hive 将简单的 sql 语句转化为 hadoop 任务，降低使用 hadoop 的门槛</li>
</ul>
<h2 id="Hadoop-安装"><a href="#Hadoop-安装" class="headerlink" title="Hadoop 安装"></a>Hadoop 安装</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>准备Linux环境</span><br><span class="line"><span class="bullet">2. </span>安装JDK Java编写</span><br><span class="line"><span class="bullet">3. </span>配置Hadoop</span><br></pre></td></tr></table></figure>
<h3 id="hadoop安装及配置："><a href="#hadoop安装及配置：" class="headerlink" title="hadoop安装及配置："></a>hadoop安装及配置：</h3><ol>
<li>下载hdoop安装包并进行解压</li>
<li>配置hdoop-env.sh文件，目的是配置jdk，并在profile配置haddoop的安装位置<br><code>export JAVA_HOME=安装好的JDK(配置的JAVA_HOME)</code><br><code>export HADOOP_HOME=/opt/hadoop-1.2.1</code><br><code>export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$HADOOP_HOME/bin:$PATH</code></li>
<li><p>配置core-site.xml文件：hdoop的核心文件，里面有关于hdoop的节点端口与主机端口</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">propery</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span> <span class="comment">&lt;!-- 工作目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">propery</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/hadoop/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span> <span class="comment">&lt;!-- 所有元数据的目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">propery</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://imooc:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  <span class="comment">&lt;!-- 表示文件系统如何访问 namenode --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">propery</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置hdfs-site.xml文件：hadoop的文件存储的基本信息与目录</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/hadoop/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span> <span class="comment">&lt;!-- 文件系统的数据存放路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置mapred-site.xml文件：hadoop的计算节点的端口号</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>imooc:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  <span class="comment">&lt;!-- 配置任务调度器如何访问 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>格式化：<code>hadoop namenode -format</code></p>
</li>
<li>启动 <code>hadoop：start-all.sh</code></li>
<li>查看端口：<code>jps</code>,可以看到五大守护进程说明正确</li>
<li>停止 <code>hadoop：stop-all.sh</code></li>
</ol>
<h2 id="Hadoop-核心-HDFS"><a href="#Hadoop-核心-HDFS" class="headerlink" title="Hadoop 核心 HDFS"></a>Hadoop 核心 HDFS</h2><h3 id="HDFS-基本概念"><a href="#HDFS-基本概念" class="headerlink" title="HDFS 基本概念"></a>HDFS 基本概念</h3><ul>
<li>块 Block  文件分块存储 默认64MB  逻辑单元</li>
<li>NameNode (管理节点，存放文件元数据)<ul>
<li>文件与数据库的映射表</li>
<li>数据库与数据节点的映射表</li>
</ul>
</li>
<li>DataNode (工作节点，存放数据块)</li>
</ul>
<h3 id="数据管理策略"><a href="#数据管理策略" class="headerlink" title="数据管理策略"></a>数据管理策略</h3><ol>
<li>hdfs是采用master-slave的模式关管理文件，即一个master(namenade:保存datanode的一些基本信息和元数据)和多个slave(datanode:真正的存贮单元，里面存储了真实数据)</li>
<li>hdfs默认保存三份文件，有两份保存在同一台机器上，另外一份（备份文件）保存到另外一台机器上，确保当一台机器挂了时能保存数据的存在</li>
<li>namenade也有一个备用节点：Secondary NameNode,当namenode挂了时secondaryNameNode就变为nameNode的角色进行管理数据</li>
<li>datandoe会采用心跳的方式时不时的想namenode报告自己的基本信息，比如网络是否正常，运行是否正确常</li>
</ol>
<h3 id="HDFS-中文件读写的流程"><a href="#HDFS-中文件读写的流程" class="headerlink" title="HDFS 中文件读写的流程"></a>HDFS 中文件读写的流程</h3><p>客户端发出读写请求，namenode根据元数据返回给客户端，下载需要的block并组装</p>
<h4 id="HDFS-读取文件的流程："><a href="#HDFS-读取文件的流程：" class="headerlink" title="HDFS 读取文件的流程："></a>HDFS 读取文件的流程：</h4><ol>
<li>客户端向namenode发起独立请求，把文件名，路径告诉namenode；</li>
<li>namenode查询元数据，并把数据库返回客户端；</li>
<li>此时客户端就明白文件包含哪些块，这些块在哪些datanode中可以找到；</li>
</ol>
<h4 id="HDFS-写入文件的流程："><a href="#HDFS-写入文件的流程：" class="headerlink" title="HDFS 写入文件的流程："></a>HDFS 写入文件的流程：</h4><ol>
<li>客户端将文件拆分成块</li>
<li>客户端通知NameNode,NameNode返回可用的DataNode节点地址</li>
<li>客户端根据返回的DataNode将数据块写入到可用的DataNode中</li>
<li>因为数据块要有三份，所以会通过一个复制管道将每个数据块复制出另外两份并保存</li>
<li>更新元数据NameNode</li>
</ol>
<h3 id="HDFS-特点"><a href="#HDFS-特点" class="headerlink" title="HDFS 特点"></a>HDFS 特点</h3><ol>
<li>数据冗余，硬件容错（一式三份来保证）</li>
<li>流式数据访问：写一次，读多次，一旦写入无法修改，只能通过写入到新的块删除旧的块进行处理</li>
<li>存储大文件（特适合，因为小文件多，势必加重NameNode的负担）</li>
</ol>
<p><strong>优点</strong>：存储块大，吞吐量高，为存储大文件设计；适合一次写入多次读取，顺序读写<br><strong>缺点</strong>：延迟高，不适合交互式访问，不支持多用户并发写相同文件</p>
<h3 id="HDFS-使用"><a href="#HDFS-使用" class="headerlink" title="HDFS 使用"></a>HDFS 使用</h3><p>它提供了 shell 接口，可以进行命令行操作，常用Hadoop的shell命令：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#hadoop fs -format     #格式化操作</span></span><br><span class="line"><span class="section">#hadoop fs -ls /        #展示文件</span></span><br><span class="line"><span class="section">#hadoop fs -cat input/hsdf-site.xml #查看Hadoop里面的指定文件</span></span><br><span class="line"><span class="section">#hadoop fs -mkdir input  #未指明目录，表示在Hadoop的文件系统下的默认目录/user/root下新建</span></span><br><span class="line"><span class="section">#hadoop fs -put hdsf-site.xml input/  #上传文件到Hadoop</span></span><br><span class="line"><span class="section">#hadoop fs -get hdfs-site.xml hdfs-site2.xml #从Hadoop下载文件</span></span><br><span class="line"><span class="section">#hadoop dfsadmin -report #查看HADF使用情况（所有信息）</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Hadoop-核心-MapReduce"><a href="#Hadoop-核心-MapReduce" class="headerlink" title="Hadoop 核心 MapReduce"></a>Hadoop 核心 MapReduce</h2><h3 id="MapReduce-的原理"><a href="#MapReduce-的原理" class="headerlink" title="MapReduce 的原理"></a>MapReduce 的原理</h3><p>Mapreduce原理：分而治之，一个大任务分成多个子任务（map），并行执行之后，合并结果（reduce）。<br><code>eg：做统计的时候，把统计的文件拆分，然后分别统计每一个数据出现的次数，然后合并拆分项，就可以统计每一个数据出现的总次数。</code><br>　　在正式执行Map前，需要将输入数据进行”分片”。所谓分片，就是将输入数据切分为大小相等的数据块，每一块作为单个Map Worker的输入被处理，以便于多个Map Worker同时工作。<br>　　分片完毕后，多个Map Worker就可以同时工作了。每个Map Worker在读入各自的数据后，进行计算处理，最终输出给Reduce。Map Worker在输出数据时，需要为每一条输出数据指定一个Key。这个Key值决定了这条数据将会被发送给哪一个Reduce Worker。Key值和Reduce Worker是多对一的关系，具有相同Key的数据会被发送给同一个Reduce Worker，单个Reduce Worker有可能会接收到多个Key值的数据。<br>　　在进入Reduce阶段之前，MapReduce框架会对数据按照Key值排序，使得具有相同Key的数据彼此相邻。如果用户指定了”合并操作”(Combiner)，框架会调用Combiner，将具有相同Key的数据进行聚合。Combiner的逻辑可以由用户自定义实现。这部分的处理通常也叫做”洗牌”(Shuffle)。<br>　　接下来进入Reduce阶段。相同的Key的数据会到达同一个Reduce Worker。同一个Reduce Worker会接收来自多个Map Worker的数据。每个Reduce Worker会对Key相同的多个数据进行Reduce操作。最后，一个Key的多条数据经过Reduce的作用后，将变成了一个值。</p>
<h3 id="MapReduce-的运行流程"><a href="#MapReduce-的运行流程" class="headerlink" title="MapReduce 的运行流程"></a>MapReduce 的运行流程</h3><p><strong>Job &amp; Task</strong>：<br>一个 <code>Job</code>（任务、作业） 被切分为多个 <code>Task</code>，Task 又分为 <code>MapTask</code> 和 <code>ReduceTask</code></p>
<h4 id="mapReduce-作业执行过程"><a href="#mapReduce-作业执行过程" class="headerlink" title="mapReduce 作业执行过程"></a>mapReduce 作业执行过程</h4><p><img src="/img/mp.jpg" alt="@mapReduce"></p>
<p><strong>JobTracker</strong> ：将一个Job拆分成多个Map和Reduce任务；分配Map和Reduce任务</p>
<ul>
<li>作业调度</li>
<li>分配任务、监控任务</li>
<li>监控 TaskTracker 的状态</li>
</ul>
<p><strong>TaskTracker</strong> ：Map任务分发给下面的TaskTracker做实际 的任务；TaskTracker与DataNode保持对应关系</p>
<ul>
<li>执行任务</li>
<li>向 <code>JobTracker</code> 汇报任务状态</li>
</ul>
<h4 id="mapReduce-容错机制"><a href="#mapReduce-容错机制" class="headerlink" title="mapReduce 容错机制"></a>mapReduce 容错机制</h4><ol>
<li>重复测试：如果一个TaskTracker节点在测试过程中失败，mapreduce会重新执行该任务，如果执行四次后仍失败，就停止执行该任务</li>
<li>推测测试：如果一个taskTracker执行得很慢，mapReduce就会重新开启一个taskTracker节点去计算相同的该任务，原来那个继续执行，重新开启的taskTracker如果先执行完，则mapReduce取到该结果后就会停止原来那个很慢的taskTracker节点</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA 使用技巧]]></title>
      <url>/idea-use-tips.html</url>
      <content type="html"><![CDATA[<p>本着<code>工欲善其事必先利其器</code>的精神，闷头写代码之外花点时间研究一下自己用的 IDE，其带来的效率提升非常可观。<br><a id="more"></a></p>
<h2 id="高效定位代码"><a href="#高效定位代码" class="headerlink" title="高效定位代码"></a>高效定位代码</h2><h3 id="无处不在的跳转"><a href="#无处不在的跳转" class="headerlink" title="无处不在的跳转"></a>无处不在的跳转</h3><ul>
<li>项目之间跳转<ul>
<li>下一个 <code>ctrl + alt + ]</code> </li>
<li>上一个 <code>ctrl + alt + [</code></li>
</ul>
</li>
<li>文件之间跳转<ul>
<li>最近的文件 <code>ctrl + e</code> </li>
<li>最近编辑的文件 <code>ctrl + shift + e</code></li>
</ul>
</li>
<li>浏览修改位置跳转 <code>ctrl + shift + backspace</code></li>
<li>使用书签进行跳转<ul>
<li>标记书签 <code>ctrl + shift + 数字或字母</code></li>
<li>跳转书签 <code>ctrl + 数字或者字母</code></li>
<li>总览书签 <code>shift + F11</code> </li>
</ul>
</li>
<li>快速寻找功能快捷键 <code>ctrl + shift + a</code></li>
<li>编辑区和文件区来回跳转 <code>alt + 1</code> &amp; <code>esc</code></li>
</ul>
<h3 id="精准搜索"><a href="#精准搜索" class="headerlink" title="精准搜索"></a>精准搜索</h3><ul>
<li>类 <code>ctrl + n</code></li>
<li>文件 <code>ctrl + shift + n</code></li>
<li>符号 <code>ctrl + alt + shift + n</code></li>
<li>字符串 <code>ctrl + shift + f</code></li>
</ul>
<h2 id="代码小助手们"><a href="#代码小助手们" class="headerlink" title="代码小助手们"></a>代码小助手们</h2><h3 id="列操作"><a href="#列操作" class="headerlink" title="列操作"></a>列操作</h3><ul>
<li>选中单词 <code>ctrl + &gt;</code></li>
<li>英文大小写切换 <code>ctrl + shift + u</code></li>
<li>对所有选中单词进行操作 <code>ctrl + alt + shift + j</code></li>
</ul>
<h3 id="live-template"><a href="#live-template" class="headerlink" title="live template"></a>live template</h3><ul>
<li>位置：菜单-&gt;File-&gt;Setting-&gt;Editor-&gt;Live Templates</li>
<li>功能：定义模板，使用特定“字符”快速敲击出某段代码。</li>
<li>举例：psvm 敲出 public static void main(String[] args)</li>
</ul>
<h3 id="postfix"><a href="#postfix" class="headerlink" title="postfix"></a>postfix</h3><ul>
<li>位置：菜单-&gt;File-&gt;Setting-&gt;Editor-&gt;General-&gt;Postfix Completion</li>
<li>功能：使用后缀，快速敲出代码块。 </li>
<li>举例：100.fori 敲出 for(int i=0;i&lt;100;i++){}</li>
</ul>
<h3 id="alter-enter"><a href="#alter-enter" class="headerlink" title="alter + enter"></a>alter + enter</h3><ul>
<li>自动创建函数</li>
<li>自动生成参数化 String.format</li>
<li>实现接口</li>
<li>单词拼写,单词建议</li>
<li>导包</li>
</ul>
<h2 id="编写高质量代码"><a href="#编写高质量代码" class="headerlink" title="编写高质量代码"></a>编写高质量代码</h2><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ul>
<li>重构变量：<code>shift + F6</code></li>
<li>重构方法：<code>ctrl + F6</code></li>
</ul>
<h3 id="抽取"><a href="#抽取" class="headerlink" title="抽取"></a>抽取</h3><ul>
<li>抽取变量：<code>ctrl + alt + v</code></li>
<li>抽取静态变量：<code>ctrl + alt + c</code></li>
<li>抽取成员变量：<code>ctrl + alt + f</code></li>
<li>抽取方法参数：<code>ctrl + alt + p</code></li>
<li>抽取函数：<code>ctrl + alt + m</code></li>
</ul>
<h2 id="关联一切"><a href="#关联一切" class="headerlink" title="关联一切"></a>关联一切</h2><h3 id="Spring-的关联"><a href="#Spring-的关联" class="headerlink" title="Spring 的关联"></a>Spring 的关联</h3><ul>
<li>位置：菜单-&gt;File-&gt;Project Structure-&gt;Facets</li>
<li>功能：帮助管理Spring容器。还提供了很多其他的管理，比如EJB</li>
<li>使用：<ol>
<li>点击+号，选择Spring，选择模块</li>
<li>在Spring中，点击+号，起一个名字，选择spring配置文件。（SpringBoot中，选择类文件）</li>
<li>项目的各个文件中会出现spring的logo，其提供了很多功能。比如查看该Bean是在哪提供的。</li>
</ol>
</li>
</ul>
<h3 id="与数据库的关联"><a href="#与数据库的关联" class="headerlink" title="与数据库的关联"></a>与数据库的关联</h3><p>关联了数据库之后，如果需要重构字段或表名，不仅可以更改当前页面，还可以更改所有引用到该表的sql以及数据库表名或字段</p>
<h2 id="调试程序"><a href="#调试程序" class="headerlink" title="调试程序"></a>调试程序</h2><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><ul>
<li>添加/取消断点    <code>Ctrl + F8</code></li>
<li>调试            <code>Shift + F10</code></li>
<li>运行            <code>Shift + F9</code></li>
<li>单步运行        <code>F8</code></li>
<li>跳到下一个断点    <code>F9</code></li>
<li>查看所有断点    <code>Shift + Ctrl + F8</code></li>
<li>禁止所有断点    <code>debug后在左下角的Mute breakPoints</code></li>
<li>条件断点        <code>在需要用条件断点的断点处，使用Shift + Ctrl + F8</code></li>
<li>动态求值        <code>Alt + F8</code></li>
<li>运行到指定行    <code>Alt + F9</code></li>
<li>动态改变值        <code>F2</code></li>
</ul>
<h3 id="单元测试运行"><a href="#单元测试运行" class="headerlink" title="单元测试运行"></a>单元测试运行</h3><ul>
<li>运行上下文运行    <code>ctrl+shift+F9</code></li>
<li>在当前可运行列表中选择一个运行   <code>Shift + Alt + F9</code></li>
</ul>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul>
<li>新建文件    <code>Ctrl + Alt + Insert</code></li>
<li>复制文件    <code>F5</code></li>
<li>移动文件    <code>F6</code></li>
</ul>
<h3 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h3><ul>
<li>复制文件名    <code>对着文件Ctrl+C</code></li>
<li>复制完整文件名   <code>对着文件shift+Ctrl+C</code></li>
<li>批量复制     <code>调用剪切板，shift+Ctrl+V</code></li>
</ul>
<h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><ul>
<li>查看结构图   <code>Ctrl+F12</code></li>
<li>查看类的继承关系   <code>Ctrl+H</code></li>
<li>查看方法的调用和被调用    <code>Ctrl+Alt+H</code></li>
<li>图表    <code>ctrl+Alt+U</code></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot 在 IDEA 中实现热部署]]></title>
      <url>/SpringBoot-hot-deployment-idea.html</url>
      <content type="html"><![CDATA[<p>前阵子鼓捣了半天 JRebel ，打算借助 JRebel 热部署 SpringBoot 项目,提高开发测试效率,还是没搞定,后发现可以修改 IDE 启动命令实现热部署。<br><a id="more"></a></p>
<h3 id="下载-Springloaded-的-Jar-包"><a href="#下载-Springloaded-的-Jar-包" class="headerlink" title="下载 Springloaded 的 Jar 包"></a>下载 Springloaded 的 Jar 包</h3><p><a href="http://mvnrepository.com/artifact/org.springframework/springloaded/1.2.6.RELEASE" target="_blank" rel="noopener">下载位置</a><br>放到本地磁盘的某个目录下</p>
<h3 id="修改启动方式配置"><a href="#修改启动方式配置" class="headerlink" title="修改启动方式配置"></a>修改启动方式配置</h3><p>点击 <code>Edit Configurations</code><br><img src="/img/aaaaa.png" alt="Configurations"><br>配置 VM options,Springloaded jar 包的所在位置<br><img src="/img/vvv.png" alt="VM options"></p>
<h3 id="打开自动编译"><a href="#打开自动编译" class="headerlink" title="打开自动编译"></a>打开自动编译</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File-&gt;Settings-&gt;Build,Execution,Deployment-&gt;Compiler,选中 Build project automatically</span><br></pre></td></tr></table></figure>
<p><img src="/img/qqqqq.png" alt="打开自动编译"></p>
<h3 id="打开运行时编译"><a href="#打开运行时编译" class="headerlink" title="打开运行时编译"></a>打开运行时编译</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按快捷键 Shift+Ctrl+Alt+/ ，点击 Registry</span><br></pre></td></tr></table></figure>
<p>选中 <code>compiler.automake.allow.when.app.running</code><br><img src="/img/wwww.png" alt="打开运行时编译"></p>
<p>然后重启 IDEA 即可。</p>
<p>还有一种方式是通过 <code>spring-boot-devtools实现热部署</code>，但是我个人极不推荐，觉得这种方式虽然配置简单，只需要引入依赖即可，但是每次修改后都会自动重启项目，和手动重启没有太大区别，影响性能。</p>
<blockquote>
<p>通过 spring-boot-devtools 实现热部署的参考文章<br><a href="https://www.cnblogs.com/xiong233/p/6796847.html" target="_blank" rel="noopener">Spring boot 在Intellij IDEA 中的热部署</a><br><a href="http://blog.csdn.net/u013938484/article/details/77541050" target="_blank" rel="noopener">Intellij IDEA 使用Spring-boot-devTools无效解决办法</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot 整合 Redis]]></title>
      <url>/SpringBoot-redis.html</url>
      <content type="html"><![CDATA[<p>归纳总结 SpringBoot 整合 Redis,进行数据操作。<br><a id="more"></a></p>
<h2 id="引入-maven-依赖"><a href="#引入-maven-依赖" class="headerlink" title="引入 maven 依赖"></a>引入 maven 依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据源相关配置"><a href="#数据源相关配置" class="headerlink" title="数据源相关配置"></a>数据源相关配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.redis.host=localhost</span></span><br><span class="line"><span class="string">spring.redis.port=6379</span></span><br><span class="line"><span class="string">spring.redis.password=</span></span><br><span class="line"><span class="string">spring.redis.database=1</span></span><br><span class="line"><span class="string">spring.redis.pool.max-active=8</span></span><br><span class="line"><span class="string">spring.redis.pool.max-wait=-1</span></span><br><span class="line"><span class="string">spring.redis.pool.max-idle=500</span></span><br><span class="line"><span class="string">spring.redis.pool.min-idle=0</span></span><br><span class="line"><span class="string">spring.redis.timeout=0</span></span><br></pre></td></tr></table></figure>
<h2 id="数据访问层，使用-redisTemplate"><a href="#数据访问层，使用-redisTemplate" class="headerlink" title="数据访问层，使用 redisTemplate"></a>数据访问层，使用 redisTemplate</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisBaseDao</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="keyword">protected</span> ValueOperations&lt;String, String&gt; valueOperations;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addValue</span><span class="params">(String key, String value)</span></span>&#123;</span><br><span class="line">        valueOperations.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> valueOperations.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单元测试用例"><a href="#单元测试用例" class="headerlink" title="单元测试用例"></a>单元测试用例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootRedisApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger logger= LoggerFactory.getLogger(SpringbootRedisApplicationTests.class);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisDao redisDao;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisDao.setKey(<span class="string">"key"</span>,<span class="string">"hello"</span>);</span><br><span class="line">        logger.info(redisDao.getValue(<span class="string">"key"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot 整合 eql 和 mybatis]]></title>
      <url>/SpringBoot-eql-or-mybatis.html</url>
      <content type="html"><![CDATA[<p>归纳总结 <code>SpringBoot</code> 整合 <code>mybatis</code> 和 <code>eql</code>,并访问数据库。<code>mybatis</code> 框架已经十分流行了,<a href="https://github.com/bingoohuang/eql" target="_blank" rel="noopener"><code>eql</code> 框架</a>是一个简单，轻量的数据持久层的框架,可以用于代替ibatis/mybatis。<br><a id="more"></a> </p>
<h2 id="SpringBoot-整合-eql"><a href="#SpringBoot-整合-eql" class="headerlink" title="SpringBoot 整合 eql"></a>SpringBoot 整合 eql</h2><h3 id="引入-maven-依赖"><a href="#引入-maven-依赖" class="headerlink" title="引入 maven 依赖"></a>引入 maven 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.bingoohuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="eql-相关配置"><a href="#eql-相关配置" class="headerlink" title="eql 相关配置"></a>eql 相关配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本属性 ip port database url、user、password</span></span><br><span class="line"><span class="string">url=jdbc:oracle:thin:@ip:port:database</span></span><br><span class="line"><span class="string">driver=oracle.jdbc.driver.OracleDriver</span></span><br><span class="line"><span class="string">user=username</span></span><br><span class="line"><span class="string">username=username</span></span><br><span class="line"><span class="string">password=passwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置初始化大小、最小、最大</span></span><br><span class="line"><span class="string">initialSize=1</span></span><br><span class="line"><span class="string">minIdle=1</span></span><br><span class="line"><span class="string">maxActive=5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line"><span class="string">maxWait=60000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line"><span class="string">timeBetweenEvictionRunsMillis=60000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line"><span class="string">minEvictableIdleTimeMillis=300000</span></span><br><span class="line"></span><br><span class="line"><span class="string">validationQuery=SELECT</span> <span class="string">'x'</span> <span class="string">FROM</span> <span class="string">dual</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字段加解密 配置 start</span></span><br><span class="line"><span class="string">connection.impl=org.n3r.eql.dbfieldcryptor.EqlSecretFieldsConnectionProxy</span></span><br><span class="line"><span class="string">proxy.connection.impl=org.n3r.eql.trans.EqlDruidConnection</span></span><br><span class="line"></span><br><span class="line"><span class="string">secret.fields.configable.impl=org.n3r.eql.dbfieldcryptor.refer.ReferSecretFieldsConfig</span></span><br><span class="line"><span class="string">sensitive.cryptor.impl=org.n3r.eql.dbfieldcryptor.refer.ReferSensitiveCryptor</span></span><br><span class="line"><span class="string">securetDatabaseFields.password=Ed23d930EEFfb1B8</span></span><br><span class="line"><span class="comment"># 用于配置数据库表中需要加解密的字段，和存储过程中需要加解密的参数序号</span></span><br><span class="line"><span class="comment"># 1.各个字段用空格分隔</span></span><br><span class="line"><span class="comment"># 2.数据库字段：表名.字段名</span></span><br><span class="line"><span class="comment"># 3.存储过程：存储过程名.参数的序号(序号从1开始)</span></span><br><span class="line"><span class="comment"># 注意: 每行行末续行符反斜杠前添加至少一个空白字符（后面续行的前导空白会被自动去除）</span></span><br><span class="line"><span class="string">securetDatabaseFields.define=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字段加解密 配置 end</span></span><br></pre></td></tr></table></figure>
<h3 id="在数据持久层使用"><a href="#在数据持久层使用" class="headerlink" title="在数据持久层使用"></a>在数据持久层使用</h3><p>在java代码中指明要执行的 <code>sql</code> 的<strong>id</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.n3r.eql.Eql;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by wave_ on 2017/8/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">queryProvinceName</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里指定 eql 查询的id eg:queryNameByCode</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Eql().selectFirst(<span class="string">"queryNameByCode"</span>).params(code).returnType(String.class).execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Map&gt; <span class="title">queryProvinceList</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Eql().select(<span class="string">"queryProvinceList"</span>).returnType(Map.class).execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="创建-eql-文件"><a href="#创建-eql-文件" class="headerlink" title="创建 eql 文件"></a>创建 eql 文件</h3><ul>
<li><p>在 resource 中创建 <code>DemoService.eql</code> 文件, 放在和 <code>DemoService.class</code> 一致的包路径下.<br>目录结构</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>java</span><br><span class="line"><span class="code">    - com</span></span><br><span class="line"><span class="code">        - dao</span></span><br><span class="line"><span class="code">            - DemoService.java</span></span><br><span class="line"><span class="bullet">- </span>resource</span><br><span class="line"><span class="code">    - com</span></span><br><span class="line"><span class="code">        - dao</span></span><br><span class="line"><span class="code">            - DemoService.eql</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以在持久层代码中直接指定eql的位置,就可以不用对应创建文件结构</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.n3r.eql.Eql;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by wave_ on 2017/8/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">queryProvinceName</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里指定 eql 文件所在的位置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Eql().useSqlFile(<span class="string">"com/service/DemoService.eql"</span>).selectFirst(<span class="string">"queryNameByCode"</span>).params(code).returnType(String.class).execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="eql-文件存放-sql"><a href="#eql-文件存放-sql" class="headerlink" title="eql 文件存放 sql"></a>eql 文件存放 sql</h3><p>中括号中是相对应的 sql 的 id.<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- [queryNameByCode]</span><br><span class="line">SELECT PROVINCE<span class="emphasis">_CODE, PROVINCE_</span>NAME FROM TF<span class="emphasis">_M_</span>PROVINCE WHERE PROVINCE_CODE = ##</span><br><span class="line"></span><br><span class="line">-- [queryProvinceList]</span><br><span class="line">SELECT PROVINCE<span class="emphasis">_CODE, PROVINCE_</span>NAME FROM TF<span class="emphasis">_M_</span>PROVINCE ORDER BY PROVINCE_CODE</span><br></pre></td></tr></table></figure></p>
<p>这样通过持久层代码通过 Eql 指定要调用的 sql 的 id,然后把相应的 sql 语句写在相应的 eql 文件中即可。</p>
<h2 id="SpringBoot-整合-mybatis"><a href="#SpringBoot-整合-mybatis" class="headerlink" title="SpringBoot 整合 mybatis"></a>SpringBoot 整合 mybatis</h2><h3 id="引入-maven-依赖-1"><a href="#引入-maven-依赖-1" class="headerlink" title="引入 maven 依赖"></a>引入 maven 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mysql 连接类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 连接池类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>mybatis-spring-boot-starter依赖中存在spring-boot-starter-jdbc</p>
<h3 id="在配置文件中配置数据源"><a href="#在配置文件中配置数据源" class="headerlink" title="在配置文件中配置数据源"></a>在配置文件中配置数据源</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://localhost:3306/hello</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="string">spring.datasource.password=moma</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<h3 id="通过注解的方式使用-mybatis"><a href="#通过注解的方式使用-mybatis" class="headerlink" title="通过注解的方式使用 mybatis"></a>通过注解的方式使用 mybatis</h3><p>在 DAO 中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthorMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into account(name, money) values(#&#123;name&#125;, #&#123;money&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"money"</span>)</span> <span class="keyword">double</span> money)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update account set name = #&#123;name&#125;, money = #&#123;money&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"money"</span>)</span> <span class="keyword">double</span> money, @<span class="title">Param</span><span class="params">(<span class="string">"id"</span>)</span> <span class="keyword">int</span>  id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from account where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot 整合JdbcTemplate 访问 MySQL 数据库]]></title>
      <url>/springboot-JdbcTemplate-mysql.html</url>
      <content type="html"><![CDATA[<p>归纳总结 <code>SpringBoot</code> 使用 <code>JdbcTemplate</code> 访问数据源的使用场景。<br><a id="more"></a> </p>
<h2 id="添加-maven-依赖"><a href="#添加-maven-依赖" class="headerlink" title="添加 maven 依赖"></a>添加 maven 依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加 jdbc 的依赖 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mysql 连接类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 连接池类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="配置文件中配置相关信息"><a href="#配置文件中配置相关信息" class="headerlink" title="配置文件中配置相关信息"></a>配置文件中配置相关信息</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="string">spring.datasource.password=moma</span></span><br></pre></td></tr></table></figure>
<h2 id="然后在数据持久层-Dao-使用即可"><a href="#然后在数据持久层-Dao-使用即可" class="headerlink" title="然后在数据持久层(Dao)使用即可"></a>然后在数据持久层(Dao)使用即可</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> botaogou@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-01-11 15:15</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemoDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(String str,String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"insert into account(title, code) values(?, ?)"</span>, str,code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[构建第一个SpringBoot工程]]></title>
      <url>/build-first-springBoot-project.html</url>
      <content type="html"><![CDATA[<p>  学习和使用 <code>SpringBoot</code> 有一段时间了,现在开始陆陆续续会总结归纳 SpringBoot 学习中遇到的相关知识点。<br><a id="more"></a> </p>
<h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><p>设计目的是用来简化新Spring应用的初始搭建以及开发过程。<br>为Spring生态系统提供了一种固定的、约定优于配置风格的框架。<br>开箱即用，没有代码生成，也无需XML配置。同时也可以修改默认值来满足特定的需求。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol>
<li>jdk1.8+</li>
<li>maven 3.0+</li>
<li>IDEA</li>
</ol>
<h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>打开 IDEA</span><br><span class="line"><span class="bullet">- </span>New Project</span><br><span class="line"><span class="bullet">- </span>Spring Initializr =&gt; next</span><br><span class="line"><span class="bullet">- </span>填写 group、artifact -&gt;钩上web(开启web功能）</span><br><span class="line"><span class="bullet">- </span>next</span><br></pre></td></tr></table></figure>
<h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>src</span><br><span class="line"><span class="code">    -main</span></span><br><span class="line"><span class="code">        -java</span></span><br><span class="line"><span class="code">            -package</span></span><br><span class="line"><span class="code">                -SpringbootApplication</span></span><br><span class="line"><span class="code">        -resouces</span></span><br><span class="line"><span class="code">            - statics</span></span><br><span class="line"><span class="code">            - templates</span></span><br><span class="line"><span class="code">            - application.yml</span></span><br><span class="line"><span class="code">    -test</span></span><br><span class="line"><span class="bullet">- </span>pom</span><br></pre></td></tr></table></figure>
<ul>
<li>pom文件为基本的依赖管理文件</li>
<li>resouces 资源文件 <ul>
<li>statics 静态资源</li>
<li>templates 模板资源</li>
<li>application.yml 配置文件</li>
</ul>
</li>
<li>SpringbootApplication 程序的入口&amp;启动类</li>
</ul>
<h2 id="pom-xml-配置"><a href="#pom-xml-配置" class="headerlink" title="pom.xml 配置"></a>pom.xml 配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.forezp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-first-application<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-first-application<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="测试-Demo"><a href="#测试-Demo" class="headerlink" title="测试 Demo"></a>测试 Demo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  测试用例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> botaogou@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-01-05 11:32</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function">String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后启动 <code>SpringbootApplication</code> 的 main 方法, 然后打开游览器<code>localhost:8080/hello</code>,浏览器显示 </p>
<blockquote>
<p>Hello World!</p>
</blockquote>
<p>测试通过~</p>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何在IDEA启动多个Spring Boot工程实例]]></title>
      <url>/how-to-start-multiple-spring-boot-instances-with-idea.html</url>
      <content type="html"><![CDATA[<h2 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h2><p>在 IDEA 上点击 <code>Edit Configuration</code><br><a id="more"></a><br><img src="/img/aaaaa.png" alt="Edit"></p>
<h2 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h2><p>打开配置后，将默认的 <code>Single instance only</code> (单实例)的钩去掉<br><img src="/img/bbbbbb.png" alt="cancel"></p>
<h2 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h2><p>通过修改 application 文件的<strong>server.port</strong> 的端口，启动。<br>多个实例，需要多个端口，分别启动。</p>
]]></content>
      
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> IDEA </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这一次，彻底弄懂 JavaScript 执行机制]]></title>
      <url>/js-execute-process.html</url>
      <content type="html"><![CDATA[<p>推荐一篇介绍<code>JavaScript</code> 执行机制的文章。</p>
<blockquote>
<p>Reference:<br><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> front-end </tag>
            
            <tag> javaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring 事务管理]]></title>
      <url>/spring-transaction.html</url>
      <content type="html"><![CDATA[<h2 id="事务回顾"><a href="#事务回顾" class="headerlink" title="事务回顾"></a>事务回顾</h2><h3 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h3><p>  事务指的是逻辑上的一组操作，这组操作要么全部成功，要么全部失败。</p>
<h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><ol>
<li>原子性：是指事务是一个不可分割的工作单位，事务中的操作要么都发送，要么都不发生。</li>
<li>一致性：指事务前后数据的完整性必须保持一致。</li>
<li>隔离性：隔离性指多个用户并发访问数据库时，一个用户的事务不能被其他用户的事务所干扰，多个并发事务之间数据要互相隔离。</li>
<li>持久性：是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，即使数据库发送故障也不应该对其有任何影响。<a id="more"></a> 
</li>
</ol>
<h2 id="事务-API-介绍"><a href="#事务-API-介绍" class="headerlink" title="事务 API 介绍"></a>事务 API 介绍</h2><h3 id="PlatformTransactionManager-事务管理器"><a href="#PlatformTransactionManager-事务管理器" class="headerlink" title="PlatformTransactionManager 事务管理器"></a>PlatformTransactionManager 事务管理器</h3><p><img src="/img/59f136eb0001ab7512800720.jpg" alt="spring 事务管理器"></p>
<h3 id="TransactionDefinition-事务定义信息（隔离、传播、超时、只读）"><a href="#TransactionDefinition-事务定义信息（隔离、传播、超时、只读）" class="headerlink" title="TransactionDefinition 事务定义信息（隔离、传播、超时、只读）"></a>TransactionDefinition 事务定义信息（隔离、传播、超时、只读）</h3><p>如果不考虑隔离性，会引发如下的安全问题：</p>
<ol>
<li>脏读：一个事务读取了另一个事务改写但还未提交的数据，如果这些数据被回滚，则读到的数据是无效的。</li>
<li>不可重复读：在同一个事务中，多次读取同一数据返回的结果有所不同。</li>
<li>幻读：一个事务读取了几行记录后，另一个事务插入一些记录，幻读就发生了。再后来的查询中，第一个事务就会发现有些原来没有的记录。</li>
</ol>
<p>隔离级别的出现就是为了解决以上问题的。</p>
<p>数据库提供的事务的隔离级别(四种)：</p>
<ol>
<li>READ_UNCOMMITED：允许你读取还未提交的改变了的数据，可能导致脏，幻，不可重复读。</li>
<li>READ_COMMINTED: 允许在并发事务已经提交后读取，可防止脏读，但幻读和不可重复读还是有可能发生。</li>
<li>REPEATABLE_READ: 对相同字段的多次读取是一致的，除非数据被事务本身改变，可防止脏读，不可重复读，但幻读仍有可能出现。</li>
<li>SERILIZABLE: 完全服从ACID的隔离级别，确保不发生脏读，幻读，不可重复读，这在所有的隔离级别中是最慢的，它是典型的完全通过锁定在事务中涉及的数据表来完成的。</li>
</ol>
<p><strong>除了以上的数据库提供的事务隔离级别，spring提供了Default隔离级别，该级别表示spring使用后端数据库默认的隔离级别。</strong></p>
<p><code>MySQL</code>默认事务隔离级别：<code>REPATABLE_READ</code>(可能出现幻读)<br><code>Oracle</code>默认：<code>READ_COMMITTED</code>(可能出现不可重复读和幻读)</p>
<h3 id="TransactionDefinition-定义事务传播行为"><a href="#TransactionDefinition-定义事务传播行为" class="headerlink" title="TransactionDefinition 定义事务传播行为"></a>TransactionDefinition 定义事务传播行为</h3><p>事务的传播行为：主要是解决业务层方法之间的相互调用的问题。<br>Spring定义了7种事务的传播行为，可以分为3类：</p>
<ol>
<li>是让整个业务处于一个事务当中<br><code>PROPAGATION_REQUIRED</code>,<code>PROPAGATION_SUPPORTS</code>,<code>PROPAGATION_MANDATORY</code></li>
<li>是让业务不处于同一个事务当中<br><code>PROPAGATION_REQUIRES_NEW</code>,<code>PROPAGATION_NOT_SUPPORTED</code>,<code>PROPAGATION_NEVER</code></li>
<li>是嵌套事务的执行，嵌套事务可以在第一个事务执行完毕时设置一个保存点，然后第二个业务操作发生异常时可以选择回滚到保存点，也可以回滚到初始状态。</li>
</ol>
<p><img src="/img/59eee1ff0001bb2c12800720.jpg" alt="spring 事务传播行为"></p>
<h3 id="TransactionStatus-事务具体运行状态"><a href="#TransactionStatus-事务具体运行状态" class="headerlink" title="TransactionStatus 事务具体运行状态"></a>TransactionStatus 事务具体运行状态</h3><p><code>TransactionStatus</code>接口用来记录事务的状态,该接口定义了一组方法,用来获取或判断事务的相应状态信息.<br>平台事务管理器(PlatformTransactionManager)会根据 TransactionDefinition 中定义的事务信息(包括隔离级别、传播行为)来进行事务的管理,在管理的过程中事务可能产生了保存点或事务是新的事务等情况,那么这些信息都会记录在 TransactionStatus 的对象中.</p>
<h2 id="编程式事务管理"><a href="#编程式事务管理" class="headerlink" title="编程式事务管理"></a>编程式事务管理</h2><p>为了简化设置事务的代码量,提供了TransactionTemplate事务管理模版类.在哪个地方需要用到事务,那么就在哪个地方注入这个模版.真正进行事务管理是由事务管理器来完成.</p>
<ol>
<li>配置事务管理器：TranscationManager，一般在不适用Hibernate的情况下，使用DataSourceTranscationManager,需要注入数据源</li>
<li>配置事务管理器的事务管理的模板TransactionTemplate依赖于DataSourceTransactionManager数据源事务管理器(PlatformTransactionManager平台事务管理器的实现类).</li>
<li>配置文件中引入TransactionTemplate类,把数据源事务管理器对象注入到使用的事务的service层的类中，作为该bean的transactionManager属性.DataSourceTransactionManager数据源管理器又依赖于DataSource.因此把数据源对象注入到数据源管理器的dataSource属性中.</li>
<li>在service中，要定义一个TransactionTemplate的成员变量,并生成set()方法.因此要把TransactionTemplate的bean注入到Service实体类中的TransactionTemplate类型的属性中。<br>执行transcationTemplate提供的execute方法，方法中进行事务的操作，这个方法中有个参数，transcationcallback，如果事务出现回滚，将会调用这个参数进行操作。如果匿名内部类要拿到外层包裹它的方法的参数，那么要将参数修饰成final</li>
</ol>
<p>这里调用模板方法将两个dao操作放在一个事务里。</p>
<h2 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h2><h3 id="基于-TransactionProxyFactoryBean-的声明式事务管理（创建代理对象）"><a href="#基于-TransactionProxyFactoryBean-的声明式事务管理（创建代理对象）" class="headerlink" title="基于 TransactionProxyFactoryBean 的声明式事务管理（创建代理对象）"></a>基于 TransactionProxyFactoryBean 的声明式事务管理（创建代理对象）</h3><p><img src="/img/598c19f10001acc112800722.jpg" alt="TransactionProxyFactoryBean"></p>
<h3 id="基于-AspectJ-的XML方式"><a href="#基于-AspectJ-的XML方式" class="headerlink" title="基于 AspectJ 的XML方式"></a>基于 AspectJ 的XML方式</h3><p><img src="/img/5a4b26d200018a0512800722.jpg" alt="AspectJ"></p>
<h3 id="基于注解的方式"><a href="#基于注解的方式" class="headerlink" title="基于注解的方式"></a>基于注解的方式</h3><p><img src="/img/59d8d3430001932d12800722.jpg" alt="zhujie"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring将事务管理分成了两类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* 编程式事务管理</span><br><span class="line">	* 手动编写代码进行事务管理.(很少使用)</span><br><span class="line">* 声明式事务管理:</span><br><span class="line">	* 基于TransactionProxyFactoryBean的方式.(很少使用)</span><br><span class="line">		* 需要为每个进行事务管理的类,配置一个TransactionProxyFactoryBean进行增强.</span><br><span class="line">	* 基于AspectJ的XML方式.(经常使用)</span><br><span class="line">		* 一旦配置好之后,类上不需要添加任何东西</span><br><span class="line">	* 基于注解方式.(经常使用)</span><br><span class="line">		* 配置简单,需要在业务层上添加一个@Transactional的注解.</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/wave-gbt/spring-transaction-demo" target="_blank" rel="noopener">案例代码</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 遇见数据采集]]></title>
      <url>/python-data-collection.html</url>
      <content type="html"><![CDATA[<h2 id="Python-开发环境"><a href="#Python-开发环境" class="headerlink" title="Python 开发环境"></a>Python 开发环境</h2><h3 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h3><ul>
<li>python<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>urllib</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from urllib.request import urlopen</span><br></pre></td></tr></table></figure>
</li>
<li><p>BeautifulSoup4</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装-BeautifulSoup4"><a href="#安装-BeautifulSoup4" class="headerlink" title="安装 BeautifulSoup4"></a>安装 BeautifulSoup4</h3><ul>
<li><p>Linux：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-bs4</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mac:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo easy_install pip    pip install beautifulsoup4</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4   pip3 install beautifulsoup4</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="urllib-和-BeautifulSoup"><a href="#urllib-和-BeautifulSoup" class="headerlink" title="urllib 和 BeautifulSoup"></a>urllib 和 BeautifulSoup</h2><h3 id="urllib-基本用法"><a href="#urllib-基本用法" class="headerlink" title="urllib 基本用法"></a>urllib 基本用法</h3><ul>
<li><p>使用步骤<br><img src="/img/urllob.jpg" alt="urllib 使用步骤"></p>
</li>
<li><p>模拟浏览器<br><img src="/img/monilil.jpg" alt="携带User-Agent"></p>
</li>
</ul>
<h3 id="使用-urllib-发送-post-请求"><a href="#使用-urllib-发送-post-请求" class="headerlink" title="使用 urllib 发送 post 请求"></a>使用 urllib 发送 post 请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from urllib.request import urlopen # 引入urlopen 模块</span><br><span class="line">from urllib.request import Request # 引入urlrequest 模块</span><br><span class="line">from urllib import parse # 引入parse 模块</span><br><span class="line"></span><br><span class="line">req = Request(&quot;http://www.thsrc.com.tw/tw/TimeTable/SearchResult&quot;)</span><br><span class="line"></span><br><span class="line">postDate = parse.urlencode([</span><br><span class="line">(&quot;StartStation&quot;, &quot;2f940836-cedc-41ef-8e28-c2336ac8fe68&quot;),</span><br><span class="line">(&quot;EndStation&quot;, &quot;977abb69-413a-4ccf-a109-0272c24fd490&quot;),</span><br><span class="line">(&quot;SearchDate&quot;, &quot;2016/08/31&quot;),</span><br><span class="line">(&quot;SearchTime&quot;, &quot;21:30&quot;),</span><br><span class="line">(&quot;SearchWay&quot;, &quot;DepartureInMandarin&quot;)</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line">req.add_header(&quot;Origin&quot;, &quot;http://www.thsrc.com.tw&quot;)</span><br><span class="line">req.add_header(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 6.1; rv:48.0) Gecko/20100101 Firefox/48.0)&quot;)</span><br><span class="line">resp = urlopen(req,data=postDate.encode(&quot;utf-8&quot;))</span><br><span class="line"></span><br><span class="line">print(resp.read().decode(&quot;utf-8&quot;))</span><br></pre></td></tr></table></figure>
<h3 id="BeautifulSoup-简介-amp-使用"><a href="#BeautifulSoup-简介-amp-使用" class="headerlink" title="BeautifulSoup 简介 &amp; 使用"></a>BeautifulSoup 简介 &amp; 使用</h3><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="noopener">官方文档</a></p>
<p><strong>注意：</strong> beautifulsoup.findAll返回的是列表而不是字符串，应该用for循环来读取列表</p>
<h3 id="获取维基百科词条信息"><a href="#获取维基百科词条信息" class="headerlink" title="获取维基百科词条信息"></a>获取维基百科词条信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from urllib.request import urlopen</span><br><span class="line">from bs4 import BeautifulSoup as bs</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">resp = urlopen(&quot;https://en.wikipedia.org/wiki/Main_Page&quot;).read().decode(&quot;utf-8&quot;)</span><br><span class="line">soup = bs(resp,&quot;html.parser&quot;)</span><br><span class="line">listUrls = soup.findAll(&quot;a&quot;, herf=re.compile(&quot;^/wiki/&quot;))</span><br><span class="line">for url in listUrls:</span><br><span class="line">    if not re.search(&quot;\.(jpg|JPG)$&quot;,url[&quot;href&quot;]):</span><br><span class="line">        print(url.get_text(),&quot;:&quot;,&quot;https://en.wikipedia.org&quot;+url[&quot;herf&quot;])</span><br></pre></td></tr></table></figure>
<h2 id="存储数据到-MySQL"><a href="#存储数据到-MySQL" class="headerlink" title="存储数据到 MySQL"></a>存储数据到 MySQL</h2><h3 id="存储数据到-MySQL-1"><a href="#存储数据到-MySQL-1" class="headerlink" title="存储数据到 MySQL"></a>存储数据到 MySQL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import urllib2</span><br><span class="line">import re</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">resp = urllib2.urlopen(&quot;http://baike.so.com/doc/1790119-1892991.html&quot;).read().decode(&quot;utf-8&quot;)</span><br><span class="line">soup = BeautifulSoup(resp, &quot;html.parser&quot;)</span><br><span class="line">listUrls = soup.findAll(&quot;a&quot;, href = re.compile(&quot;^/doc/&quot;))</span><br><span class="line">for url in listUrls:</span><br><span class="line">    print url.get_text(), &quot;http://baike.so.com&quot;+url[&quot;href&quot;]</span><br><span class="line">connection = pymysql.connect(host=&apos;localhost&apos;,</span><br><span class="line">                             user=&apos;root&apos;,</span><br><span class="line">                             password=&apos;&apos;,</span><br><span class="line">                             db=&apos;360mysql&apos;,</span><br><span class="line">                             charset=&apos;utf8&apos;)</span><br><span class="line">try:</span><br><span class="line">    with connection.cursor() as cursor:</span><br><span class="line">        for url in listUrls:</span><br><span class="line">            sql = &quot;insert into `urls`(`name`,`url`)values(%s,%s)&quot;</span><br><span class="line">            cursor.execute(sql,(url.get_text(),&quot;http://baike.so.com&quot;+url[&quot;href&quot;]))</span><br><span class="line">            connection.commit();</span><br><span class="line">finally:</span><br><span class="line">    connection.close();</span><br></pre></td></tr></table></figure>
<h3 id="读取-MySQL-数据"><a href="#读取-MySQL-数据" class="headerlink" title="读取 MySQL 数据"></a>读取 MySQL 数据</h3><ul>
<li>得到总记录数： cursor.execute()</li>
<li>查询下一行： cursor.fetchone()</li>
<li>得到指定大小： cursor.fetchmany(size=None)</li>
<li>得到全部： cursor.fetchall()</li>
<li>关闭: connection.close()</li>
</ul>
<h2 id="常见文档读取（PDF）"><a href="#常见文档读取（PDF）" class="headerlink" title="常见文档读取（PDF）"></a>常见文档读取（PDF）</h2><h3 id="读取-pdf"><a href="#读取-pdf" class="headerlink" title="读取 pdf"></a>读取 pdf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">from pdfminer.pdfparser import PDFParser,PDFDocument</span><br><span class="line">from pdfminer.pdfinterp import PDFResourceManager,PDFPageInterpreter</span><br><span class="line">from pdfminer.pdfdevice import PDFDevice</span><br><span class="line">from pdfminer.layout import LAParams</span><br><span class="line">from pdfminer.converter import PDFPageAggregator</span><br><span class="line"></span><br><span class="line">fp = open(&quot;1.pdf&quot;,&quot;rb&quot;) # 打开对象，使用二进制方式</span><br><span class="line">parser = PDFParser(fp) # 创建对应的解释器，传入文件对象，可理解为解释文件</span><br><span class="line">doc = PDFDocument() # 创建文档对象</span><br><span class="line">parser.set_document(doc) # 两步方法将fp的解释器和doc文档关联起来</span><br><span class="line">doc.set_parser(parser) # 两步方法将fp的解释器和doc文档关联起来</span><br><span class="line">doc.initialize() # 关联了解释器的文档，进行初始化</span><br><span class="line"></span><br><span class="line">resource = PDFResourceManager() # 创建pdf的资源管理器</span><br><span class="line">laparams = LAParams() # 创建pdf的参数分析器</span><br><span class="line">device = PDFPageAggregator(resource,laparams=laparams) # 使用聚合器将资源管理器和参数分析器聚合在一起</span><br><span class="line">interpreter = PDFPageInterpreter(resource,device) # 创建页面解析器，将资源管理器和聚合其结合在一起</span><br><span class="line"></span><br><span class="line">for page in doc.get_pages(): # 获取文档对象的每一页</span><br><span class="line">    interpreter.process_page(page) # 使用页面解析器解析每一页</span><br><span class="line">    layout = device.get_result() # 使用聚合其获取解析的结果</span><br><span class="line">    for out in layout: # 遍历获取的结果</span><br><span class="line">        print(out.get_text()) # 输出</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 操作 MySQL 数据库]]></title>
      <url>/python-operations-MySQL-Database.html</url>
      <content type="html"><![CDATA[<p>学习目标：能够开发完整的数据库操作程序。</p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="Python-DB-API"><a href="#Python-DB-API" class="headerlink" title="Python DB API"></a>Python DB API</h3><ul>
<li>是 Python 访问数据库的统一接口规范。<a href="https://www.python.org/dev/peps/pep-0249" target="_blank" rel="noopener">官方接口说明</a><a id="more"></a></li>
<li><p>Python DB API 包含的内容<br><img src="/img/pythondb1.jpg" alt="Python DB API 包含的内容"></p>
</li>
<li><p>Python MySQL 开发环境<br><img src="/img/pythondb2.jpg" alt="Python MySQL 开发环境"></p>
</li>
</ul>
<h2 id="Python-操作数据库对象"><a href="#Python-操作数据库对象" class="headerlink" title="Python 操作数据库对象"></a>Python 操作数据库对象</h2><h3 id="Python-数据库连接对象-connection"><a href="#Python-数据库连接对象-connection" class="headerlink" title="Python-数据库连接对象 connection"></a>Python-数据库连接对象 connection</h3><ul>
<li>连接对象：建立 <code>Python</code> 客户端与数据库的网络连接</li>
<li><p>创建方法：MySQLdb.Connect(参数)</p>
<ul>
<li>host //MySQL 服务器地址</li>
<li>port //服务器端口号</li>
<li>user //用户名</li>
<li>passwd //密码</li>
<li>db //数据库名称</li>
<li>charset //连接编码</li>
</ul>
</li>
<li><p><code>connection</code> 对象支持的方法：</p>
<ul>
<li>cursor()  //使用该连接创建并返回游标</li>
<li>commit()  //提交当前事务</li>
<li>rollback() //回滚当前事务</li>
<li>close()   //关闭连接 </li>
</ul>
</li>
</ul>
<h3 id="Python-游标对象-cursor"><a href="#Python-游标对象-cursor" class="headerlink" title="Python-游标对象 cursor"></a>Python-游标对象 cursor</h3><ul>
<li>游标对象：用于执行查询和获取对象</li>
<li><code>cursor</code> 对象支持的方法：<ul>
<li>execute(op[,args])  //执行一个数据库查询和命令</li>
<li>fetchone()  //取得结果集的下一行</li>
<li>fetchmany(size)  //获取结果集的剩下的所有行</li>
<li>rowcount  //最近一次excute返回数据的行数和影响行数</li>
<li>close()  //关闭游标对象</li>
</ul>
</li>
</ul>
<h2 id="Python-增删改查数据库"><a href="#Python-增删改查数据库" class="headerlink" title="Python 增删改查数据库"></a>Python 增删改查数据库</h2><h3 id="实例演示-select-查询数据"><a href="#实例演示-select-查询数据" class="headerlink" title="实例演示 select 查询数据"></a>实例演示 select 查询数据</h3><ul>
<li>查询流程<br><img src="/img/5a1f7bb40001294a12800722.jpg" alt="select查询数据流程"></li>
<li>实例代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import MySQLdb</span><br><span class="line"></span><br><span class="line">conn = MySQLdb.Connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">port=3306,user=&apos;root&apos;,passwd=&apos;123456&apos;,db=&apos;IMOOC&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">sql=&quot;select * from user&quot;</span><br><span class="line">cur.execute(sql)</span><br><span class="line"></span><br><span class="line">print cur.rowcount</span><br><span class="line"></span><br><span class="line">rs=cur.fetchone()</span><br><span class="line">print rs</span><br><span class="line"></span><br><span class="line">rs=cur.fetchmany(3)</span><br><span class="line">print rs</span><br><span class="line"></span><br><span class="line">rs=cur.fetchall()</span><br><span class="line">print rs</span><br><span class="line">for row in rs:</span><br><span class="line">    print &apos;userid=%d,username=%s&apos;%row</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="实例演示-insert-update-delete-更新数据库"><a href="#实例演示-insert-update-delete-更新数据库" class="headerlink" title="实例演示 insert/update/delete 更新数据库"></a>实例演示 insert/update/delete 更新数据库</h3><ul>
<li><p>执行流程<br><img src="/img/5a3a2af30001ebe212800722.jpg" alt="执行流程"></p>
</li>
<li><p>实例代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sql_insert = &apos;insert into stud(userid, username) values(&quot;12&quot;,&quot;name12&quot;)&apos;</span><br><span class="line">sql_upudate = &apos;update stud set username=&quot;name19&quot;  where userid=&quot;9&quot;&apos;</span><br><span class="line">sql_insert = &apos;delete from stud where userid&lt;&quot;3&quot;&apos;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql_insert)</span><br><span class="line">    print cursor.rowcount</span><br><span class="line">    cursor.execute(sql_upudate)</span><br><span class="line">    print cursor.rowcount</span><br><span class="line">    cursor.execute(sql_insert)</span><br><span class="line">    print cursor.rowcount</span><br><span class="line">    </span><br><span class="line">    conn.commit()</span><br><span class="line">except Exception as e:</span><br><span class="line">    print e</span><br><span class="line">    conn.rollback()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="使用-Python-实现实例"><a href="#使用-Python-实现实例" class="headerlink" title="使用 Python 实现实例"></a>使用 Python 实现实例</h2><h3 id="银行转账实例"><a href="#银行转账实例" class="headerlink" title="银行转账实例"></a>银行转账实例</h3><ul>
<li>流程<br><img src="/img/zzlc.jpg" alt="转账流程"></li>
<li>实例代码主方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">if __name__ ==&quot;__main__&quot;:</span><br><span class="line">    source_id = sys.argv[1]</span><br><span class="line">    aim_id=sys.argv[2]</span><br><span class="line">    money=sys.argv[3]</span><br><span class="line">    conn = MySQLdb.Connect(host=&apos;127.0.0.1&apos;,port=3306,user=&apos;root&apos;,passwd=&apos;root&apos;,</span><br><span class="line">                           db=&apos;test&apos;,</span><br><span class="line">                           charset=&apos;utf8&apos;</span><br><span class="line">                           )</span><br><span class="line">    trans = TransMoney(conn)</span><br><span class="line">    </span><br><span class="line">    try:</span><br><span class="line">        trans.changeMoney(source_id,aim_id,money)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print &apos;出现问题&apos;+str(e)</span><br><span class="line">    finally:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ElasticSearch入门]]></title>
      <url>/es-introductory-learning.html</url>
      <content type="html"><![CDATA[<h2 id="ES-简介"><a href="#ES-简介" class="headerlink" title="ES 简介"></a>ES 简介</h2><h3 id="什么是ElasticSearch"><a href="#什么是ElasticSearch" class="headerlink" title="什么是ElasticSearch"></a>什么是ElasticSearch</h3><ol>
<li>基于Apache Lucene 构建的开源搜索引擎</li>
<li>采用java编写，提供简单易用的Restful API</li>
<li>轻松的横向扩展，可支持PB级的结构化或非结构化数据处理<a id="more"></a>
</li>
</ol>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>海量数据分析</li>
<li>站内搜索引擎</li>
<li>数据仓库</li>
</ol>
<h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ol>
<li>IDE工具：IDEA、Eclipse等。</li>
<li>Java JDK1.8</li>
<li>其他依赖 Maven、NodeJs(6.0以上)</li>
</ol>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul>
<li>索引：含有相同属性的文档集合</li>
<li>类型：索引可以定义一个或多个类型，文档必须属于一个类型</li>
<li>文档：文档是可以被索引的基本数据单位</li>
<li>分片：每个索引都有多个分片，每个分片都是一个Lucene索引</li>
<li>备份：拷贝一份分片就完成了分片的备份</li>
</ul>
<p><strong>重点</strong></p>
<ol>
<li>ES的响应是json格式，可读性不是很好，最好再安装一个插件，首推head；</li>
<li>rest提供了很好的restful api，问题是，这些都需要去记忆；</li>
<li>rest的查询功能很强大，前提是需要学习requestBody json的写法，以及记住一些标准字段key，才会被ES解析，进而查询给出结果；</li>
<li>还有ES用于查询的话，关键字怎么定义，分词做么做，很核心</li>
</ol>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="ES-的-API-属性结构"><a href="#ES-的-API-属性结构" class="headerlink" title="ES 的 API 属性结构"></a>ES 的 API 属性结构</h3><ol>
<li>是以 RESTFul API 风格来命名自己的 API 的。</li>
<li>API 基本格式：http://<ip>:<port>/&lt;索引&gt;/&lt;类型&gt;/&lt;文档id&gt;</port></ip></li>
<li>常用 HTTP 动词：GET/PUT/POST/DELETE</li>
</ol>
<h3 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h3><ul>
<li>结构化索引的创建</li>
<li>非结构化索引的创建</li>
</ul>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>通过使用 put 方法向ES发送请求，以json格式的形式传入数据。</p>
<ul>
<li>指定文档 id 插入</li>
<li>自动产生文档 id 插入</li>
</ul>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul>
<li>直接修改文档</li>
<li>脚本修改文档<br>通过 post 方法， api 格式：http://<ip>:<port>/&lt;索引&gt;/&lt;类型&gt;/&lt;文档id&gt;/_update</port></ip></li>
</ul>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>删除文档</li>
<li>删除索引</li>
</ul>
<ol>
<li>通过 delete 方法，api 格式：http://<ip>:<port>/&lt;索引&gt;/&lt;类型&gt;/&lt;文档id&gt;，这样就删除了一个文档。</port></ip></li>
<li>通过 delete 方法，http://<ip>:<port>/&lt;索引&gt;， 这样就删除了一个索引，还可以在head 里通过图形化界面删除。</port></ip></li>
</ol>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ol>
<li>通过 get 方法， api 格式：http://<ip>:<port>/&lt;索引&gt;/&lt;类型&gt;/&lt;文档id&gt;</port></ip></li>
<li><p>条件查询: 通过 post 方法， api 格式：http://<ip>:<port>/&lt;索引&gt;/_search</port></ip></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    // 匹配所有</span><br><span class="line">//    "match_all":&#123;&#125;</span><br><span class="line">// 匹配条件</span><br><span class="line">   "match":&#123;</span><br><span class="line">      "title":"Elastic"</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "sort":[</span><br><span class="line">    &#123;<span class="attr">"publish_date"</span>:&#123;<span class="attr">"order"</span>:<span class="string">"desc"</span>&#125;&#125;</span><br><span class="line">  ],</span><br><span class="line">  // 从哪里返回</span><br><span class="line">  "from":1,</span><br><span class="line">  // 返回几条数据</span><br><span class="line">  "size":4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>聚合查询</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">      <span class="attr">"group_by_word_count"</span>:&#123;</span><br><span class="line">        <span class="attr">"terms"</span>:&#123;</span><br><span class="line">          <span class="attr">"field"</span>:<span class="string">"word_count"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"group_by_publish_date"</span>:&#123;</span><br><span class="line">        <span class="attr">"terms"</span>:&#123;</span><br><span class="line">          <span class="attr">"field"</span>:<span class="string">"publish_date"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><h3 id="自条件查询"><a href="#自条件查询" class="headerlink" title="自条件查询"></a>自条件查询</h3><p>　　特定字段查询所指特定值</p>
<ol>
<li><p>Query context<br>常用查询：</p>
<ul>
<li><p>全文本查询：针对文本类型数据<br>关键词：<code>match</code>,<code>match_phrase</code>,<code>multi_match</code>,<code>query_string</code></p>
</li>
<li><p>字段级别查询：针对结构化数据，如数字、日期等<br>关键词：<code>query</code>,<code>term</code>,<code>range</code></p>
</li>
</ul>
</li>
<li><p>Filter context<br>　　在查询过程中，只判断该文档是否满足条件，只有 Yes 和 No.</p>
<h3 id="复合条件查询"><a href="#复合条件查询" class="headerlink" title="复合条件查询"></a>复合条件查询</h3><p>　　以一定逻辑组合自条件查询<br>常用查询</p>
<ul>
<li><p>固定分数查询</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"constant_score"</span>:&#123;</span><br><span class="line">      <span class="attr">"filter"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>:&#123;</span><br><span class="line">          <span class="attr">"title"</span>:<span class="string">"ElasticSearch"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"boost"</span>:<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>布尔查询</p>
<pre><code class="json">{
<span class="attr">"query"</span>:{
<span class="attr">"bool"</span>:{
 // must 必须满足 与
 "should":[  // 或
   {
     <span class="attr">"match"</span>:{
       <span class="attr">"author"</span>:<span class="string">"aaaa"</span>
     }
   },
   {
     <span class="attr">"mathc"</span>:{
       <span class="attr">"title"</span>:<span class="string">"ElasticSearch"</span>
     }
   }
 ]
}
}
}
</code></pre>
<h2 id="Spring-Boot-集成-Es"><a href="#Spring-Boot-集成-Es" class="headerlink" title="Spring Boot 集成 Es"></a>Spring Boot 集成 Es</h2><blockquote>
<p><a href="https://github.com/rstyro/spring-boot/tree/master/springboot-elasticsearch" target="_blank" rel="noopener">spring-boot-elasticsearch</a></p>
</blockquote>
</li>
</ul>
</li>
</ol>
<p>包含增删改查以及复合查询的实例。</p>
<blockquote>
<p>Reference: </p>
<ul>
<li><a href="https://www.imooc.com/comment/889" target="_blank" rel="noopener">慕课网－ElasticSearch入门</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> ES </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS 进阶篇[转]]]></title>
      <url>/css-advanced.html</url>
      <content type="html"><![CDATA[<h1 id="一、CSS2-高阶知识（常用）"><a href="#一、CSS2-高阶知识（常用）" class="headerlink" title="一、CSS2 高阶知识（常用）"></a>一、CSS2 高阶知识（常用）</h1><h2 id="1-css-优先权"><a href="#1-css-优先权" class="headerlink" title="1. css 优先权"></a>1. css 优先权</h2><p>优先权（从低到高）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">浏览器缺省设置</span><br><span class="line">外部样式表</span><br><span class="line">内部样式表（位于 &lt;head&gt; 标签内部）</span><br><span class="line">内联样式（在 HTML 元素内部）</span><br></pre></td></tr></table></figure></p>
<a id="more"></a> 
<p>因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明：<head><meta name="generator" content="Hexo 3.8.0"> 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。</head></p>
<h2 id="2-背景定位（background-position）"><a href="#2-背景定位（background-position）" class="headerlink" title="2. 背景定位（background-position）"></a>2. 背景定位（background-position）</h2><p> 可以利用 <code>background-position</code> 属性改变图像在背景中的位置。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line"> &#123; </span><br><span class="line"> <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">'/img/bg_03.png'</span>);</span><br><span class="line"> <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line"> <span class="attribute">background-position</span>:<span class="number">50px</span> <span class="number">100px</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-缩进文本-（text-indent）"><a href="#3-缩进文本-（text-indent）" class="headerlink" title="3. 缩进文本 （text-indent）"></a>3. 缩进文本 （text-indent）</h2><p>把 Web 页面上的段落的第一行缩进，这是一种最常用的文本格式化效果。<br>CSS 提供了 text-indent 属性，该属性可以方便地实现文本缩进。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">text-indent</span>: <span class="number">5em</span>;&#125;</span><br></pre></td></tr></table></figure></p>
<p>同时也可用做文本信息隐藏（-99999px）</p>
<h2 id="4-字（单词）间隔-（word-spacing）"><a href="#4-字（单词）间隔-（word-spacing）" class="headerlink" title="4. 字（单词）间隔 （word-spacing）"></a>4. 字（单词）间隔 （word-spacing）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.spread</span> &#123;<span class="attribute">word-spacing</span>: <span class="number">30px</span>;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-字母间隔（letter-spacing）"><a href="#5-字母间隔（letter-spacing）" class="headerlink" title="5. 字母间隔（letter-spacing）"></a>5. 字母间隔（letter-spacing）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">letter-spacing</span>: -<span class="number">2px</span>;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-字符大小写转换（text-transform）"><a href="#6-字符大小写转换（text-transform）" class="headerlink" title="6. 字符大小写转换（text-transform）"></a>6. 字符大小写转换（text-transform）</h2><pre><code>none（默认无操作）
uppercase（全大写）
lowercase（全小写）
capitalize（首字母大写）
</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">text-transform</span>: uppercase;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-处理空白符（white-space）"><a href="#7-处理空白符（white-space）" class="headerlink" title="7. 处理空白符（white-space）"></a>7. 处理空白符（white-space）</h2><h3 id="1-值-nowrap（防止元素中的文本换行）"><a href="#1-值-nowrap（防止元素中的文本换行）" class="headerlink" title="1. 值 nowrap（防止元素中的文本换行）"></a>1. 值 nowrap（防止元素中的文本换行）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">white-space</span>: nowrap;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-单行文本溢出显示-…（text-overflow）"><a href="#2-单行文本溢出显示-…（text-overflow）" class="headerlink" title="2. 单行文本溢出显示 …（text-overflow）"></a>2. 单行文本溢出显示 …（text-overflow）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">	<span class="attribute">white-space</span>: nowrap;</span><br><span class="line">	<span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-table-表格（border-collapse-单一边框）"><a href="#8-table-表格（border-collapse-单一边框）" class="headerlink" title="8. table 表格（border-collapse 单一边框）"></a>8. table 表格（border-collapse 单一边框）</h2><p><code>border-collapse</code> 属性设置是否将表格边框折叠为单一边框：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span>&#123;</span><br><span class="line"> <span class="attribute">border-collapse</span>:collapse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span>,<span class="selector-tag">th</span>, <span class="selector-tag">td</span>&#123;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="9-选择子元素（-gt-）"><a href="#9-选择子元素（-gt-）" class="headerlink" title="9. 选择子元素（&gt;）"></a>9. 选择子元素（&gt;）</h2><p>如果您不希望选择任意的后代元素，而是希望缩小范围，只选择某个元素的子元素，请使用子元素选择器（Child selector）。<br>例如，如果您希望选择只作为 h1 元素子元素的 strong 元素，可以这样写：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &gt; <span class="selector-tag">strong</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个规则会把第一个 h1 下面的两个 strong 元素变为红色，但是第二个 h1 中的 strong 不受影响：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> important.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is <span class="tag">&lt;<span class="name">em</span>&gt;</span>really <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span> important.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="10-选择相邻兄弟-（＋）"><a href="#10-选择相邻兄弟-（＋）" class="headerlink" title="10. 选择相邻兄弟 （＋）"></a>10. 选择相邻兄弟 （＋）</h2><p>如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。<br>例如，如果要增加紧接在 h1 元素后出现的段落的上边距，可以这样写：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;<span class="attribute">margin-top</span>:<span class="number">50px</span>;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="11-伪类-Pseudo-classes"><a href="#11-伪类-Pseudo-classes" class="headerlink" title="11. 伪类 (Pseudo-classes)"></a>11. 伪类 (Pseudo-classes)</h2><p>CSS 伪类用于向某些选择器添加特殊的效果。</p>
<h3 id="1-锚伪类"><a href="#1-锚伪类" class="headerlink" title="1. 锚伪类"></a>1. 锚伪类</h3><p>在支持 CSS 的浏览器中，链接的不同状态都可以不同的方式显示，这些状态包括：活动状态，已被访问状态，未被访问状态，和鼠标悬停状态。</p>
<pre><code>a:link {color: #FF0000}    /* 未访问的链接 */
a:visited {color: #00FF00}    /* 已访问的链接 */
a:hover {color: #FF00FF}    /* 鼠标移动到链接上 */
a:active {color: #0000FF}    /* 选定的链接 */
</code></pre><h3 id="2-CSS2-first-child-伪类（第一个子元素）"><a href="#2-CSS2-first-child-伪类（第一个子元素）" class="headerlink" title="2. CSS2 - :first-child 伪类（第一个子元素）"></a>2. CSS2 - :first-child 伪类（第一个子元素）</h3><p>可以使用 :first-child 伪类来选择元素的第一个子元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span>&#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">font-weight</span><span class="selector-pseudo">:bold</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am a <span class="tag">&lt;<span class="name">em</span>&gt;</span>strong<span class="tag">&lt;/<span class="name">em</span>&gt;</span> man. I am a <span class="tag">&lt;<span class="name">em</span>&gt;</span>strong<span class="tag">&lt;/<span class="name">em</span>&gt;</span> man.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am a <span class="tag">&lt;<span class="name">em</span>&gt;</span>strong<span class="tag">&lt;/<span class="name">em</span>&gt;</span> man. I am a <span class="tag">&lt;<span class="name">em</span>&gt;</span>strong<span class="tag">&lt;/<span class="name">em</span>&gt;</span> man.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-first-line-伪元素（首行）"><a href="#3-first-line-伪元素（首行）" class="headerlink" title="3. :first-line 伪元素（首行）"></a>3. :first-line 伪元素（首行）</h3><p>“first-line” 伪元素用于向文本的首行设置特殊样式。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-line</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:<span class="number">#ff0000</span>;</span><br><span class="line"> <span class="attribute">font-variant</span>:small-caps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>“first-line” 伪元素只能用于块级元素。</p>
<h3 id="4-first-letter-伪元素（首字母）"><a href="#4-first-letter-伪元素（首字母）" class="headerlink" title="4. :first-letter 伪元素（首字母）"></a>4. :first-letter 伪元素（首字母）</h3><p>“first-letter” 伪元素用于向文本的首字母设置特殊样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-letter</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:<span class="number">#ff0000</span>;</span><br><span class="line"> <span class="attribute">font-size</span>:xx-large;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-CSS2-before-伪元素"><a href="#5-CSS2-before-伪元素" class="headerlink" title="5. CSS2 - :before 伪元素"></a>5. CSS2 - :before 伪元素</h3><p>“:before” 伪元素可以在元素的内容前面插入新内容。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>:<span class="built_in">url</span>(logo.gif);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="6-CSS2-after-伪元素"><a href="#6-CSS2-after-伪元素" class="headerlink" title="6. CSS2 - :after 伪元素"></a>6. CSS2 - :after 伪元素</h3><p>“:after” 伪元素可以在元素的内容之后插入新内容。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>:<span class="built_in">url</span>(logo.gif);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="12-使用-margin-属性来水平对齐"><a href="#12-使用-margin-属性来水平对齐" class="headerlink" title="12. 使用 margin 属性来水平对齐"></a>12. 使用 margin 属性来水平对齐</h2><p>可通过将左和右外边距设置为 “auto”，来对齐块元素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">	<span class="attribute">margin-left</span>:auto;</span><br><span class="line">	<span class="attribute">margin-right</span>:auto;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">70%</span>;</span><br><span class="line">	<span class="attribute">background-color</span>:<span class="number">#b0e0e6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="13-改变光标-（cursor-pointer）"><a href="#13-改变光标-（cursor-pointer）" class="headerlink" title="13. 改变光标 （cursor:pointer）"></a>13. 改变光标 （cursor:pointer）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-class">.pointer</span> &#123;<span class="attribute">cursor</span>:pointer;&#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.crosshair</span> &#123;<span class="attribute">cursor</span>:crosshair;&#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.help</span> &#123;<span class="attribute">cursor</span>:help;&#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.wait</span> &#123;<span class="attribute">cursor</span>:wait;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="14-透明度-（opacity）"><a href="#14-透明度-（opacity）" class="headerlink" title="14. 透明度 （opacity）"></a>14. 透明度 （opacity）</h2><p>定义透明效果的 CSS3 属性是 opacity。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">opacity</span>:<span class="number">0.4</span>;</span><br><span class="line">	<span class="attribute">filter</span>:<span class="built_in">alpha</span>(opacity=40); <span class="comment">/* 针对 IE8 以及更早的版本 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>IE9, Firefox, Chrome, Opera 和 Safari 使用属性 opacity 来设定透明度。opacity 属性能够设置的值从 0.0 到 1.0。值越小，越透明。<br>IE8 以及更早的版本使用滤镜 filter:alpha(opacity=x)。x 能够取的值从 0 到 100。值越小，越透明。</p>
<h2 id="15-颜色透明（RGBA）"><a href="#15-颜色透明（RGBA）" class="headerlink" title="15. 颜色透明（RGBA）"></a>15. 颜色透明（RGBA）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.6</span>) ;</span><br></pre></td></tr></table></figure>
<h1 id="二、CSS3-新特性"><a href="#二、CSS3-新特性" class="headerlink" title="二、CSS3 新特性"></a>二、CSS3 新特性</h1><p><strong>CSS3 标准</strong><br>W3C 仍然在对 CSS3 规范进行开发。<br>不过，现代浏览器已经实现了相当多的 CSS3 属性。</p>
<h2 id="１-CSS3-圆角边框（border-radius）"><a href="#１-CSS3-圆角边框（border-radius）" class="headerlink" title="１. CSS3 圆角边框（border-radius）"></a>１. CSS3 圆角边框（border-radius）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#a1a1a1</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>:<span class="number">25px</span>;</span><br><span class="line">	<span class="attribute">-moz-border-radius</span>:<span class="number">25px</span>; <span class="comment">/* 老的 Firefox */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-CSS3-边框阴影（box-shadow）"><a href="#2-CSS3-边框阴影（box-shadow）" class="headerlink" title="2. CSS3 边框阴影（box-shadow）"></a>2. CSS3 边框阴影（box-shadow）</h2><p>语法：box-shadow: h-shadow v-shadow blur spread color inset;<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>:<span class="number">#ff9900</span>;</span><br><span class="line">	<span class="attribute">-moz-box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">#888888</span>; <span class="comment">/* 老的 Firefox */</span></span><br><span class="line">	<span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">#888888</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-CSS3-文本阴影（text-shadow）"><a href="#3-CSS3-文本阴影（text-shadow）" class="headerlink" title="3. CSS3 文本阴影（text-shadow）"></a>3. CSS3 文本阴影（text-shadow）</h2><p>您能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">	<span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-CSS3-自动换行（word-wrap）"><a href="#4-CSS3-自动换行（word-wrap）" class="headerlink" title="4. CSS3 自动换行（word-wrap）"></a>4. CSS3 自动换行（word-wrap）</h2><p>在 CSS3 中，word-wrap 属性允许您允许文本强制文本进行换行 - 即使这意味着会对单词进行拆分。<br>允许对长单词进行拆分，并换行到下一行：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">word-wrap</span>:break-word;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="5-CSS3-字体（-font-face）"><a href="#5-CSS3-字体（-font-face）" class="headerlink" title="5. CSS3 字体（@font-face）"></a>5. CSS3 字体（@font-face）</h2><p><strong>使用您需要的字体</strong><br>在新的 @font-face 规则中，您必须首先定义字体的名称（比如 myFirstFont），然后指向该字体文件。<br>如需为 HTML 元素使用字体，请通过 font-family 属性来引用字体的名称 (myFirstFont)：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">	<span class="attribute">font-family</span>: myFirstFont;</span><br><span class="line">	<span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'Sansation_Light.ttf'</span>),</span><br><span class="line">	<span class="built_in">url</span>(<span class="string">'Sansation_Light.eot'</span>); <span class="comment">/* IE9+ */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">font-family</span>:myFirstFont;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="6-CSS3-2D-转换"><a href="#6-CSS3-2D-转换" class="headerlink" title="6. CSS3 2D 转换"></a>6. CSS3 2D 转换</h2><p>Internet Explorer 10、Firefox 以及 Opera 支持 transform 属性。<br>Chrome 和 Safari 需要前缀 -webkit-。<br>注释：Internet Explorer 9 需要前缀 -ms-。</p>
<p>通过 CSS3 转换，我们能够对元素进行移动、缩放、转动、拉长或拉伸。</p>
<h3 id="1-translate-方法-（位置移动）"><a href="#1-translate-方法-（位置移动）" class="headerlink" title="1. translate()方法 （位置移动）"></a>1. translate()方法 （位置移动）</h3><p>通过 translate() 方法，元素从其当前位置移动，根据给定的 left（x 坐标） 和 top（y 坐标） 位置参数：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translate</span>(50px,100px);</span><br><span class="line">	<span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(50px,100px);	<span class="comment">/* IE 9 */</span></span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(50px,100px);	<span class="comment">/* Safari and Chrome */</span></span><br><span class="line">	<span class="attribute">-o-transform</span>: <span class="built_in">translate</span>(50px,100px);	<span class="comment">/* Opera */</span></span><br><span class="line">	<span class="attribute">-moz-transform</span>: <span class="built_in">translate</span>(50px,100px);	<span class="comment">/* Firefox */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-rotate-方法（顺时针旋转角度）"><a href="#2-rotate-方法（顺时针旋转角度）" class="headerlink" title="2. rotate()方法（顺时针旋转角度）"></a>2. rotate()方法（顺时针旋转角度）</h3><p>通过 rotate() 方法，元素顺时针旋转给定的角度。允许负值，元素将逆时针旋转。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(30deg);</span><br><span class="line">	<span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(30deg);	<span class="comment">/* IE 9 */</span></span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(30deg);	<span class="comment">/* Safari and Chrome */</span></span><br><span class="line">	<span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(30deg);	<span class="comment">/* Opera */</span></span><br><span class="line">	<span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(30deg);	<span class="comment">/* Firefox */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-scale-方法（改变尺寸）"><a href="#3-scale-方法（改变尺寸）" class="headerlink" title="3. scale() 方法（改变尺寸）"></a>3. scale() 方法（改变尺寸）</h3><p>通过 scale() 方法，元素的尺寸会增加或减少，根据给定的宽度（X 轴）和高度（Y 轴）参数：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">scale</span>(2,4);</span><br><span class="line">	<span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(2,4);	<span class="comment">/* IE 9 */</span></span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(2,4);	<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">	<span class="attribute">-o-transform</span>: <span class="built_in">scale</span>(2,4);	<span class="comment">/* Opera */</span></span><br><span class="line">	<span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(2,4);	<span class="comment">/* Firefox */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>值 scale(2,4) 把宽度转换为原始尺寸的 2 倍，把高度转换为原始高度的 4 倍。</p>
<h3 id="4-skew-方法（元素翻转角度）"><a href="#4-skew-方法（元素翻转角度）" class="headerlink" title="4. skew() 方法（元素翻转角度）"></a>4. skew() 方法（元素翻转角度）</h3><p>通过 skew() 方法，元素翻转给定的角度，根据给定的水平线（X 轴）和垂直线（Y 轴）参数：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">skew</span>(30deg,20deg);</span><br><span class="line">	<span class="attribute">-ms-transform</span>: <span class="built_in">skew</span>(30deg,20deg);	<span class="comment">/* IE 9 */</span></span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">skew</span>(30deg,20deg);	<span class="comment">/* Safari and Chrome */</span></span><br><span class="line">	<span class="attribute">-o-transform</span>: <span class="built_in">skew</span>(30deg,20deg);	<span class="comment">/* Opera */</span></span><br><span class="line">	<span class="attribute">-moz-transform</span>: <span class="built_in">skew</span>(30deg,20deg);	<span class="comment">/* Firefox */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>值 skew(30deg,20deg) 围绕 X 轴把元素翻转 30 度，围绕 Y 轴翻转 20 度。</p>
<h3 id="5-matrix-方法（2D-转换方法组合）"><a href="#5-matrix-方法（2D-转换方法组合）" class="headerlink" title="5. matrix() 方法（2D 转换方法组合）"></a>5. matrix() 方法（2D 转换方法组合）</h3><p>matrix() 方法需要六个参数，包含数学函数，允许您：旋转、缩放、移动以及倾斜元素。</p>
<h2 id="7-CSS3-3D-转换"><a href="#7-CSS3-3D-转换" class="headerlink" title="7. CSS3 3D 转换"></a>7. CSS3 3D 转换</h2><p>Internet Explorer 10 和 Firefox 支持 3D 转换。<br>Chrome 和 Safari 需要前缀 -webkit-。<br>Opera 仍然不支持 3D 转换（它只支持 2D 转换）。</p>
<h3 id="1-rotateX-方法（X-轴旋转）"><a href="#1-rotateX-方法（X-轴旋转）" class="headerlink" title="1. rotateX() 方法（X 轴旋转）"></a>1. rotateX() 方法（X 轴旋转）</h3><p>通过 rotateX() 方法，元素围绕其 X 轴以给定的度数进行旋转。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotateX</span>(120deg);</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotateX</span>(120deg);	<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">	<span class="attribute">-moz-transform</span>: <span class="built_in">rotateX</span>(120deg);	<span class="comment">/* Firefox */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-rotateY-方法（Y-轴旋转）"><a href="#2-rotateY-方法（Y-轴旋转）" class="headerlink" title="2. rotateY() 方法（Y 轴旋转）"></a>2. rotateY() 方法（Y 轴旋转）</h3><p>通过 rotateY() 方法，元素围绕其 Y 轴以给定的度数进行旋转。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(130deg);</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotateY</span>(130deg);	<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">	<span class="attribute">-moz-transform</span>: <span class="built_in">rotateY</span>(130deg);	<span class="comment">/* Firefox */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="8-CSS3-过渡（transition）"><a href="#8-CSS3-过渡（transition）" class="headerlink" title="8. CSS3 过渡（transition）"></a>8. CSS3 过渡（transition）</h2><p>CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。</p>
<h3 id="1-transition-width"><a href="#1-transition-width" class="headerlink" title="1. transition: width"></a>1. transition: width</h3><p>应用于宽度属性的过渡效果，时长为 2 秒：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">transition</span>: width <span class="number">2s</span>;</span><br><span class="line">	<span class="attribute">-moz-transition</span>: width <span class="number">2s</span>;	<span class="comment">/* Firefox 4 */</span></span><br><span class="line">	<span class="attribute">-webkit-transition</span>: width <span class="number">2s</span>;	<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">	<span class="attribute">-o-transition</span>: width <span class="number">2s</span>;	<span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-width-2s-height-2s-transform-2s（多项改变）"><a href="#2-width-2s-height-2s-transform-2s（多项改变）" class="headerlink" title="2. width 2s, height 2s, transform 2s（多项改变）"></a>2. width 2s, height 2s, transform 2s（多项改变）</h3><p>如需向多个样式添加过渡效果，请添加多个属性，由逗号隔开：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">transition</span>: width <span class="number">2s</span>, height <span class="number">2s</span>, transform <span class="number">2s</span>;</span><br><span class="line">	<span class="attribute">-moz-transition</span>: width <span class="number">2s</span>, height <span class="number">2s</span>, -moz-transform <span class="number">2s</span>;</span><br><span class="line">	<span class="attribute">-webkit-transition</span>: width <span class="number">2s</span>, height <span class="number">2s</span>, -webkit-transform <span class="number">2s</span>;</span><br><span class="line">	<span class="attribute">-o-transition</span>: width <span class="number">2s</span>, height <span class="number">2s</span>,-o-transform <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>所有的转换属性</strong><br>|属性|描述|CSS|<br>|—|:—|:—|<br>|transition|简写属性，用于在一个属性中设置四个过渡属性。    |3|<br>|transition-property|规定应用过渡的 CSS 属性的名称。    |3|<br>|transition-duration|定义过渡效果花费的时间。默认是 0。|3|<br>|transition-timing-function|规定过渡效果的时间曲线。默认是 “ease”。    |3|<br>|transition-delay|规定过渡效果何时开始。默认是 0。|3|</p>
<h3 id="3-使用所有过渡属性"><a href="#3-使用所有过渡属性" class="headerlink" title="3. 使用所有过渡属性"></a>3. 使用所有过渡属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">transition-property</span>: width;</span><br><span class="line">	<span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line">	<span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line">	<span class="attribute">transition-delay</span>: <span class="number">2s</span>;</span><br><span class="line">	<span class="comment">/* Firefox 4 */</span></span><br><span class="line">	<span class="attribute">-moz-transition-property</span>:width;</span><br><span class="line">	<span class="attribute">-moz-transition-duration</span>:<span class="number">1s</span>;</span><br><span class="line">	<span class="attribute">-moz-transition-timing-function</span>:linear;</span><br><span class="line">	<span class="attribute">-moz-transition-delay</span>:<span class="number">2s</span>;</span><br><span class="line">	<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">	<span class="attribute">-webkit-transition-property</span>:width;</span><br><span class="line">	<span class="attribute">-webkit-transition-duration</span>:<span class="number">1s</span>;</span><br><span class="line">	<span class="attribute">-webkit-transition-timing-function</span>:linear;</span><br><span class="line">	<span class="attribute">-webkit-transition-delay</span>:<span class="number">2s</span>;</span><br><span class="line">	<span class="comment">/* Opera */</span></span><br><span class="line">	<span class="attribute">-o-transition-property</span>:width;</span><br><span class="line">	<span class="attribute">-o-transition-duration</span>:<span class="number">1s</span>;</span><br><span class="line">	<span class="attribute">-o-transition-timing-function</span>:linear;</span><br><span class="line">	<span class="attribute">-o-transition-delay</span>:<span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-简写的-transition-（property，duration，timing-function，delay）"><a href="#4-简写的-transition-（property，duration，timing-function，delay）" class="headerlink" title="4. 简写的 transition （property，duration，timing-function，delay）"></a>4. 简写的 transition （property，duration，timing-function，delay）</h3><p>属性的名称，花费的时间，时间曲线，何时开始<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">transition</span>: width <span class="number">1s</span> ease <span class="number">2s</span>;</span><br><span class="line">	<span class="comment">/* Firefox 4 */</span></span><br><span class="line">	<span class="attribute">-moz-transition</span>:width <span class="number">1s</span> ease <span class="number">2s</span>;</span><br><span class="line">	<span class="comment">/* Safari and Chrome */</span></span><br><span class="line">	<span class="attribute">-webkit-transition</span>:width <span class="number">1s</span> ease <span class="number">2s</span>;</span><br><span class="line">	<span class="comment">/* Opera */</span></span><br><span class="line">	<span class="attribute">-o-transition</span>:width <span class="number">1s</span> ease <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="9-CSS3-动画"><a href="#9-CSS3-动画" class="headerlink" title="9. CSS3 动画"></a>9. CSS3 动画</h2><p>通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript。</p>
<p><strong>CSS3 @keyframes 规则</strong><br>如需在 CSS3 中创建动画，您需要学习 @keyframes 规则。<br>@keyframes 规则用于创建动画。在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</p>
<h3 id="1-关键字-“from”“to”"><a href="#1-关键字-“from”“to”" class="headerlink" title="1. 关键字 “from”“to”"></a>1. 关键字 “from”“to”</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> myfirst&#123;</span><br><span class="line">	<span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">	<span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Firefox */</span></span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> myfirst &#123;</span><br><span class="line">	<span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">	<span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> myfirst &#123;</span><br><span class="line">	<span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">	<span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Opera */</span></span><br><span class="line">@-<span class="keyword">o</span>-<span class="keyword">keyframes</span> myfirst &#123;</span><br><span class="line">	<span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">	<span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>通过规定至少以下两项 CSS3 动画属性，即可将动画绑定到选择器：</strong></p>
<pre><code>1. 规定动画的名称
2. 规定动画的时长
</code></pre><p>把 “myfirst” 动画捆绑到 div 元素，时长：5 秒：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">animation</span>: myfirst <span class="number">5s</span>;</span><br><span class="line">	<span class="attribute">-moz-animation</span>: myfirst <span class="number">5s</span>;	<span class="comment">/* Firefox */</span></span><br><span class="line">	<span class="attribute">-webkit-animation</span>: myfirst <span class="number">5s</span>;	<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">	<span class="attribute">-o-animation</span>: myfirst <span class="number">5s</span>;	<span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-0-和-100-选择器"><a href="#2-0-和-100-选择器" class="headerlink" title="2. 0% 和 100% 选择器"></a>2. 0% 和 100% 选择器</h3><p>必须定义动画的名称和时长。如果忽略时长，则动画不会允许，因为默认值是 0。<br>您可以改变任意多的样式任意多的次数。<br>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。<br>0% 是动画的开始，100% 是动画的完成。<br>为了得到最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。</p>
<p>例：当动画为 25% 及 50% 时改变背景色，然后当动画 100% 完成时再次改变：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> myfirst &#123;</span><br><span class="line">	0% &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">	25% &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">	50% &#123;<span class="attribute">background</span>: blue;&#125;</span><br><span class="line">	100% &#123;<span class="attribute">background</span>: green;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Firefox */</span></span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> myfirst &#123;</span><br><span class="line">	0% &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">	25% &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">	50% &#123;<span class="attribute">background</span>: blue;&#125;</span><br><span class="line">	100% &#123;<span class="attribute">background</span>: green;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> myfirst &#123;</span><br><span class="line">	0% &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">	25% &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">	50% &#123;<span class="attribute">background</span>: blue;&#125;</span><br><span class="line">	100% &#123;<span class="attribute">background</span>: green;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Opera */</span></span><br><span class="line">@-<span class="keyword">o</span>-<span class="keyword">keyframes</span> myfirst &#123;</span><br><span class="line">	0% &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">	25% &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">	50% &#123;<span class="attribute">background</span>: blue;&#125;</span><br><span class="line">	100% &#123;<span class="attribute">background</span>: green;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-改变背景色和位置："><a href="#3-改变背景色和位置：" class="headerlink" title="3. 改变背景色和位置："></a>3. 改变背景色和位置：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> myfirst&#123;</span><br><span class="line">	0% &#123;<span class="attribute">background</span>: red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">	25% &#123;<span class="attribute">background</span>: yellow; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">	50% &#123;<span class="attribute">background</span>: blue; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">	75% &#123;<span class="attribute">background</span>: green; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">	100% &#123;<span class="attribute">background</span>: red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面的表格列出了 @keyframes 规则和所有动画属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">CSS</th>
</tr>
</thead>
<tbody>
<tr>
<td>@keyframes</td>
<td style="text-align:left">规定动画。</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td>animation</td>
<td style="text-align:left">所有动画属性的简写属性，除了 animation-play-state 属性。</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td>animation-name</td>
<td style="text-align:left">规定 @keyframes 动画的名称。</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td>animation-duration</td>
<td style="text-align:left">规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td style="text-align:left">规定动画的速度曲线。默认是 “ease”。</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td>animation-delay</td>
<td style="text-align:left">规定动画何时开始。默认是 0。</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td style="text-align:left">规定动画被播放的次数。默认是 1。</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td>animation-direction</td>
<td style="text-align:left">规定动画是否在下一周期逆向地播放。默认是 “normal”。</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td>animation-play-state</td>
<td style="text-align:left">规定动画是否正在运行或暂停。默认是 “running”。</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td style="text-align:left">规定对象动画时间之外的状态。</td>
<td style="text-align:left">3</td>
</tr>
</tbody>
</table>
<h3 id="4-使用所有动画属性"><a href="#4-使用所有动画属性" class="headerlink" title="4. 使用所有动画属性"></a>4. 使用所有动画属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">animation-name</span>: myfirst;</span><br><span class="line">	<span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">	<span class="attribute">animation-timing-function</span>: linear;</span><br><span class="line">	<span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span><br><span class="line">	<span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">	<span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">	<span class="attribute">animation-play-state</span>: running;</span><br><span class="line">	浏览器兼容代码省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-使用简写的动画-animation-属性"><a href="#5-使用简写的动画-animation-属性" class="headerlink" title="5. 使用简写的动画 animation 属性"></a>5. 使用简写的动画 animation 属性</h3><p>动画的名称,一个周期所花费的秒,速度曲线,何时开始,播放的次数<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</span><br><span class="line">	<span class="comment">/* Firefox: */</span></span><br><span class="line">	<span class="attribute">-moz-animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</span><br><span class="line">	<span class="comment">/* Safari 和 Chrome: */</span></span><br><span class="line">	<span class="attribute">-webkit-animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</span><br><span class="line">	<span class="comment">/* Opera: */</span></span><br><span class="line">	<span class="attribute">-o-animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="10-CSS3-多列"><a href="#10-CSS3-多列" class="headerlink" title="10. CSS3 多列"></a>10. CSS3 多列</h2><p>通过 CSS3，您能够创建多个列来对文本进行布局 - 就像报纸那样！</p>
<h3 id="1-CSS3-创建多列（column-count）"><a href="#1-CSS3-创建多列（column-count）" class="headerlink" title="1. CSS3 创建多列（column-count）"></a>1. CSS3 创建多列（column-count）</h3><p>把 div 元素中的文本分隔为三列：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">-moz-column-count</span>:<span class="number">3</span>; <span class="comment">/* Firefox */</span></span><br><span class="line">	<span class="attribute">-webkit-column-count</span>:<span class="number">3</span>; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">	<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-CSS3-规定列之间的间隔（column-gap）"><a href="#2-CSS3-规定列之间的间隔（column-gap）" class="headerlink" title="2. CSS3 规定列之间的间隔（column-gap）"></a>2. CSS3 规定列之间的间隔（column-gap）</h3><p>规定列之间 40 像素的间隔：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">-moz-column-gap</span>:<span class="number">40px</span>;	<span class="comment">/* Firefox */</span></span><br><span class="line">	<span class="attribute">-webkit-column-gap</span>:<span class="number">40px</span>;	<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">	<span class="attribute">column-gap</span>:<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-CSS3-列规则（column-rule）"><a href="#3-CSS3-列规则（column-rule）" class="headerlink" title="3. CSS3 列规则（column-rule）"></a>3. CSS3 列规则（column-rule）</h3><p>规定列之间的宽度、样式和颜色规则：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">-moz-column-rule</span>:<span class="number">3px</span> outset <span class="number">#ff0000</span>;	<span class="comment">/* Firefox */</span></span><br><span class="line">	<span class="attribute">-webkit-column-rule</span>:<span class="number">3px</span> outset <span class="number">#ff0000</span>;	<span class="comment">/* Safari and Chrome */</span></span><br><span class="line">	<span class="attribute">column-rule</span>:<span class="number">3px</span> outset <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="11-CSS3-用户界面"><a href="#11-CSS3-用户界面" class="headerlink" title="11. CSS3 用户界面"></a>11. CSS3 用户界面</h2><p>在 CSS3 中，新的用户界面特性包括重设元素尺寸、盒尺寸以及轮廓等。</p>
<h3 id="1-CSS3-Resizing（可调整大小）"><a href="#1-CSS3-Resizing（可调整大小）" class="headerlink" title="1. CSS3 Resizing（可调整大小）"></a>1. CSS3 Resizing（可调整大小）</h3><p>规定 div 元素可由用户调整大小：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">resize</span>:both;</span><br><span class="line">	<span class="attribute">overflow</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-CSS3-Box-Sizing"><a href="#2-CSS3-Box-Sizing" class="headerlink" title="2. CSS3 Box Sizing"></a>2. CSS3 Box Sizing</h3><p>box-sizing 属性允许您以确切的方式定义适应某个区域的具体内容。<br>border 或 padding的数值计入父宽高内（意思为不会增加父容器宽度）。</p>
<p>规定两个并排的带边框方框：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">	<span class="attribute">-moz-box-sizing</span>:border-box;	<span class="comment">/* Firefox */</span></span><br><span class="line">	<span class="attribute">-webkit-box-sizing</span>:border-box;	<span class="comment">/* Safari */</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-CSS3-Outline-Offset"><a href="#3-CSS3-Outline-Offset" class="headerlink" title="3. CSS3 Outline Offset"></a>3. CSS3 Outline Offset</h3><p>outline-offset 属性对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。</p>
<p>规定边框边缘之外 15 像素处的轮廓：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>:<span class="number">2px</span> solid black;</span><br><span class="line">	<span class="attribute">outline</span>:<span class="number">2px</span> solid red;</span><br><span class="line">	<span class="attribute">outline-offset</span>:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="三、编写-CSS-注意事项"><a href="#三、编写-CSS-注意事项" class="headerlink" title="三、编写 CSS 注意事项"></a>三、编写 CSS 注意事项</h1><h2 id="1-修饰选择器（尽量少用）"><a href="#1-修饰选择器（尽量少用）" class="headerlink" title="1. 修饰选择器（尽量少用）"></a>1. 修饰选择器（尽量少用）</h2><p>能写<code>.nav{}</code>就尽量不要写<code>ul.nav{}</code>。过分修饰选择器将影响性能，影响 class 复用性，会增加选择器私有度。这些都应当竭力避免的。<br>如果想描述我们规划的 class 作用范围，可以在选择器前加上注释，如下写法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*ul*/</span></span><br><span class="line"><span class="selector-class">.nav</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样我们就能在不影响代码私有度的前提下获知 class 作用范围。</p>
<h2 id="2-布局（宽度和高度）"><a href="#2-布局（宽度和高度）" class="headerlink" title="2. 布局（宽度和高度）"></a>2. 布局（宽度和高度）</h2><p>所有内部组件都不要声明宽度，而由其外层父容器块（格栅系统）来决定。理想情况下，格栅系统应当用百分比设定。<br><strong>坚决不要声明高度。</strong>高度应当仅用于尺寸已经固定的东西，例如图片。在 p，ul，div 等元素上不应当声明高度。如果需要的话可以写 line-height，这个更加灵活。。</p>
<h2 id="3-简写（谨慎使用）"><a href="#3-简写（谨慎使用）" class="headerlink" title="3. 简写（谨慎使用）"></a>3. 简写（谨慎使用）</h2><p>编写像<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span><br></pre></td></tr></table></figure></p>
<p>这样的属性的确很省事，但是你这么写的意思其实是同时声明<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:none</span>;</span><br><span class="line"><span class="selector-tag">background-position</span><span class="selector-pseudo">:top</span> <span class="selector-tag">left</span>;</span><br><span class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">repeat</span>;</span><br><span class="line"><span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span><br></pre></td></tr></table></figure></p>
<p>最优应当改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color:red;</span><br></pre></td></tr></table></figure></p>
<p>类似的，像 <code>margin:0;</code> 这样的声明的确简洁清爽，但是还是应当尽量写清楚。如果你只是想修改底边边距，就要具体一些，写成 <code>margin-bottom:0;</code>。<br>简写虽然是好东西，但是注意切勿滥用。</p>
<h2 id="4-ID（CSS-里坚决不要用-ID）"><a href="#4-ID（CSS-里坚决不要用-ID）" class="headerlink" title="4. ID（CSS 里坚决不要用 ID）"></a>4. ID（CSS 里坚决不要用 ID）</h2><p><strong>在 HTML 里 ID 可以用于 JS 以及锚点定位</strong>，但是在 CSS 里只要用 class，一个 ID 也不要用。</p>
<p>Class 的优势在于复用性，而且私有度也并不高。私有度非常容易导致问题，所以将其降低就尤为重要。ID 的私有度是 class 的 255 倍，所以在 CSS 中坚决不要使用。</p>
<h2 id="5-选择器（保持选择器简短高效）"><a href="#5-选择器（保持选择器简短高效）" class="headerlink" title="5. 选择器（保持选择器简短高效）"></a>5. 选择器（保持选择器简短高效）</h2><ul>
<li>结构复杂的选择器将会影响性能。（如<code>.sidebar h3 span{}</code>为三层，<code>.content ul p a{}</code>是四层），层级越深浏览器的消耗就越大。选择器应当尽量简短，更好的办法是直接给你想要添加样式的元素直接添加一个 class。</li>
<li>class 名则不应当过于简略，例如<code>.user-avatar</code>就远比 <code>.usr-avt</code> 好。</li>
</ul>
<h2 id="6-important（优先级高，一般情况不要用）"><a href="#6-important（优先级高，一般情况不要用）" class="headerlink" title="6. !important（优先级高，一般情况不要用）"></a>6. !important（优先级高，一般情况不要用）</h2><p>用 !important 提升优先级也可以，例如如果你要让某条规则一直生效的话，可以用 <code>.error{ color:red !important; }</code>。</p>
<p>避免主动使用 !important。例如 CSS 写得很复杂时不要用它来取巧，要好好整理并重构之前的部分，保持选择器简短并且避免用 ID 将效果拔群。</p>
<h2 id="7-魔数与绝对定位（「凑巧有效果」的数字）"><a href="#7-魔数与绝对定位（「凑巧有效果」的数字）" class="headerlink" title="7. 魔数与绝对定位（「凑巧有效果」的数字）"></a>7. 魔数与绝对定位（「凑巧有效果」的数字）</h2><p>魔数（Magic Number）是指那些「凑巧有效果」的数字，这东西非常不好，缺乏拓展性。<br>例如 .dropdown-nav li:hover ul{ top:37px; } 把下拉菜单移动下来，远非良策，因为这里的 37px 就是个魔数。37px 会生效的原因是因为这时 .dropbox-nav 碰巧高 37px 而已。</p>
<p>这时你应该用 .dropdown-nav li:hover ul{ top:100%; }，也即无论 .dropbox-down 多高，这个下拉菜单都会往下移动 100%。<br>每当你要在代码中放入数字的时候，请三思而行。</p>
<h2 id="8-Debugging（调试）"><a href="#8-Debugging（调试）" class="headerlink" title="8. Debugging（调试）"></a>8. Debugging（调试）</h2><p>如果你要解决 CSS 问题的话，先把旧代码拿掉再写新的。如果旧的 CSS 中有问题的话，写新代码是解决不了的。<br>把 CSS 代码和 HTML 部分删掉，直到没有 BUG 为止，然后你就知道问题出在哪里了。<br>有时候写上一个 overflow:hidden 或者其它能把问题藏起来的代码的确效果立竿见影，但是 overflow 方面可能根本就没问题。所以要治本，而不是单纯治标。</p>
<blockquote>
<p>Reference: </p>
<p><a href="http://blog.csdn.net/hanshileiai/article/details/47373945" target="_blank" rel="noopener">中国风2012——CSS 进阶篇</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> front-end </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle 触发器]]></title>
      <url>/oracle-trigger.html</url>
      <content type="html"><![CDATA[<h2 id="触发器相关概念及语法"><a href="#触发器相关概念及语法" class="headerlink" title="触发器相关概念及语法"></a>触发器相关概念及语法</h2><h3 id="触发器概述"><a href="#触发器概述" class="headerlink" title="触发器概述"></a>触发器概述</h3><h4 id="什么是触发器"><a href="#什么是触发器" class="headerlink" title="什么是触发器"></a>什么是触发器</h4><p>　　触发器是一种特殊的存储过程，和存储过程和存储函数一样是一个pl/sql程序块，触发器是不能接受参数，不能显示调用，只是随着事件触发隐式运行的存储过程程序块。<br><a id="more"></a> </p>
<h4 id="触发器的应用场景"><a href="#触发器的应用场景" class="headerlink" title="触发器的应用场景"></a>触发器的应用场景</h4><ol>
<li>复杂的安全性检查</li>
<li>数据确认</li>
<li>实现审计功能</li>
<li>完成数据的备份和同步</li>
</ol>
<h3 id="触发器概念和第一个触发器"><a href="#触发器概念和第一个触发器" class="headerlink" title="触发器概念和第一个触发器"></a>触发器概念和第一个触发器</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>　　数据库触发器是一个与表相关联的，存储的PL/SQL程序，每当一个特定的数据库操作语句（insert ，update，delete）在指定的表上发出时，Oracle自动地执行触发器中定义得语句序列。</p>
<h4 id="第一个触发器"><a href="#第一个触发器" class="headerlink" title="第一个触发器"></a>第一个触发器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 第一个触发器：每当成功插入新员工后，自动打印“成功插入新员工”</span><br><span class="line">-- 触发器单词：trigger</span><br><span class="line">create trigger saynewem -- 创建触发器名称</span><br><span class="line">after insert -- 在插入操作以后</span><br><span class="line">on emp -- 针对emp的表</span><br><span class="line">declare -- 操作体</span><br><span class="line">begin</span><br><span class="line"> dbms_output.put_line(&apos;成功插入新员工&apos;);  -- 触发器操作的内容 </span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h3 id="触发器的应用场景-1"><a href="#触发器的应用场景-1" class="headerlink" title="触发器的应用场景"></a>触发器的应用场景</h3><ol>
<li>复杂的安全性的场景(涉及到权限的问题)；</li>
<li>数据的确认(涉及数据是否合理问题)；</li>
<li>数据的审计(涉及到数据的增、删、改的操作记录)；</li>
<li>数据的备份和同步(备份和同步重要);</li>
</ol>
<h3 id="触发器的语法"><a href="#触发器的语法" class="headerlink" title="触发器的语法"></a>触发器的语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create[or replace] trigger 触发器名</span><br><span class="line">&#123;before|after&#125;</span><br><span class="line">&#123;delete|insert|update[of 列名]&#125;</span><br><span class="line">on 表名</span><br><span class="line">[for each row [when(条件)]]  (有这条语句的话就是行级触发器,否则就是语句级触发器)</span><br><span class="line">PLSQL 块</span><br></pre></td></tr></table></figure>
<h3 id="触发器的类型"><a href="#触发器的类型" class="headerlink" title="触发器的类型"></a>触发器的类型</h3><h4 id="语句级触发器"><a href="#语句级触发器" class="headerlink" title="语句级触发器"></a>语句级触发器</h4><p>　　在指定的操作语句操作之前或之后执行一次，不管这条语句影响了多少行。(针对的是表，触发最多一次)</p>
<h4 id="行级触发器"><a href="#行级触发器" class="headerlink" title="行级触发器"></a>行级触发器</h4><p>　　触发语句作用的每一条记录都被触发。在行级触发器中使用 :old 和 :new 伪记录变量，识别值的状态。(针对的是行，触发器触发次数不一样，有多少行满足条件就触发多少次)</p>
<h2 id="触发器应用"><a href="#触发器应用" class="headerlink" title="触发器应用"></a>触发器应用</h2><h3 id="应用一——复杂的安全性检查"><a href="#应用一——复杂的安全性检查" class="headerlink" title="应用一——复杂的安全性检查"></a>应用一——复杂的安全性检查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 例如禁止在非工作时间插入数据</span><br><span class="line">/**</span><br><span class="line">  1.周末： to_char(sysdate,&apos;day&apos;) in (&apos;星期六&apos;，‘星期日’)</span><br><span class="line">  2.上班前，下班后： to_number(to_char(sysdate,&apos;hh24&apos;)) not between 9 and 18</span><br><span class="line">/</span><br><span class="line"></span><br><span class="line">create or replace trigger securityemp</span><br><span class="line">before insert </span><br><span class="line">on emp </span><br><span class="line">begin </span><br><span class="line">  if to_char(sysdate,&apos;day&apos;) in (&apos;星期六&apos;, &apos;星期日&apos;) or</span><br><span class="line">    to_number(to_char(sysdate,&apos;hh24&apos;)) not between 9 and 18 then</span><br><span class="line"></span><br><span class="line">   raise_application_error(-20001,&apos;禁止在非工作时间插入新员工&apos;);</span><br><span class="line"> end if;</span><br><span class="line">end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure>
<h3 id="应用二——数据确认"><a href="#应用二——数据确认" class="headerlink" title="应用二——数据确认"></a>应用二——数据确认</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 涨工资不能越涨越少</span><br><span class="line">/**</span><br><span class="line"> * :old 和 :new 代表同一条记录</span><br><span class="line"> * :old 表示操作该行之前，这一行的值</span><br><span class="line"> * :new 表示操作该行值后，这一行的值</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create or replace trigger check_salary</span><br><span class="line">before update </span><br><span class="line">on emp</span><br><span class="line">for each row</span><br><span class="line">begin </span><br><span class="line">if :new.sal&lt;:odl.sal then</span><br><span class="line">raise_application_error(-20002,&apos;涨后薪水不能少于涨前薪水。 涨后薪水为：&apos;||:new.sal ||&apos;涨前的薪水：&apos;||:old.sal);</span><br><span class="line">end if;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h3 id="应用三——实现审计功能"><a href="#应用三——实现审计功能" class="headerlink" title="应用三——实现审计功能"></a>应用三——实现审计功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 给员工涨工资，当涨后的薪水超过6000块时候，审计该员工的信息</span><br><span class="line"></span><br><span class="line">-- 创建表，用于保存审计信息</span><br><span class="line">create table audit_info(</span><br><span class="line">information varchar2(200)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create or replace trigger do_audit_emp_salary</span><br><span class="line">after update </span><br><span class="line">on emp</span><br><span class="line">for each row </span><br><span class="line">begin </span><br><span class="line">if :new.sal&gt;6000 then </span><br><span class="line">insert into audit_info values(:new.empno||&apos; &apos;||:new.ename||&apos; &apos;||:new.sal);</span><br><span class="line">end if;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h3 id="应用四——完成数据的备份和同步"><a href="#应用四——完成数据的备份和同步" class="headerlink" title="应用四——完成数据的备份和同步"></a>应用四——完成数据的备份和同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 创建备份表</span><br><span class="line">create table emp_back as select * from emp;</span><br><span class="line">-- 利用触发器实现数据的同步部分</span><br><span class="line">-- 当给员工涨完工资后，自动备份新的工资到备份表中</span><br><span class="line">create or replace trigger sync_salary</span><br><span class="line">after update </span><br><span class="line">on emp</span><br><span class="line">for each row </span><br><span class="line">begin</span><br><span class="line">  -- 当主表更新后，自动更新备份表</span><br><span class="line">   update emp_back set sal=:new.sal where empno=:new.empno; </span><br><span class="line">end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Reference: </p>
<ul>
<li><a href="https://www.imooc.com/video/8744" target="_blank" rel="noopener">慕课网－oracle 触发器</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle存储过程和自定义函数]]></title>
      <url>/oracle-procedure-function.html</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>　　存储过程和存储函数是指存储在数据库中供所有用户程序调用的子程序叫存储过程、存储函数。<br><a id="more"></a> </p>
<h3 id="异同点："><a href="#异同点：" class="headerlink" title="异同点：　"></a>异同点：　</h3><ul>
<li>存储过程和存储函数的相同点：完成特定功能的程序。</li>
<li>存储过程和存储函数的区别：是否用return语句返回值。</li>
</ul>
<h2 id="存储过程的创建和调用"><a href="#存储过程的创建和调用" class="headerlink" title="存储过程的创建和调用"></a>存储过程的创建和调用</h2><h3 id="第一个存储过程：打印-hello-world"><a href="#第一个存储过程：打印-hello-world" class="headerlink" title="第一个存储过程：打印 hello world"></a>第一个存储过程：<code>打印 hello world</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure sayhelloword</span><br><span class="line">as</span><br><span class="line">  -- 说明部分,as一定要写</span><br><span class="line">begin</span><br><span class="line">    dbms_output.put_line(&apos;Hello World&apos;);</span><br><span class="line">end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure>
<h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><ol>
<li><code>exec sayhelloworld()</code></li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 调用两次</span><br><span class="line">begin</span><br><span class="line">   sayhelloworld();</span><br><span class="line">   sayhelloworld();</span><br><span class="line">end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="oracle-带参数的存储过程"><a href="#oracle-带参数的存储过程" class="headerlink" title="oracle 带参数的存储过程"></a>oracle 带参数的存储过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- 创建一个带参数的存储过程</span><br><span class="line">-- 给指定的员工涨100块钱的工资，并且打印涨前后涨后的薪水</span><br><span class="line">create or replace procedure raisesalary(eno in number) -- in 这是一个输入参数</span><br><span class="line">as</span><br><span class="line">  -- 定义一个变量保存涨前的薪水</span><br><span class="line">    psal emp.sal%type;</span><br><span class="line">begin</span><br><span class="line">   -- 得到员工涨前的薪水</span><br><span class="line">    select sal into psal from emp where empno=eno;</span><br><span class="line">   -- 给该员工涨100块钱</span><br><span class="line">    update emp set sal=sal+100 where empno=eno;</span><br><span class="line">   -- 一般，这里不需要 commit ！ 也不需要 rollback</span><br><span class="line">   -- 注意：一般不在存储过程或者存储函数中，commit 和 rollback </span><br><span class="line">   -- 打印</span><br><span class="line">    dbms_output.put_line(&apos;涨前：&apos;||psal||&apos;，涨后：&apos;||(psal+100));</span><br><span class="line">end;</span><br><span class="line">/</span><br><span class="line">-- 调用：</span><br><span class="line">begin</span><br><span class="line">   raisesalary(7839);</span><br><span class="line">   raisesalary(7566); </span><br><span class="line">end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure>
<h3 id="如何调试存储过程"><a href="#如何调试存储过程" class="headerlink" title="如何调试存储过程"></a>如何调试存储过程</h3><ol>
<li>调试存储过程最好放到Oracle数据库所在的系统或虚拟机上，解压SQL developer ，双击运行。</li>
<li>为了确保存储过程或函数是可调试的，右键“以编译并进行调试”，点击红色按钮“调试”</li>
<li>利用已写好的调用函数进行调试。</li>
<li>给调试账户授权<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant DEBUG CONNECT SESSION ,DEBUG ANY PROCEDURE to scott;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h2><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>　　是一个命名的存储程序，可带参数，并返回一个计算值。必须有return 子句，用于返回函数值。</p>
<h3 id="创建存储函数语法"><a href="#创建存储函数语法" class="headerlink" title="创建存储函数语法"></a>创建存储函数语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create or replace function 函数名(参数列表)</span><br><span class="line">return 函数值类型</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">  PLSQL子程序体;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong> 表达式中某个字段为空时，表达式返回值为空。为防止含有表达式的返回值错误，在可能为空的字段上加上NVL(字段名，0)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--查询某个员工的年收入</span><br><span class="line">create or replace function queryemp_income(eno in number)</span><br><span class="line">return number</span><br><span class="line">as </span><br><span class="line">    --定义变量接收薪水和奖金</span><br><span class="line">    p_sal emp.sal%type;</span><br><span class="line">    p_comm emp.comm%type;</span><br><span class="line">begin</span><br><span class="line">  select sal,comm into p_sal,p_comm from emp where empno=eno;</span><br><span class="line">  --nvl为遇空函数，如果p_comm为空则返回0</span><br><span class="line">  return nvl(p_comm,0)+p_sal*12;</span><br><span class="line">end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure></p>
<h2 id="out-参数"><a href="#out-参数" class="headerlink" title="out 参数"></a>out 参数</h2><p>　　存储过程和存储函数都可以有多个输入（in）和输出参数（out），都可以通过out参数实现返回多个值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- out参数：查询某个员工姓名、月薪和职位</span><br><span class="line">-- 原则： 如果只有一个返回值，用存储函数；否则，就用存储过程。</span><br><span class="line">create or replace procedure queryempinfor(eno in number,pename out varchar2,</span><br><span class="line">  psal out number,pjob out varchar2)</span><br><span class="line">as </span><br><span class="line">begin</span><br><span class="line">   -- 得到该员工的姓名、月薪和职位</span><br><span class="line">    select ename,sal,empjob into pename,psal,pjob from emp where empno=eno;</span><br><span class="line">end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure></p>
<h2 id="在-out-参数中访问光标"><a href="#在-out-参数中访问光标" class="headerlink" title="在 out 参数中访问光标"></a>在 out 参数中访问光标</h2><h3 id="申明包结构"><a href="#申明包结构" class="headerlink" title="申明包结构"></a>申明包结构</h3><ul>
<li>包头(申明)</li>
<li>包体(实现)</li>
</ul>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 查询某个部门中所有员工的所有信息  //ref(reference引用) cursor(光标)</span><br><span class="line">#包头</span><br><span class="line">create or replace package mypackage as</span><br><span class="line">type empcursor is ref cursor;</span><br><span class="line">procedure queryEmpList(dno in number,empList out empcursor);</span><br><span class="line">end mypackage;</span><br><span class="line"></span><br><span class="line">#包体</span><br><span class="line">create or replace package body mypackage as</span><br><span class="line">procedure queryEmpList(dno in number,empList out empcursor) as</span><br><span class="line"> begin</span><br><span class="line">   open empList for select * from emp where deptno=dno;</span><br><span class="line"> end queryEmpList;</span><br><span class="line">end mypackage;</span><br><span class="line">***********包体需要实现包头中声明的所有方法*********************</span><br></pre></td></tr></table></figure>
<h2 id="在应用程序中访问"><a href="#在应用程序中访问" class="headerlink" title="在应用程序中访问"></a>在应用程序中访问</h2><p>　　在java应用程序中访问存储过程和存储函数以及访问包下的存储过程，可以查看<strong>java API</strong>文档。</p>
<blockquote>
<p>Reference: </p>
<ul>
<li><a href="https://www.imooc.com/learn/370" target="_blank" rel="noopener">慕课网－oracle 存储过程和自定义函数</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 反射]]></title>
      <url>/java-reflect.html</url>
      <content type="html"><![CDATA[<h3 id="Class-类的使用"><a href="#Class-类的使用" class="headerlink" title="Class 类的使用"></a>Class 类的使用</h3><h4 id="在面向对象的世界里，万事万物皆对象。-静态成员、普通数据类型"><a href="#在面向对象的世界里，万事万物皆对象。-静态成员、普通数据类型" class="headerlink" title="在面向对象的世界里，万事万物皆对象。(静态成员、普通数据类型)"></a>在面向对象的世界里，万事万物皆对象。(静态成员、普通数据类型)</h4><p>　　类是对象，类是java.lang.Class类的实例对象<br><a id="more"></a></p>
<h4 id="这个对象的表示方式有三种："><a href="#这个对象的表示方式有三种：" class="headerlink" title="这个对象的表示方式有三种："></a>这个对象的表示方式有三种：</h4><ol>
<li><p>第一种表示方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c1 = Foo.class; //任何一个类都有一个隐含的静态成员变量class</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种表示方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c2 = foo1.getClass //已知该类的对象，通过getClass方法得到这个实例类的class(类类型)</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三种表达方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c3 = Class.forName(&quot;imooc.reflect.Foo&quot;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>三种方式创建的类类型都相等，都是Foo的类类型</p>
<h4 id="可以通过类类型创建该类的类对象"><a href="#可以通过类类型创建该类的类对象" class="headerlink" title="可以通过类类型创建该类的类对象"></a>可以通过类类型创建该类的类对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Foo foo=(Foo)c1.newInstance();</span><br></pre></td></tr></table></figure>
<p>前提是需要有无参数的构造方法，它要调用</p>
<h3 id="动态加载类"><a href="#动态加载类" class="headerlink" title="动态加载类"></a>动态加载类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(&quot;类的全称&quot;)：</span><br></pre></td></tr></table></figure>
<ul>
<li>不仅表示了类的类类型，还代表了动态加载类</li>
<li>请区分编译、运行</li>
<li>编译时刻加载类是静态加载类、运行时刻加载类是动态加载类</li>
</ul>
<p>用new创建对象，属于静态加载类，在编译时刻就需要加载所有的可能使用到的类，只要有一个类缺失或者类中某个成员缺失，就会报错（不管实际上有没有用到这个类），导致整个程序都无法运行。</p>
<p>于是我们希望：要用哪个类的时候再加载这个类，不用就不加载。通过动态加载类可以解决上述问题。<br>本例中举了Word类、Excel类加载的例子，现在做动态加载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forName(args[0]);</span><br><span class="line">//通过类类型，创建该类对象，这里就产生一个问题：是生成Word呢还是生成Excel?老师的解决思路是：只创建一个新类OfficeAble，作为接口，令Word类、Excel类都实现这个接口就可以了：</span><br><span class="line">OfficeAble oa = (OfficeAble)c.newInstance();</span><br><span class="line">oa.start();</span><br><span class="line"></span><br><span class="line">class Word implements OfficeAble</span><br><span class="line">&#123;</span><br><span class="line">	public void start()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>代码设计思路</strong>：功能性的类最好使用动态加载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forname(参数);//动态加载类返回该类的类类型。</span><br><span class="line">接口 x = (接口)c.newInstance();通过转换为接口的类型，用来实现方法。</span><br></pre></td></tr></table></figure></p>
<h3 id="获取方法信息"><a href="#获取方法信息" class="headerlink" title="获取方法信息"></a>获取方法信息</h3><p>基本数据类型，void关键字都存在类类型</p>
<ul>
<li>class.getMethods()方法获取是该类的所有public方法，包括从父类继承的方法；</li>
<li>class.getDeclareMethods()方法获取该类自行声明的所有方法，不论访问权限；</li>
<li>method.getName()获取方法名</li>
<li>method.getReturnType()获取方法的返回值</li>
<li>method.getParameterTypes()，获取方法的参数类型的类类型数组class[]</li>
</ul>
<p><strong>获取方法信息：</strong></p>
<ol>
<li>基本的数据类型，void关键字等都存在类类型<br>Class c = 基类.class （int,String,double,void等）</li>
<li>Class类的基本API操作</li>
</ol>
<ul>
<li>c.getName()可以获取类的名称</li>
<li>c.getSimpleName();//不包含包名的类的名称</li>
<li>c.getMethods()获取类的【public方法】集合，【包括继承来的】<br><strong>注意【所有方法都是Method类的对象】</strong></li>
<li>c.getDeclaredMethods()获取的是所有该类【自己声明】的方法，【不问访问权限】</li>
</ul>
<ol>
<li>Method类提供了一些操作方法的方法</li>
</ol>
<ul>
<li>.getReturnType()得到该方法的返回值类型的类类型（class），如int.class String.class</li>
<li>.getName()得到方法的名称</li>
<li>.getParameterTypes()获得参数列表类型的类类型，如参数为(int,int)则得到</li>
</ul>
<p><strong>实例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class c1 = int.class; int的类类型</span><br><span class="line">Class c2 = String.class; String类的类类型 String类字节码</span><br><span class="line">Class c3 = double.class; double这个数据类类型的字节码表示方式</span><br><span class="line">Class c4 = Double.class; Double这个类的类类型字节码表示方式</span><br><span class="line">Class c5 = void.class; 表达了void这个类的类类型</span><br><span class="line">getName为这个类的类类型的具体名称 </span><br><span class="line">c1.getName ---&gt; int</span><br><span class="line">c2.getName ---&gt; java.lang.String 类的全称</span><br><span class="line">c2.getSimpleName ---&gt; String 不包含包名的类的名称</span><br></pre></td></tr></table></figure></p>
<h3 id="获取成员变量构造函数信息"><a href="#获取成员变量构造函数信息" class="headerlink" title="获取成员变量构造函数信息"></a>获取成员变量构造函数信息</h3><h4 id="Java反射机制－获取成员变量-amp-构造函数"><a href="#Java反射机制－获取成员变量-amp-构造函数" class="headerlink" title="Java反射机制－获取成员变量&amp;构造函数"></a>Java反射机制－获取成员变量&amp;构造函数</h4><ol>
<li>成员变量是java.lang.reflect.Field的对象</li>
</ol>
<ul>
<li>Field类封装了关于成员变量的操作</li>
<li>Field[] fs = c.getFields()方法获取所有public的成员变量Field[]信息</li>
<li>c.getDeclaredFields获取的是该类自己声明的成员变量信息</li>
<li>field.getType()获得成员类型的类类型</li>
<li>field.getName()获得成员的名称</li>
</ul>
<ol>
<li>构造函数是java.lang.Constructor类的对象</li>
</ol>
<ul>
<li>通过Class.getConstructor()获得Constructor[]所有公有构造方法信息</li>
<li>建议getDeclaredConstructors()获取自己声明的构造方法</li>
<li>Constructor.getName():String</li>
<li>Constructor.getParameterTypes():Class[]</li>
</ul>
<p><strong>成员变量也是对象，是java.lang.reflect.Field的对象</strong></p>
<h4 id="反射——获取成员变量的信息"><a href="#反射——获取成员变量的信息" class="headerlink" title="反射——获取成员变量的信息"></a>反射——获取成员变量的信息</h4><ol>
<li>Class c = obj.getClass();<br>Field[] fs = c.getFields();</li>
<li>获取成员变量： 获取成员变量的类型的类类型<code>Class fieldType = field.getType();</code>　<br>//获取成员变量的类型的名字fieldType.getName();　<br>//获取成员变量的名称getName()</li>
</ol>
<h4 id="反射——获取构造函数的信息"><a href="#反射——获取构造函数的信息" class="headerlink" title="反射——获取构造函数的信息"></a>反射——获取构造函数的信息</h4><ol>
<li>Class c = obj.getClass(）;<br>Constructor[] cs = c.getConstructors(); </li>
<li>获取构造函数的参数列表，得到的是参数列表的类型的类类型<br><code>Class[] paramTypes =constructor.getParammeterTypes();</code>　<br>//获取参数类型的名称paramTypes.getName();<h3 id="方法反射的基本操作"><a href="#方法反射的基本操作" class="headerlink" title="方法反射的基本操作"></a>方法反射的基本操作</h3><h4 id="获取A类中的print-int-int-方法："><a href="#获取A类中的print-int-int-方法：" class="headerlink" title="获取A类中的print(int,int)方法："></a>获取A类中的print(int,int)方法：</h4></li>
<li>要获取一个方法就是获取类的信息，获取类的信息首先要获取类的类类型<br>A a1=new A();  Class c= a1.getClass();</li>
<li>获取方法 由名称和参数列表来决定,<code>getMethod获取的是public方法</code>，<code>getDelcaredMethod获取自己声明的方法</code><br><code>Method m =c.getMethod(methodName,paramtypes);</code>　<br>//paramtypes可以用数组的形式  表示new Class[]{int.class,int.class}，也可以直接列举类类型<h4 id="方法的反射操作："><a href="#方法的反射操作：" class="headerlink" title="方法的反射操作："></a>方法的反射操作：</h4>是用m对象来进行方法调用，和a1.print(10,20)调用的方法相同 <code>m.invoke（a1，new Object[]｛10,20｝）
Object o=m.invoke(对象名,参数);</code><br>//方法如果没有返回值返回null，如果有返回值返回具体值，参数可用数组的方式表示，也可以直接列举，没有参数就不写<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public Class A&#123;</span><br><span class="line">	 public void print()&#123;&#125;;</span><br><span class="line">	 public void Print(Sting a,String b)&#123;&#125;</span><br><span class="line">	 public void Print(int a,int b)&#123;&#125;;</span><br><span class="line">&#125; </span><br><span class="line">public Class B&#123;</span><br><span class="line">	 public static void main(String[] args)&#123;</span><br><span class="line">	  A a1 = new A();  Class c= a1.getclass;</span><br><span class="line">	  Method getMet=c.getMethod(&quot;print&quot;,String.class,String.class);</span><br><span class="line">	  Object obj=getMet.invoke(a1,&quot;df&quot;,&quot;df&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="通过反射了解集合泛型的本质"><a href="#通过反射了解集合泛型的本质" class="headerlink" title="通过反射了解集合泛型的本质"></a>通过反射了解集合泛型的本质</h3><ol>
<li>反射的操作都是编译之后的操作</li>
<li>集合的泛型只为了防止错误输入，编译阶段有效，绕过编译，使用反射是不会控制集合中的数据类型的。</li>
<li>反射操作类方法：通过对象的类类型得到方法的对象Method，通过方法对象的invoke方法操作对象，调用对象的方法。<br><strong>实例</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class c1=对象a.getClass()</span><br><span class="line">Method m = c1.getMethod(方法名，参数列表)</span><br><span class="line">Object o =m.invoke(对象a，参数列表，可以一一列举，也可以用数组)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>Reference:<br> <a href="http://www.imooc.com/learn/199" target="_blank" rel="noopener">IMOOC-反射——Java高级开发必须懂的</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FreeMarker解析json数据]]></title>
      <url>/freemark-analysis-json-string.html</url>
      <content type="html"><![CDATA[<p>模拟后台传过来的 json 字符串<code>text</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign text&gt;</span><br><span class="line">&#123;&quot;res&quot;:&quot;0&quot;,&quot;msg&quot;:&quot;OK&quot;,&quot;userlist&quot;:[&#123;&quot;id&quot;:&quot;3&quot;,&quot;name&quot;:&quot;cc&quot;,&quot;sex&quot;:&quot;女&quot;,&quot;age&quot;:&quot;20&quot;&#125;]&#125;</span><br><span class="line">&lt;/#assign&gt;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>在 ftl 页面，将字符串当ftl代码看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign json=text?eval /&gt;</span><br></pre></td></tr></table></figure></p>
<p>然后字符串就解析成 json 格式，可以按 <code>key</code> 进行取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list json.userlist as item&gt;</span><br><span class="line"></span><br><span class="line">id:$&#123;item.id&#125;, name:$&#123;item.name&#125;,sex:$&#123;item.sex&#125;</span><br><span class="line"></span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Reference:<br><a href="http://www.cnblogs.com/zdf123/p/6973067.html" target="_blank" rel="noopener">o0自由的风0o-《FreeMarker处理json》</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> json </tag>
            
            <tag> freemark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-176. Second Highest Salary]]></title>
      <url>/leetcode-second-height-salary.html</url>
      <content type="html"><![CDATA[<p>Write a SQL query to get the second highest salary from the <code>Employee</code> table.<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure>
<p>For example, given the above Employee table, the query should return 200 as <code>the second highest salary</code>. If there is no second highest salary, then the query should return <code>null</code>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">| SecondHighestSalary |</span><br><span class="line">+---------------------+</span><br><span class="line">| 200                 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure></p>
<p><strong>思路：</strong><br>　　按薪水<code>salary</code> 倒序排序，然后从第一个开始，取下一个。<br>　　<br><strong>一开始我的SQL(<code>Wrong Answer</code>)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  SELECT DISTINCT Salary as SecondHighestSalary</span><br><span class="line">    FROM Employee</span><br><span class="line">ORDER BY Salary DESC</span><br><span class="line">   LIMIT 1 OFFSET 1</span><br></pre></td></tr></table></figure></p>
<p>忽略了如果表中<code>salary</code>的值只有一种的情况，这样就没有<code>the second highest salary</code>，输出 <code>null</code>.<br><strong>正确写法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT IFNULL(</span><br><span class="line">      (SELECT DISTINCT Salary</span><br><span class="line">       FROM Employee</span><br><span class="line">       ORDER BY Salary DESC</span><br><span class="line">        LIMIT 1 OFFSET 1),</span><br><span class="line">       NULL) AS SecondHighestSalary</span><br></pre></td></tr></table></figure></p>
<p><strong>IFNULL</strong><br>　　这儿用到了 MySQL 的 <code>IFNULL(expr1,expr2)</code>函数，如果 expr1 不是 NULL，IFNULL() 返回 expr1，否则它返回 expr2。
　　</p>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[当然我在扯淡]]></title>
      <url>/talk-nonsense.html</url>
      <content type="html"><![CDATA[<p>你没法对别人解释北京。<br><a id="more"></a><br>　　2013年，那是我第一次离开西北。在去哈尔滨求学的途中路过北京，那时生活正在跃出一段崭新的弧线。我以为我知道我将要面对的所有可能性，并无丝毫畏惧。就像汪峰在《北京北京》中唱的那样：</p>
<blockquote>
<p>在这儿我能感觉到我的存在<br>在这儿有太多让我眷恋的东西<br>我在这里欢笑我在这里哭泣<br>我在这里活着也在这儿死去</p>
</blockquote>
<p>“在这儿我能感觉到我的存在”。<br>　　17年顺利拿到学位证书后回到北京，在接下来的日子里，理想、情怀开始澎湃地展现在我眼前，高速公路上红色和黄色的车灯奔涌入海，驰掣的地跌裹挟这风尘带着些许机车的腥气，北京的灯火如星辰一般铺在脚下。这是梦和幻觉构筑的城市。<br>　　《北京北京》似乎是写给这座城市的情书。不论你有多洒脱，但你只要北漂过的话，就知道这里面的那些细节有多么微妙和真切。<br>　　这是我曾经昂首阔步走过的地方，这是我一直心心念念要来的地方，我不知道终将会发生什么事，而生活终将改弦更张，现实经历的任何生活转折，和我当时以为我要为之奋斗的那个未来和真实的未来近乎南辕北辙。<br>　　但生活并不止步于此，你知道没有什么 good ending 或者 bad ending，有的只是一个又一个选择，和伴随着每个选择而来的那个无可避免的 what if。那不是抽象的可能性，而是一段又一段具体而微的生活轨迹，是真实的家庭细节和职业道路，是餐厅里的烛光和欢声笑语，是无数个清晨的问候和午夜的叹息，是同样沦肌浃髓的血汗和泪水。它们永远消失在了命运的岔口里。<br>　　你永远都不知道这是否值得。<br>　　时常自己跟自己较劲，为什么要来北漂，风尘仆仆的上下班，我似乎又找不到存在的意义，也常常问<code>change</code>:</p>
<blockquote>
<p>　　我的选择错误了吗？ 兜兜转转这么久了，我还是一无所有</p>
</blockquote>
<p><code>change</code>回复道：</p>
<blockquote>
<p>　　 emm… 不会啊，你还有我啊</p>
</blockquote>
<p>很暖心，很想哭，所以越发无力感，时间已经过去了很久，但又像是只在转瞬之间。兜兜转转的千百种人生汇聚于此刻，如梦幻泡影。每个选择都可能是种错误，每种未来都隐约活色生香。要搞砸那么多次，失望那么多次，才换来这进退失据的当下片刻。</p>
<p>就像宋冬野在《空港曲》中唱的：</p>
<blockquote>
<p>脏水洗身 浊杯赴宴<br>如来的饭碗 荒诞世间<br>你我登船 送命或寻欢<br>可信仰不过是忘记真相</p>
</blockquote>
<p>但至少，你在那些岔口面前沉吟过，你曾经放手一搏地尝试过，致那些破碎了的心，和跌跌撞撞的生活。</p>
]]></content>
      
        
        <tags>
            
            <tag> Life-Talk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chrome 插件-汇集]]></title>
      <url>/chrome-plug-collection.html</url>
      <content type="html"><![CDATA[<p>这里收集一些很好用的chrome插件，会不断补充，欢迎大家补充。<br><a id="more"></a></p>
<h2 id="Chrome-标签页美化-infinity-pro"><a href="#Chrome-标签页美化-infinity-pro" class="headerlink" title="Chrome 标签页美化 infinity-pro"></a><a href="https://github.com/wave-gbt/Chrome-Extensions/blob/master/infinity-pro.crx" target="_blank" rel="noopener">Chrome 标签页美化 infinity-pro</a></h2><p>Chrome 新标签页应用,重绘了几百个图标,支持自定义搜索,集成天气,带有备忘与 Todo,还可以每日更换壁纸</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="DHC-REST-Client"><a href="#DHC-REST-Client" class="headerlink" title="DHC REST Client"></a><a href="https://chrome.google.com/webstore/detail/dhc-rest-client/aejoelaoggembcahagimdiliamlcdmfm?hl=en-US" target="_blank" rel="noopener">DHC REST Client</a></h3><p>REST &amp; HTTP API developer’s pocket knife. Easy to use and configurable. HATEOAS, Hypermedia, Requests History+Repository, and more.<br>用于测试 http 请求等等</p>
<h3 id="Page-Ruler"><a href="#Page-Ruler" class="headerlink" title="Page Ruler"></a><a href="https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn?hl=en-US" target="_blank" rel="noopener">Page Ruler</a></h3><p>Draw a ruler to get pixel dimensions and positioning, and measure elements on any web page.<br>前端尺子</p>
<h3 id="Eye-Dropper"><a href="#Eye-Dropper" class="headerlink" title="Eye Dropper"></a><a href="https://chrome.google.com/webstore/detail/eye-dropper/hmdcmlfkchdmnmnmheododdhjedfccka" target="_blank" rel="noopener">Eye Dropper</a></h3><p>Eye Dropper is open source extension which allows you to pick colors from web pages, color picker and your personal color history.<br>拾色器，还可以保存颜色记录</p>
<h3 id="Proxy-SwitchyOmega"><a href="#Proxy-SwitchyOmega" class="headerlink" title="Proxy SwitchyOmega"></a><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=en-US" target="_blank" rel="noopener">Proxy SwitchyOmega</a></h3><p>Manage and switch between multiple proxies quickly &amp; easily.<br>代理工具，很方便定义规则。我觉得可以接替 foxyproxy</p>
<h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><h3 id="Chrome-壁纸插件-Momentum"><a href="#Chrome-壁纸插件-Momentum" class="headerlink" title="Chrome 壁纸插件 Momentum"></a><a href="https://github.com/froginwell/chrome_extensions/blob/master/extensions/Momentum_v0.95.0.crx" target="_blank" rel="noopener">Chrome 壁纸插件 Momentum</a></h3><p>如果可以翻墙，可以直接在chrome extension app store 下载</p>
<h3 id="Wappalyzer"><a href="#Wappalyzer" class="headerlink" title="Wappalyzer"></a><a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?hl=en-US" target="_blank" rel="noopener">Wappalyzer</a></h3><p>Identifies software on the web<br>分析网站技术栈</p>
<h3 id="SimilarWeb"><a href="#SimilarWeb" class="headerlink" title="SimilarWeb"></a><a href="https://chrome.google.com/webstore/detail/similarweb-site-traffic-s/hoklmmgfnpapgjgcpechhaamimifchmp?hl=en-US" target="_blank" rel="noopener">SimilarWeb</a></h3><p>See real in-depth website engagement, traffic sources, and site ranking information with SimilarWeb<br>分析网站流量</p>
<h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><h3 id="Sexy-Undo-Close-Tab"><a href="#Sexy-Undo-Close-Tab" class="headerlink" title="Sexy Undo Close Tab"></a><a href="https://chrome.google.com/webstore/detail/sexy-undo-close-tab/bcennaiejdjpomgmmohhpgnjlmpcjmbg?hl=en-US" target="_blank" rel="noopener">Sexy Undo Close Tab</a></h3><p>Accidentally closed your last tab? Tired of losing tabs in Incognito? Don’t worry, everything is possible with this sexy extension!<br>恢复关闭的页面</p>
<h3 id="Evernote-Web-Clipper"><a href="#Evernote-Web-Clipper" class="headerlink" title="Evernote Web Clipper"></a><a href="https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?hl=en-US" target="_blank" rel="noopener">Evernote Web Clipper</a></h3><p>Use the Evernote extension to save things you see on the web into your Evernote account.<br>印象笔记 剪藏；用印象笔记肯定是要安装的插件</p>
<h3 id="Personal-Blocklist-by-Google"><a href="#Personal-Blocklist-by-Google" class="headerlink" title="Personal Blocklist (by Google)"></a><a href="https://chrome.google.com/webstore/detail/personal-blocklist-by-goo/nolijncfnkgaikbjbdaogikpmpbdcdef/related" target="_blank" rel="noopener">Personal Blocklist (by Google)</a></h3><p>在 Google 搜索结果了，自定义屏蔽网站，比如屏蔽：百度知道什么的</p>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HEXO的NEXT主题个性化]]></title>
      <url>/hexo-next-theme-beautify.html</url>
      <content type="html"><![CDATA[<p>分享一篇关于<code>hexo</code>的<code>next</code>主题个性化的教程。</p>
<blockquote>
<p>Reference:</p>
<ul>
<li><a href="http://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">JuLi距离 -《 hexo的next主题个性化教程：打造炫酷网站》</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 进程管理]]></title>
      <url>/linux-process-manage.html</url>
      <content type="html"><![CDATA[<h3 id="一、-进程管理"><a href="#一、-进程管理" class="headerlink" title="一、 进程管理"></a>一、 进程管理</h3><h4 id="1-什么是进程"><a href="#1-什么是进程" class="headerlink" title="1. 什么是进程"></a>1. 什么是进程</h4><p>　　进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的运行空间，并占有一定的系统资源。<br><a id="more"></a></p>
<h4 id="2-进程管理的作用"><a href="#2-进程管理的作用" class="headerlink" title="2. 进程管理的作用"></a>2. 进程管理的作用</h4><ul>
<li>判断服务器健康状态</li>
<li>查看系统中所有进程</li>
<li>杀死进程</li>
</ul>
<h4 id="3-进程的查看ps命令"><a href="#3-进程的查看ps命令" class="headerlink" title="3. 进程的查看ps命令"></a>3. 进程的查看ps命令</h4><ul>
<li><strong>ps aux</strong> 　查看系统中所有进程，使用<code>BSD</code>操作系统格式</li>
<li><strong>ps -le</strong>　查看系统中所有进程，使用<code>Linux</code>标准命令格式</li>
<li><strong>选项</strong><ul>
<li>a：显示一个终端的所有进程，除了会话引线</li>
<li>u：显示进程的归属用户及内存使用情况</li>
<li>x：显示没有控制终端的进程</li>
<li>-l：长格式显示，显示更加详细的信息</li>
<li>-e：显示所有进程，和<code>a</code>作用一致</li>
</ul>
</li>
<li><strong>pstree [选项]</strong>　查看进程树</li>
<li><p><strong>选项</strong></p>
<ul>
<li>-p：显示进程的<code>pid</code></li>
<li>-u：显示进程的所属用户</li>
</ul>
</li>
<li><p><strong>STAT：进程状态。常见的状态有：</strong></p>
<ul>
<li>R：运行</li>
<li>S：睡眠</li>
<li>T：停止状态</li>
<li>s：包含子进程</li>
<li>+：位于后台</li>
</ul>
</li>
</ul>
<h4 id="4-进程的查看top命令"><a href="#4-进程的查看top命令" class="headerlink" title="4. 进程的查看top命令"></a>4. 进程的查看top命令</h4><ul>
<li><strong>top [选项]</strong>　查看系统健康状态</li>
<li><p><strong>选项</strong></p>
<ul>
<li>-d：秒数：指定<code>top</code>命令每隔几秒更新。默认是3秒</li>
<li>-b：使用批处理模式输出。一般和<code>-n</code>选项合用</li>
<li>-n：次数：指定<code>top</code>命令执行的次数</li>
</ul>
</li>
<li><p><strong>在top命令的交互模式中可以执行的命令：</strong></p>
<ul>
<li>?或h：显示交互模式的帮助</li>
<li>P：以<code>CPU</code>使用率排序，默认就是此项</li>
<li>M：以<code>内存</code>的使用率排序</li>
<li>N：以<code>PID</code>排序</li>
<li>q：退出<code>top</code></li>
</ul>
</li>
<li><strong>使用top查看所有进程</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 将所有进程的情况输出到 top.log文本文档中</span><br><span class="line">top -b -n 1 &gt; top.log</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="5-杀死进程"><a href="#5-杀死进程" class="headerlink" title="5. 杀死进程"></a>5. 杀死进程</h4><ul>
<li><p><strong>kill命令</strong>　杀死单一进程</p>
<ul>
<li><code>kill -l</code>：查看可用的进程信号</li>
<li><code>kill -1 4399</code>：重启进程</li>
<li><code>kill -9 4399</code>：强制杀死进程</li>
</ul>
</li>
<li><p><strong>killall命令</strong> </p>
<ul>
<li><code>killall [选项][进程]进程名</code>：按照进程名杀死进程</li>
<li><strong>选项：</strong><ul>
<li>-i：交互式，询问是否要杀死某个进程</li>
<li>-I：忽略进程名的大小写</li>
</ul>
</li>
</ul>
</li>
<li><strong>pkill命令</strong><ul>
<li><code>pkill [选项][进程]进程名</code>：按照进程名终止进程</li>
<li><strong>选项：</strong><ul>
<li>-t：终端号：按照终端号剔除用户 　　//踢掉用户 pkill -9 -t pts/?</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="6-进程优先级"><a href="#6-进程优先级" class="headerlink" title="6. 进程优先级"></a>6. 进程优先级</h4><p>　　Linux 操作系统是一个多用户，多任务的操作系统，Linux 系统中同时运行着非常多的进程。但 CPU 在同一时钟周期内只能运算一个指令。进程优先级决定了每个进程处理的先后顺序。</p>
<p><strong>注意</strong>：<br>系统优先级：只有NI可以改，priority由两个值PRI,NI相加<br><code>nice</code>：使用前必须先停止进程<br><code>renice</code>：可以修正在运行的进程</p>
<ul>
<li><p><strong>nice命令</strong></p>
<ul>
<li><code>nice [选项] 命令</code>：可以给新执行的命令直接赋<code>NI</code>值，但不能修改已经存在的进程的<code>NI</code>值</li>
<li><strong>选项：</strong><ul>
<li>-n NI值：给命令赋予<code>NI</code>值</li>
</ul>
</li>
<li><strong>例如：</strong>  <ul>
<li>nice -n -5 service httpd start</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>renice命令</strong> </p>
<ul>
<li><code>renice [优先级] PID</code>：修改已经存在进程的<code>NI</code>值的命令</li>
<li><strong>例如：</strong><ul>
<li>renice -10 2125</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>修改NI值时有几个注意事项</strong></p>
<ul>
<li>NI 的值的范围是  <code>-20~19</code></li>
<li>普通用户调整 NI 的值的范围是 <code>0~19</code>，而且只能调整自己的进程</li>
<li>普通用户只能调高 NI值，不能降低</li>
<li>root 用户才能设定进程 NI 值为负值，而且可以调整任何用户的进程</li>
<li>PRI（最终值） = PRI（原始值）+ NI</li>
<li>用户只能修改 NI 值，不能直接修改时 PRI</li>
<li>数字越小，优先级越高</li>
</ul>
<h3 id="二、工作管理"><a href="#二、工作管理" class="headerlink" title="二、工作管理"></a>二、工作管理</h3><p>　　工作管理指的是在单个登录终端中（也就是登录的 shell 界面中）同时管理多个工作的行为</p>
<p><strong>注意事项：</strong></p>
<ul>
<li>当前的登录终端，只能管理当前终端的工作，而不能管理其他登录终端的工作</li>
<li>放入后台的命令必须可以持续运行一段时间，这样我们才能捕捉和操作这个工作</li>
<li>放入后台执行的命令不能和前台用户有交互或需要前台输入，否则放入后台只能暂停，而不能执行</li>
</ul>
<h4 id="1-把进程放入后台"><a href="#1-把进程放入后台" class="headerlink" title="1. 把进程放入后台"></a>1. 把进程放入后台</h4><ul>
<li><code>tar -zcf etc.tar.gz/etc &amp;</code> 　#在命令后加入<code>&amp;</code>,把命令放在后台执行</li>
<li>按下<code>ctrl + z</code>快捷键，放在后台暂停</li>
</ul>
<h4 id="2-查看后台的工作"><a href="#2-查看后台的工作" class="headerlink" title="2. 查看后台的工作"></a>2. 查看后台的工作</h4><ul>
<li><code>jobs [-l]</code></li>
<li><p><strong>选项：</strong></p>
<ul>
<li>-l：显示工作的 PID</li>
</ul>
</li>
<li><p><strong>注意：</strong></p>
<ul>
<li><code>+</code> 代表最近一个放入后台的工作，也是工作回复时，默认恢复的工作</li>
<li><code>-</code> 代表倒数第二个放入后台的工作 </li>
</ul>
</li>
</ul>
<h4 id="3-将后台暂停的工作恢复到前台执行"><a href="#3-将后台暂停的工作恢复到前台执行" class="headerlink" title="3. 将后台暂停的工作恢复到前台执行"></a>3. 将后台暂停的工作恢复到前台执行</h4><ul>
<li><code>fg %工作号</code>　#恢复前台运行</li>
<li><code>bg %工作号</code>　#恢复后台运行(不能有交互)</li>
</ul>
<h4 id="4-后台命令脱离终端执行"><a href="#4-后台命令脱离终端执行" class="headerlink" title="4. 后台命令脱离终端执行"></a>4. 后台命令脱离终端执行</h4><p>把命令放入后台，只能在当前登录终端执行。一旦退出或关闭终端，后台程序就会停止    </p>
<p>后台命令脱离登录终端执行的方法：</p>
<ul>
<li>把需要后台执行的命令加入 /etc/rc.local文件</li>
<li>使用系统定时任务，让系统在指定的时间执行某个后台命令</li>
<li>使用 nohup命令（常用）<br>nohup  命令  &amp;</li>
</ul>
<h3 id="三、系统资源查看"><a href="#三、系统资源查看" class="headerlink" title="三、系统资源查看"></a>三、系统资源查看</h3><h4 id="1-vmstat-命令监控系统资源"><a href="#1-vmstat-命令监控系统资源" class="headerlink" title="1. vmstat 命令监控系统资源"></a>1. vmstat 命令监控系统资源</h4><ul>
<li><code>vmstat [刷新延时 刷新次数]</code></li>
<li><strong>例如：</strong><ul>
<li>vmstat 1 3</li>
</ul>
</li>
</ul>
<h4 id="2-dmsg-开机时内核检测信息"><a href="#2-dmsg-开机时内核检测信息" class="headerlink" title="2. dmsg 开机时内核检测信息"></a>2. dmsg 开机时内核检测信息</h4><ul>
<li><code>dmesg</code></li>
<li><code>dmesg | grep CPU</code></li>
</ul>
<h4 id="3-free-命令查看内存使用状态"><a href="#3-free-命令查看内存使用状态" class="headerlink" title="3. free 命令查看内存使用状态"></a>3. free 命令查看内存使用状态</h4><ul>
<li><code>free [-b|-k|-m|-g]</code></li>
<li><strong>选项：</strong><ul>
<li>-b：以字节为单位显示</li>
<li>-k：以KB为单位显示，默认就是以KB为单位显示</li>
<li>-m：以MB为单位显示</li>
<li>-g：以GB为单位显示</li>
</ul>
</li>
</ul>
<h4 id="4-查看-cpu-信息"><a href="#4-查看-cpu-信息" class="headerlink" title="4. 查看 cpu 信息"></a>4. 查看 cpu 信息</h4><ul>
<li><code>cat /proc/cpuinfo</code></li>
</ul>
<h4 id="5-uptime-命令"><a href="#5-uptime-命令" class="headerlink" title="5. uptime 命令"></a>5. uptime 命令</h4><ul>
<li><code>uptime</code><ul>
<li>#显示系统的启动时间和平均负载，也就是top命令的第一行。w命令也可以看到这个数据</li>
</ul>
</li>
</ul>
<h4 id="6-查看系统与内核相关信息"><a href="#6-查看系统与内核相关信息" class="headerlink" title="6. 查看系统与内核相关信息"></a>6. 查看系统与内核相关信息</h4><ul>
<li><code>uname [选项]</code></li>
<li><strong>选项：</strong><ul>
<li>-a：查看系统所有相关信息；</li>
<li>-r：查看内核版本；</li>
<li>-s：查看内核名称。</li>
</ul>
</li>
</ul>
<h4 id="7-列出进程打开或使用的文件信息"><a href="#7-列出进程打开或使用的文件信息" class="headerlink" title="7. 列出进程打开或使用的文件信息"></a>7. 列出进程打开或使用的文件信息</h4><ul>
<li><code>lsof [选项]</code>　#列出进程调用或打开的文件信息</li>
<li><strong>选项：</strong><ul>
<li>-c 字符串：只列出以字符串开头的进程打开的文件</li>
<li>-u 用户名：只列出某个用户的进程打开的文件</li>
<li>-p pid：列出某个PID进程打开的文件</li>
</ul>
</li>
</ul>
<p><strong>缓冲和缓存的区别</strong><br>缓存（cache ) 是用来加速数据从硬盘中读取的<br>缓冲（buffer）是用来加速数据写入硬盘的</p>
<p><strong>查看当前Linux系统的发现版本</strong><br><code>lsb_release -a</code></p>
<p><strong>判断当前系统的位数</strong><br><code>file /bin/ls</code></p>
<h3 id="四、系统定时任务"><a href="#四、系统定时任务" class="headerlink" title="四、系统定时任务"></a>四、系统定时任务</h3><h4 id="1-at-一次执行"><a href="#1-at-一次执行" class="headerlink" title="1. at 一次执行"></a>1. at 一次执行</h4><h5 id="①-确定-at-安装"><a href="#①-确定-at-安装" class="headerlink" title="① 确定 at 安装"></a>① 确定 <code>at</code> 安装</h5><ul>
<li><code>chkconfig --list | grep atd</code>　#<code>at</code>服务是否安装</li>
<li><code>service atd restart</code>  #<code>at</code>服务的启动</li>
</ul>
<h5 id="②-at的访问控制"><a href="#②-at的访问控制" class="headerlink" title="② at的访问控制"></a>② <code>at</code>的访问控制</h5><ul>
<li>如果系统中有/etc/at.allow文件，那么只有写入/etc/at.allow文件（白名单）中的用户可以使用at命令（/etc/at.deny文件会被忽略）</li>
<li>如果系统中没有/etc/at.allow文件，只有/etc/at.deny文件，那么写入/etc/at.deny文件（黑名单）中的用户不能使用at命令（注意：对root用户不起作用）</li>
<li>如果系统中这两个文件都不存在，那么只有root用户可以使用at命令</li>
</ul>
<h5 id="③-at命令"><a href="#③-at命令" class="headerlink" title="③ at命令"></a>③ <code>at</code>命令</h5><ul>
<li><code>at [选项] 时间</code></li>
<li>m：当at工作完成后，无论是否命令有输出，都用email通知执行at命令的用户</li>
<li>c 工作号：显示该at工作的实际内容</li>
<li>时间：<ul>
<li>HH:MM</li>
<li>HH:MM YYYY-MM-DD</li>
<li>HH:MM[am|pm] [month][date]</li>
<li>HH:MM +[minutes|hours|days|weeks]</li>
</ul>
</li>
</ul>
<h5 id="④-例子"><a href="#④-例子" class="headerlink" title="④ 例子"></a>④ 例子</h5><p>在两分钟之后执行hello.sh脚本<br><code>at now + 2 minutes</code><br><code>at&gt; /root/hello.sh &gt;&gt; /root/hello.log</code></p>
<h5 id="⑤-其他at管理命令"><a href="#⑤-其他at管理命令" class="headerlink" title="⑤ 其他at管理命令"></a>⑤ 其他<code>at</code>管理命令</h5><ul>
<li><code>atq</code>　#查询当前服务器上的<code>at</code>工作</li>
<li><code>atrm [工作号]</code>　#删除指定的<code>at</code>任务</li>
</ul>
<h4 id="2-crontab-循环定时"><a href="#2-crontab-循环定时" class="headerlink" title="2. crontab 循环定时"></a>2. crontab 循环定时</h4><h5 id="①-crond-服务管理与访问控制"><a href="#①-crond-服务管理与访问控制" class="headerlink" title="①  crond 服务管理与访问控制"></a>①  crond 服务管理与访问控制</h5><ul>
<li><code>service crond restar</code></li>
<li><code>chkconfig crond on</code></li>
</ul>
<h5 id="②-用户的-crontab-设置"><a href="#②-用户的-crontab-设置" class="headerlink" title="②  用户的 crontab 设置"></a>②  用户的 crontab 设置</h5><ul>
<li><code>crontab [选项]</code></li>
<li><strong>选项：</strong><ul>
<li>-e：编辑crontab定时任务</li>
<li>-l：查询crontab任务</li>
<li>-r：删除当前用户所有的crontab任务</li>
</ul>
</li>
</ul>
<h5 id="③-常用命令"><a href="#③-常用命令" class="headerlink" title="③  常用命令"></a>③  常用命令</h5><ul>
<li><code>crontab -l</code>　#查看root用户的crontab任务</li>
<li><code>crontab -r</code>　#删除root用户所有的定时任务</li>
<li><code>crontab -e</code>　＃添加crontab任务</li>
</ul>
<h5 id="④-crontab-注意事项"><a href="#④-crontab-注意事项" class="headerlink" title="④  crontab 注意事项"></a>④  crontab 注意事项</h5><ul>
<li>六个选项不能为空</li>
<li>crontab定时任务最小有效时间为分钟，最大为月</li>
<li>日期和星期最好不要同时出现</li>
<li>执行任务写绝对路径</li>
</ul>
<p><strong>访问控制</strong></p>
<ul>
<li>如果系统中有/etc/cron.allow文件(白名单)，那么只有在此名单下的用户可以使用cron命令；</li>
<li>如果系统中没有/etc/cron.allow文件，只有/etc/cron.deny文件(黑名单)，那么在此名单下的用户不能使用cron命令【对root不起作用】</li>
<li>如果系统这两个文件都不存在，那么只有root用户可以使用cron命令</li>
</ul>
<p><strong>crontab格式：</strong></p>
<ul>
<li><code>* * * * * 执行的任务</code></li>
<li>第一个*：一小时当中的第几分钟，范围0-59</li>
<li>第二个*：一天当中的第几小时，范围0-23</li>
<li>第三个*：一个月当中的第几天，范围1-31</li>
<li>第四个*：一年当中的第几月，范围1-12</li>
<li>第五个*：一周当中的星期几，范围0-7（0和7都代表星期日）</li>
</ul>
<p><strong>crontab 举例：</strong></p>
<ul>
<li>45 22 <em> </em> * 命令：在22点45分执行命令</li>
<li>0 17 <em> </em> 1 命令：每周一的17点0分执行命令</li>
<li>0 5 1,15 <em> </em> 命令：每月1号和15号的凌晨5点0分执行命令</li>
<li>40 4 <em> </em> 1-5 命令：每周一到五的凌晨4点40分执行命令</li>
<li><em>/10 4 </em> <em> </em> 命令：每天的凌晨4点，每隔10分钟执行一次命令</li>
<li>0 0 1,15 * 1 命令：每月1号和15号，以及每周一的0点0分都执行命令</li>
</ul>
<h4 id="3-执行系统的定时任务的方法："><a href="#3-执行系统的定时任务的方法：" class="headerlink" title="3. 执行系统的定时任务的方法："></a>3. 执行系统的定时任务的方法：</h4><p>第一种：手工执行定时任务（crontab -e，默认当前用户）<br>第二种：系统定时任务</p>
<ol>
<li>把需要定时执行的脚本复制到/etc/cron.{daily,weekly,monthly}目录中的任意一个</li>
<li>修改/etc/crontab配置文件（必须指定用户）</li>
</ol>
<blockquote>
<p>Reference:<br> <a href="http://www.imooc.com/learn/583" target="_blank" rel="noopener">IMOOC-Linux系统管理</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 优化]]></title>
      <url>/mysql-optimize.html</url>
      <content type="html"><![CDATA[<p>下面说的优化基于 MySQL 5.6，理论上 5.5 之后的都算试用，具体还是要看官网<br><a id="more"></a></p>
<h3 id="服务状态查询"><a href="#服务状态查询" class="headerlink" title="服务状态查询"></a>服务状态查询</h3><ul>
<li>查看当前数据库的状态，常用的有：<ul>
<li>查看当前MySQL中已经记录了多少条慢查询，前提是配置文件中开启慢查询记录了.<ul>
<li><code>SHOW STATUS LIKE &#39;%slow_queries%&#39;;</code></li>
</ul>
</li>
<li>查询当前MySQL中查询、更新、删除执行多少条了，可以通过这个来判断系统是侧重于读还是侧重于写，如果是写要考虑使用读写分离。<ul>
<li><code>SHOW STATUS LIKE &#39;%Com_select%&#39;;</code></li>
<li><code>SHOW STATUS LIKE &#39;%Com_update%&#39;;</code></li>
<li><code>SHOW STATUS LIKE &#39;%Com_delete%&#39;;</code></li>
</ul>
</li>
<li>显示MySQL服务启动运行了多少时间，如果MySQL服务重启，该时间重新计算，单位秒<ul>
<li><code>SHOW STATUS LIKE &#39;uptime&#39;;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><ul>
<li>使用 EXPLAIN 进行 SQL 语句分析：<code>EXPLAIN SELECT * FROM sys_user;</code></li>
<li>得到的结果有下面几列：<ul>
<li>id，该列表示当前结果序号，无特殊意义，不重要</li>
<li>select_type，表示 SELECT 语句的类型，有下面几种<ul>
<li>SIMPLE，表示简单查询，其中不包括连接查询和子查询</li>
<li>PRIMARY，表示主查询，或者是最外面的查询语句。比如你使用一个子查询语句，比如这条 SQL：<code>EXPLAIN SELECT * FROM (SELECT sys_user_id FROM sys_user WHERE sys_user_id = 1) AS temp_table;</code><ul>
<li>这条 SQL 有两个结果，其中有一个结果的类型就是 PRIMARY</li>
</ul>
</li>
<li>UNION，使用 UNION 的SQL是这个类型</li>
<li>DERIVED，在 SQL 中 From 后面子查询</li>
<li>SUBQUERY，子查询</li>
<li>还有其他一些</li>
</ul>
</li>
<li>table，表名或者是子查询的一个结果集</li>
<li>type，表示表的链接类型，分别有（以下的连接类型的顺序是从最佳类型到最差类型）<strong>（这个属性重要）</strong>：<ul>
<li>性能好：<ul>
<li>system，表仅有一行，这是const类型的特列，平时不会出现，这个也可以忽略不计。</li>
<li>const，数据表最多只有一个匹配行，因为只匹配一行数据，所以很快，常用于PRIMARY KEY或者UNIQUE索引的查询，可理解为const是最优化的。</li>
<li>eq_ref，mysql手册是这样说的:”对于每个来自于前面的表的行组合，从该表中读取一行。这可能是最好的联接类型，除了const类型。它用在一个索引的所有部分被联接使用并且索引是UNIQUE(唯一键)也不是PRIMARY KEY(主键)”。eq_ref可以用于使用=比较带索引的列。</li>
<li>ref，查询条件索引既不是UNIQUE(唯一键)也不是PRIMARY KEY(主键)的情况。ref可用于=或&lt;或&gt;操作符的带索引的列。</li>
<li>ref_or_null，该联接类型如同ref，但是添加了MySQL可以专门搜索包含NULL值的行。在解决子查询中经常使用该联接类型的优化。</li>
</ul>
</li>
<li>性能较差：<ul>
<li>index_merge，该联接类型表示使用了索引合并优化方法。在这种情况下，key列包含了使用的索引的清单，key_len包含了使用的索引的最长的关键元素。</li>
<li>unique_subquery，该类型替换了下面形式的IN子查询的ref: <code>value IN (SELECT primary_key FROM single_table WHERE some_expr)</code>。unique_subquery 是一个索引查找函数,可以完全替换子查询,效率更高。</li>
<li>index_subquery，该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一索引: <code>value IN (SELECT key_column FROM single_table WHERE some_expr)</code></li>
<li>range，只检索给定范围的行,使用一个索引来选择行。</li>
<li>index，该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。</li>
</ul>
</li>
<li>性能最差：<ul>
<li>ALL，对于每个来自于先前的表的行组合,进行完整的表扫描。（性能最差）</li>
</ul>
</li>
</ul>
</li>
<li>possible_keys，指出MySQL能使用哪个索引在该表中找到行。如果该列为NULL，说明没有使用索引，可以对该列创建索引来提供性能。<strong>（这个属性重要）</strong></li>
<li>key，显示MySQL实际决定使用的键(索引)。如果没有选择索引,键是NULL。<strong>（这个属性重要）</strong></li>
<li>key_len，显示MySQL决定使用的键长度。如果键是NULL,则长度为NULL。注意：key_len是确定了MySQL将实际使用的索引长度。</li>
<li>ref，显示使用哪个列或常数与key一起从表中选择行。</li>
<li>rows，显示MySQL认为它执行查询时必须检查的行数。<strong>（这个属性重要）</strong></li>
<li>Extra，该列包含MySQL解决查询的详细信息：<ul>
<li>Distinct:MySQL发现第1个匹配行后,停止为当前的行组合搜索更多的行。</li>
<li>Not exists:MySQL能够对查询进行LEFT JOIN优化,发现1个匹配LEFT JOIN标准的行后,不再为前面的的行组合在该表内检查更多的行。</li>
<li>range checked for each record (index map: #):MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。</li>
<li>Using filesort:MySQL需要额外的一次传递,以找出如何按排序顺序检索行。</li>
<li>Using index:从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。</li>
<li>Using temporary:为了解决查询,MySQL需要创建一个临时表来容纳结果。</li>
<li>Using where:WHERE 子句用于限制哪一个行匹配下一个表或发送到客户。</li>
<li>Using sort_union(…), Using union(…), Using intersect(…):这些函数说明如何为index_merge联接类型合并索引扫描。</li>
<li>Using index for group-by:类似于访问表的Using index方式,Using index for group-by表示MySQL发现了一个索引,可以用来查 询GROUP BY或DISTINCT查询的所有列,而不要额外搜索硬盘访问实际的表。</li>
</ul>
</li>
</ul>
</li>
<li>了解对索引不生效的查询情况 <strong>（这个属性重要）</strong><ul>
<li>使用LIKE关键字的查询，在使用LIKE关键字进行查询的查询语句中，如果匹配字符串的第一个字符为“%”，索引不起作用。只有“%”不在第一个位置，索引才会生效。</li>
<li>使用联合索引的查询，MySQL可以为多个字段创建索引，一个索引可以包括16个字段。对于联合索引，只有查询条件中使用了这些字段中第一个字段时，索引才会生效。</li>
<li>使用OR关键字的查询，查询语句的查询条件中只有OR关键字，且OR前后的两个条件中的列都是索引列时，索引才会生效，否则，索引不生效。</li>
</ul>
</li>
<li>子查询优化<ul>
<li>MySQL从4.1版本开始支持子查询，使用子查询进行SELECT语句嵌套查询，可以一次完成很多逻辑上需要多个步骤才能完成的SQL操作。</li>
<li>子查询虽然很灵活，但是执行效率并不高。</li>
<li>执行子查询时，MYSQL需要创建临时表，查询完毕后再删除这些临时表，所以，子查询的速度会受到一定的影响。</li>
<li>优化：<ul>
<li>可以使用连接查询（JOIN）代替子查询，连接查询时不需要建立临时表，其速度比子查询快。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="数据库结构优化"><a href="#数据库结构优化" class="headerlink" title="数据库结构优化"></a>数据库结构优化</h3><ul>
<li>将字段很多的表分解成多个表<ul>
<li>对于字段较多的表，如果有些字段的使用频率很低，可以将这些字段分离出来形成新表。</li>
<li>因为当一个表的数据量很大时，会由于使用频率低的字段的存在而变慢。</li>
</ul>
</li>
<li>增加中间表<ul>
<li>对于需要经常联合查询的表，可以建立中间表以提高查询效率。</li>
<li>通过建立中间表，将需要通过联合查询的数据插入到中间表中，然后将原来的联合查询改为对中间表的查询。</li>
</ul>
</li>
<li>增加冗余字段<ul>
<li>设计数据表时应尽量遵循范式理论的规约，尽可能的减少冗余字段，让数据库设计看起来精致、优雅。但是，合理的加入冗余字段可以提高查询速度。</li>
</ul>
</li>
</ul>
<h3 id="插入数据的优化（适用于-InnoDB）"><a href="#插入数据的优化（适用于-InnoDB）" class="headerlink" title="插入数据的优化（适用于 InnoDB）"></a>插入数据的优化（适用于 InnoDB）</h3><ul>
<li>插入数据时，影响插入速度的主要是索引、唯一性校验、一次插入的数据条数等。</li>
<li>开发环境情况下的考虑：<ul>
<li>开发场景中，如果需要初始化数据，导入数据等一些操作，而且是开发人员进行处理的，可以考虑在插入数据之前，先禁用整张表的索引，<ul>
<li>禁用索引使用 SQL：<code>ALTER TABLE table_name DISABLE KEYS;</code></li>
<li>当导入完数据之后，重新让MySQL创建索引，并开启索引：<code>ALTER TABLE table_name ENABLE KEYS;</code></li>
</ul>
</li>
<li>如果表中有字段是有唯一性约束的，可以先禁用，然后在开启：<ul>
<li>禁用唯一性检查的语句：<code>SET UNIQUE_CHECKS = 0;</code></li>
<li>开启唯一性检查的语句：<code>SET UNIQUE_CHECKS = 1;</code></li>
</ul>
</li>
<li>禁用外键检查（建议还是少量用外键，而是采用代码逻辑来处理）<ul>
<li>插入数据之前执行禁止对外键的检查，数据插入完成后再恢复，可以提供插入速度。</li>
<li>禁用：<code>SET foreign_key_checks = 0;</code></li>
<li>开启：<code>SET foreign_key_checks = 1;</code></li>
</ul>
</li>
<li>使用批量插入数据</li>
<li>禁止自动提交<ul>
<li>插入数据之前执行禁止事务的自动提交，数据插入完成后再恢复，可以提供插入速度。</li>
<li>禁用：<code>SET autocommit = 0;</code></li>
<li>开启：<code>SET autocommit = 1;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="服务器优化"><a href="#服务器优化" class="headerlink" title="服务器优化"></a>服务器优化</h3><ul>
<li>好硬件大家都知道，这里没啥好说</li>
<li>通过优化 MySQL 的参数可以提高资源利用率，从而达到提高 MySQL 服务器性能的目的。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-290. Word Pattern]]></title>
      <url>/leetcode-290-word-pattern.html</url>
      <content type="html"><![CDATA[<p>Given a pattern and a string str, find if str follows the same pattern.<br><a id="more"></a><br>Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.</p>
<p><strong>Examples:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pattern = &quot;abba&quot;, str = &quot;dog cat cat dog&quot; should return true.</span><br><span class="line">pattern = &quot;abba&quot;, str = &quot;dog cat cat fish&quot; should return false.</span><br><span class="line">pattern = &quot;aaaa&quot;, str = &quot;dog cat cat dog&quot; should return false.</span><br><span class="line">pattern = &quot;abba&quot;, str = &quot;dog dog dog dog&quot; should return false.</span><br></pre></td></tr></table></figure></p>
<p><strong>Notes:</strong><br>You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.<br><strong>代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public boolean wordPattern(String pattern, String str) &#123;</span><br><span class="line">        String[] strs = str.split(&quot; &quot;);  </span><br><span class="line">        if(pattern.length() != strs.length) return false;  </span><br><span class="line">        Map&lt;Character, String&gt; map = new HashMap&lt;Character, String&gt;();  </span><br><span class="line">        for(int i=0;i&lt;pattern.length();i++) &#123;  </span><br><span class="line">            if(!map.containsKey(pattern.charAt(i))) &#123;  </span><br><span class="line">                if(map.containsValue(strs[i])) return false;  </span><br><span class="line">                map.put(pattern.charAt(i), strs[i]);  </span><br><span class="line">            &#125;else &#123;  </span><br><span class="line">                if(strs[i].equals(map.get(pattern.charAt(i)))) continue;  </span><br><span class="line">                else return false;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return true; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-205. Isomorphic Strings]]></title>
      <url>/leetcode-205-isomorphic-strings.html</url>
      <content type="html"><![CDATA[<p>Given two strings s and t, determine if they are isomorphic.<br><a id="more"></a><br>Two strings are isomorphic if the characters in s can be replaced to get t.</p>
<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.<br><strong>For example,</strong><br>Given <code>&quot;egg&quot;, &quot;add&quot;</code>, return <code>true</code>.<br>Given <code>&quot;foo&quot;, &quot;bar&quot;</code>, return <code>false</code>.<br>Given <code>&quot;paper&quot;, &quot;title&quot;</code>, return <code>true</code>.</p>
<p><strong>Note:</strong><br>You may assume both s and t have the same length.</p>
<p><strong>代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public boolean isIsomorphic(String s, String t) &#123;</span><br><span class="line">        if (s == null || t == null || s.length() != s.length()) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        HashMap&lt;Character,Character&gt; m1 = new HashMap&lt;Character,Character&gt;();</span><br><span class="line">        HashMap&lt;Character,Character&gt; m2 = new HashMap&lt;Character,Character&gt;();</span><br><span class="line">        for (int i = 0; i &lt; s.length(); i++) &#123;</span><br><span class="line">            if (!m1.containsKey(s.charAt(i))) &#123;</span><br><span class="line">                if (m2.containsKey(t.charAt(i))) return false;</span><br><span class="line">                m1.put(s.charAt(i), t.charAt(i));</span><br><span class="line">                m2.put(t.charAt(i), s.charAt(i));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (m1.get(s.charAt(i)) != t.charAt(i)) return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-167. Two Sum II - Input array is sorted]]></title>
      <url>/leetcode-167-two-sum-II.html</url>
      <content type="html"><![CDATA[<p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.<br><a id="more"></a><br>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>
<p>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>
<p><strong>Input:</strong> numbers={2, 7, 11, 15}, target=9<br><strong>Output:</strong> index1=1, index2=2</p>
<p><strong>思路</strong><br>因为数组是有序的，所以通过二分法解决。</p>
<p><strong>代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] numbers, int target) &#123;</span><br><span class="line">        if(numbers==null || numbers.length &lt; 1) return null;</span><br><span class="line">        int i=0, j=numbers.length-1;</span><br><span class="line">        while(i&lt;j) &#123;</span><br><span class="line">            int x = numbers[i] + numbers[j];</span><br><span class="line">            if(x&lt;target) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; else if(x&gt;target) &#123;</span><br><span class="line">                --j;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return new int[]&#123;i+1, j+1&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读《程序员修炼之道》]]></title>
      <url>/the-pragmatic-programmer.html</url>
      <content type="html"><![CDATA[<blockquote>
<p> 不能记住过去的人，被判重复过去。　　　　　　　　　　–《程序员修炼之道》<br><a id="more"></a></p>
</blockquote>
<p>　　这句引言，一直被我用作座右铭，当在书中读到这句的时候，感触颇深，也是我打算开始写博客记录生活的开始。跟这本书的机缘巧合，来自于之前公司的一个学长，他看完了，我便借来看了。<br>　　在序章中看到无数褒奖，我很担心这本书又是一些把技术当做禅宗佛学讲道的废话，看了一些的时候，了解到这本书涵盖程序员成长过程中和软件开发中需要注意的地方，从程序员的个体哲学到编码过程的各个环节，再到团队的项目管理，从程序员如何扩充知识，如何思考问题，如何利用有效工具打造个人环境，到项目启动之前如何建立一些基本准则，如何分析、设计、编写、测试、重构，如何实现自动化，甚至是项目团队中提高实效的原则，编程是一门手艺，这样的工匠精神更是一次一次感化着我幼小的心灵。</p>
<h4 id="注重实效的程序员的两个特点"><a href="#注重实效的程序员的两个特点" class="headerlink" title="注重实效的程序员的两个特点"></a>注重实效的程序员的两个特点</h4><blockquote>
<p>Care About Your Craft<br>关心你的技艺</p>
</blockquote>
<p> 　　编程技术就是程序员的手艺，你的程序就是你的艺术品。时刻关注自己的技艺，保持热情、保持好奇，争取做到富有专长而又多才多艺。<br>　　关于程序员这个职业，引用@左耳朵耗子的一段微博：没哪个行业能像计算机行业这么活跃、刺激和有趣了。不仅是新兴工业革命的主力，又渗入到所有的行业中，干一辈子值了。//@_你亲爱的偏执狂: 程序员首先是工程师，Professional，就跟律师，医生一样，给大家解决问题；但是另一面呢，又是艺术家，创造新奇好玩的东西。这样的职业做一辈子有什么问题？</p>
<blockquote>
<p>Think! About Your Work<br>思考！你的工作</p>
</blockquote>
<p>　　虽然软件开发是工程学，但每个程序员并不是螺丝钉，而是活跃的造血细胞。我们要思考需求，推敲设计，展望愿景，打磨细节；我们要思考如果提高工作效率，如何成长；在对权威产生疑惑时，我们又要批判的思考而不茫然接受。除去工程技术以外，逻辑思维能力才是程序员的核心竞争力，保持活跃、勤奋的思维。</p>
<h4 id="我的源码让猫给吃了"><a href="#我的源码让猫给吃了" class="headerlink" title="我的源码让猫给吃了"></a>我的源码让猫给吃了</h4><p>　　依据你的职业发展、你的项目和你每天的工作，为你自己和你的行为负责这样一种观念，是注重实效的哲学的一块基石。注重实效的程序员对他或她自己的职业生涯负责，并且不害怕承认无知或错误。这肯定并非是编程最令人愉悦的方面，但它肯定会发生——即使是在最好的项目中。尽管有彻底的测试、良好的文档以及足够的自动化，事情还是会出错。交付晚了，出现了未曾预见到的技术问题。<br>　　发生这样的事情，我们要设法尽可能职业地处理它们。这意味着诚实和坦率。我们可以为我们的能力自豪，但对于我们的缺点——还有我们的无知和我们的错误——我们必须诚实。</p>
<blockquote>
<p>Provide Options, Don’t Make Lame Excuses<br>提供各种选择，不要找蹩脚的借口</p>
</blockquote>
<p>　　这段对责任的描述并不只适用于程序员，但程序员可能会有自己的理解。面对历史遗留问题，是主动解决还是视而不见？问题发生时，是坦然担当还是去blame是猫吃了你的代码？</p>
<blockquote>
<p>Sign Your Work<br>在你的作品上签名</p>
</blockquote>
<p>　　过去时代的手艺人为能在他们的作品上签名而自豪。你也应该如此。“这是我编写的，我对自己的工作负责。”你的签名应该被视为质量的保证。当人们在一段代码上看到你的名字时，应该期望它是可靠的、用心编写的、测试过的和有文档的，一个真正的专业作品，由真正的专业人员编写。<br>　　关于签名我们曾经在代码规范中推行过，在类的头文件中加入类似下面的注释。有签名在对自己是鞭策，其它工友也容易找到你咨询问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//------------------------------------------------------------------------------</span><br><span class="line">//</span><br><span class="line">//    版权所有(C)被猫吃了技术有限公司保留所有权利</span><br><span class="line">//</span><br><span class="line">//    创建者:  被猫吃了</span><br><span class="line">//    创建日期: 2013-9-11</span><br><span class="line">//    功能描述: 被猫吃了</span><br><span class="line">//</span><br><span class="line">//------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>
<h4 id="软件的熵"><a href="#软件的熵" class="headerlink" title="软件的熵"></a>软件的熵</h4><p>　　熵是一个来自物理学的概念，指的是某个系统中的“无序”的总量。当软件中的无序增长时，程序员们称之为“软件腐烂”（software rot）。有许多因素可以促生软件腐烂。其中最重要的一个似乎是开发项目时的心理（或文化）。</p>
<blockquote>
<p>Don’t Live with Broken Windows<br>不要容忍破窗户</p>
</blockquote>
<p>　　不要留着程序中的“破窗户”不修，低劣的设计，临时的糟糕的方案等等。而往往我们又面对着诸多的“现实”，没时间重构，重构风险大没资源测试。可是我们会永远生活在“现实”里面，不可能有某一天万事具备、良辰吉日等着让你开始着手去修理这些“破窗户”。我们可以借助自动测试等手段来帮助我们降低风险。如果真的没办法立即修复，请一定要做到：<strong>把发现的“破窗户”记入TODO List，并且定期Review它</strong>。<br><strong>灭火的故事：</strong><br>　　作为对照，让我们讲述Andy的一个熟人的故事。他是一个富得让人讨厌的富翁，拥有一所完美、漂亮的房子，里面满是无价的古董、艺术品，以及诸如此类的东西。有一天，一幅挂毯挂得离他的卧室壁炉太近了一点，着了火。消防人员冲进来救火——和他的房子。但他们拖着粗大、肮脏的消防水管冲到房间门口却停住了——火在咆哮——他们要在前门和着火处之间铺上垫子。<br><strong>他们不想弄脏地毯。</strong><br>　　这的确是一个极端的事例，但我们必须以这样的方式对待软件。如果你发现你所在团队和项目的代码十分漂亮——编写整洁、设计良好，并且很优雅——你就很可能会格外注意不去把它弄脏，就和那些消防员一样。即使有火在咆哮（最后期限、发布日期、会展演示，等等），你也不会想成为第一个弄脏东西的人。</p>
<h4 id="重复的危害"><a href="#重复的危害" class="headerlink" title="重复的危害"></a>重复的危害</h4><p>　　给予计算机两项自相矛盾的知识，是James T. Kirk舰长（出自Star Trek，“星际迷航”——译注）喜欢用来使四处劫掠的人工智能生命失效的方法。遗憾的是，同样的原则也能有效地使你的代码失效。<br>　　我们觉得，可靠地开发软件、并让我们的开发更易于理解和维护的惟一途径，是遵循我们称之为DRY的原则：系统中的每一项知识都必须具有单一、无歧义、权威的表示。</p>
<blockquote>
<p>DRY – Don’t Repeat Yourself<br>不要重复你自己</p>
</blockquote>
<p>　　<strong>重复是代码中最坏的味道</strong>，大家可以回想一下，有多少Bug是因为重复代码漏改引起的，修改重复代码又浪费了多少时间。这么坏的东西一定要深恶痛绝！书中归纳了几种常见的重复类型：<br><strong>强加的重复（imposed duplication）</strong>。开发者觉得他们无可选择——环境似乎要求重复。强加的重复细分为四类：</p>
<ul>
<li><p><code>信息的多种表示</code>。举个例子，QT的语言源文件是(.ts文件)，会由QT工具编译为.qm文件提供给应用程序使用。现在PC千牛把这两个文件都提交到了SVN，而不是只提交.ts文件然后动态生成.qm文件。因为漏提交.qm文件已经出过几次文案显示异常的Bug。解决这类重复很简单，保证单一数据源，其它的表示方式都通过根据这个数据源自动生成。办法是有了，但真能保证做到吗？</p>
<blockquote>
<p>Write Code That WritesCode<br>编写能编写代码的代码</p>
</blockquote>
</li>
<li><p><code>代码中的文档</code>。DRY法则告诉我们，要把低级的知识放在代码中，它属于那里；把注释保留给其他的高级说明。否则，我们就是在重复知识，而每一次改变都意味着既要改变代码，也要改变注释。注释将不可避免地变得过时，而不可信任的注释比完全没有注释更糟。逻辑清楚的代码自身就是最好的注释，除非是诡异的商业需求、不得已的临时解决方案抑或是在困难问题前屈服后使用的非常规方案。所以只有糟糕的代码才需要许多注释。</p>
</li>
<li><code>文档与代码</code>。程序员们通常都有乖乖写文档的经历，但往往很难坚持，总有一天代码更新了，因为各种各样的理由，文档没有同步。所以在准备提供文档时请下定决心与做出承诺：保证要与代码进行同步的更新。</li>
<li><code>语言问题</code>。就像C++的.h和.cpp文件，声明与实现就在重复着相同的内容。为了达到模块实现与接口分离的目的，就会出现这类重复。没有简单的技术手段避免，好在信息不一致编译期间会有错误。理想的做法是接口文件能通过实现文件自动生成。</li>
</ul>
<p><strong>无意的重复（inadvertent duplication）</strong>。开发者没有意识到他们在重复信息。<br>有时，重复来自设计中的错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Line</span><br><span class="line">&#123;</span><br><span class="line">   Point  start;</span><br><span class="line">   Point  end;</span><br><span class="line">   double length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>　　第一眼看上去，这个类似乎是合理的。线段显然有起点和终点，并总是有长度（即使长度为零）。但这里有重复。长度是由起点和终点决定的：改变其中一个，长度就会变化。最好是让长度成为计算字段。在以后的开发过程中，你可以因为性能原因而选择违反DRY原则。这经常会发生在你需要缓存数据，以避免重复昂贵的操作时。其诀窍是使影响局部化。对DRY原则的违反没有暴露给外界：只有类中的方法需要注意“保持行为良好”。<br>　　把<code>DRY原则</code>真正的消化，在设计时就会对这类无意的重复敏感，从源头上减少重复发生的可能。<br><strong>无耐性的重复（impatient duplication）</strong>。开发者偷懒，他们重复，因为那样似乎更容易。每个项目都有时间压力，你会受到诱惑去拷贝代码来实现相似的功能，总是没有时间去抽象出组件或者公用函数。如果你觉得受到诱惑，想一想古老的格言：“欲速则不达”，“磨刀不误砍柴功”。“想一想围绕着Y2K惨败的种种问题。其中许多问题是由开发者的懒惰造成的：他们没有参数化日期字段的尺寸，或是实现集中的日期服务库。”<br><strong>开发者之间的重复（interdeveloper duplication）</strong>。同一团队（或不同团队）的几个人重复了同样的信息。在高层，可以通过清晰的设计、强有力的技术项目领导（参见288页“注重实效的团队”一节中的内容）、以及在设计中进行得到了充分理解的责任划分，对这个问题加以处理。我们觉得，处理这个问题的最佳方式是鼓励开发者相互进行主动的交流。想想散落在外的，数不清的旺旺版本，这何尝不是团队之间的重复呢？组件化的思考方式能缓解这个问题，在推进业务的同时，沉淀一些基础库与组件服务。之前在B2B积累的各种客户端组件，现在不就帮助PC千牛迅速变得强壮了吗？</p>
<blockquote>
<p>Make It Easy to Reuse<br>让复用变得容易</p>
</blockquote>
<p>　　你所要做的是营造一种环境，在其中要找到并复用已有的东西，比自己编写更容易。如果不容易，大家就不会去复用。而如果不进行复用，你们就会有重复知识的风险。</p>
<h4 id="时间耦合"><a href="#时间耦合" class="headerlink" title="时间耦合"></a>时间耦合</h4><p>　　时间是软件架构的一个常常被忽视的方面，吸引我们的时间只是进度表上的时间。作为软件自身的一种设计要素，时间有两个方面对我们很重要：并发和次序。我们在编程时，通常并没有把这两个方面放在心上。当人们最初坐下来开始设计架构、或是编写程序时，事情往往是线性的，那是大多数人的思考方式——总是先做这个，然后再做那个。但这样思考会带来时间耦合：在时间上的耦合，方法A必须总在方法B之前调用，“嘀”必须在“嗒”之前发生。<br>　　<code>程序在时序性上的依赖是客观存在的，我们需要做的是</code>：<br>　　1. 尽量减少不必要的时序依赖以提高并发能力；<br>　　2. 保证真正需要的时序依赖不存在被破坏的可能。人们通常会通过文档说明时序的依赖，就像MSDN中会写明使用COM之前必须调用CoInitialize()一样。但实际开发中时序上依赖通常会成为潜规则，只有当初开发的人自己知道，对后面维护的人来讲这就会是定时炸弹。对不得已的时序依赖一定要写入文档或者标明注释。</p>
<h4 id="正交性"><a href="#正交性" class="headerlink" title="正交性"></a>正交性</h4><p>　　正交性”是从几何学中借来的术语。如果两条直线相交成直角，它们就是正交的。在计算技术中，该术语用于表示某种不相依赖性或是解耦性。如果两个或更多事物中的一个发生变化，不会影响其他事物，这些事物就是正交的。</p>
<blockquote>
<p>Eliminate Effects BetweenUnrelated Things<br>消除无关事物之间的影响</p>
</blockquote>
<p>　　如果你编写正交的系统，你得到两个主要好处：提高生产率与降低风险。贯彻正交性原则可以促进组件化与复用；可以有效缩小错误代码影响的范围；更有利于单元测试。你也可以对项目团队的正交性进行衡量：只要看一看，在讨论每个所需改动时需要涉及多少人。人数越多，团队的正交性就越差。显然，正交的团队效率也更高（尽管如此，我们也鼓励子团队不断地相互交流）。<br>　　<code>正交性与DRY原则紧密相关</code>。运用DRY原则，你是在寻求使系统中的重复降至最小；运用正交性原则，你可降低系统的各组件间的相互依赖。这样说也许有点笨拙，但如果你紧密结合DRY原则、运用正交性原则，你将会发现你开发的系统会变得更为灵活、更易于理解、并且更易于调试、测试和维护。<br>　　这本书花了很大的篇幅讲述DRY原则和正交性（也就是解耦），也提供了很多有实践意义的方法。回想一下设计模式，很多模式也正是为了解决这两个问题。这两个原则大家一定都耳熟能详，这里引用序言书评中的一句话：“能不能让正确的原则指导正确的行为本身，其实就是区分是否是高手的一个显著标志”。知道很容易，尝试在日常开发中去实践从而真正内化，最终达到运用自如。<br>　　<code>我们认为违反这两个原则的设计和实现就是“破窗户“</code>。在确保自己不产生的同时，也要留意现有代码，发现问题抛出来，大家一起讨论如何优化何时优化（优化有风险，重构需谨慎）。最终要么消灭，要么确保一定被记录在案（把破窗口先用木板暂时封起来）。千万不要看到糟糕的代码皱皱眉、抱怨两句就结束了，把它放到TODO List里面！</p>
<h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>　　随着程序的演化，我们有必要重新思考早先的决策，并重写部分代码。这一过程非常自然。代码需要演化；它不是静态的事物。<br>　　无论代码具有下面的哪些特征，你都应该考虑重构代码：重复；非正交的设计；过时的知识（最典型的就是需求已经下线、方案已经改变，但过时代码却还残留甚至运行）；性能问题。<br>　　人们通常用肿瘤来比喻重构的必要性，在现实的时间压力面前，需要做出正确的选择。追踪需要重构的事物。如果你不能立刻重构某样东西，就一定要把它列入计划。确保受到影响的代码使用者知道该代码计划要重构，以及这可能会怎样影响他们。</p>
<blockquote>
<p>Refactor Early, Refactor Often<br>早重构，常重构</p>
</blockquote>
<p>书中给出了几点重构实践上的指导：</p>
<ol>
<li>不要试图在重构的同时增加功能。</li>
<li>在开始重构前，确保你拥有良好的测试。</li>
<li>采取短小，深思熟虑的步骤。把整体重构工作认真的分解为独立、轻量的几个步骤，每个步骤完成都可以进行测试，这将有助于快速定位问题。<br>####无处不在的自动化<br>　　让计算机去做重复、庸常的事情——它会做得比我们更好。我们有更重要、更困难的事情要做。<blockquote>
<p>Don’t Use Manual Procedures<br>不要使用手工流程</p>
</blockquote>
</li>
</ol>
<p>　　自动化为我们带来两个显而易见的好处：避免重复劳动提高效率；保持可靠的一致性与可重复性，排除人工作操作可能产生的错误。可以自动化的项目包括但不限于：项目编译，回归测试，构建与发布，通过单一数据源生成数据的其它表示。<br>　　“鞋匠的孩子没鞋穿”。我们是程序员，是否在的日常工作中经常制作自动化工具？至少掌握一门高级脚本语言用于快速开发自制工具。</p>
<h4 id="可撤销性"><a href="#可撤销性" class="headerlink" title="可撤销性"></a>可撤销性</h4><p>　　我们让本书的许多话题相互配合，以制作灵活、有适应能力的软件。通过遵循它们的建议——特别是DRY原则（26页）、解耦（138页）以及元数据的使用（144页）——我们不必做出许多关键的、不可逆转的决策。这是一件好事情，因为我们并非总能在一开始就做出最好的决策。我们采用了某种技术，却发现我们雇不到足够的具有必需技能的人。我们刚刚选定某个第三方供应商，他们就被竞争者收购了。与我们开发软件的速度相比，需求、用户以及硬件变得更快。</p>
<blockquote>
<p>There Are No FinalDecisions<br>不存在最终决策</p>
</blockquote>
<p>　　没有人知道未来会悄怎样，尤其是我们！所以要让你的代码学会“摇滚”：可以“摇”就“摇”，必须“滚”就“滚”。<br>　　<code>需求变更，是永恒的话题</code>。变更往往又总是不可避免、总是迫在眉睫。在设计与编码时尽可能的注意并应用以上几个原则，会让我们面对变化从容不迫，甚至可以达到“中流换马（change horses in midstream）”的灵活性。</p>
<h4 id="元程序设计"><a href="#元程序设计" class="headerlink" title="元程序设计"></a>元程序设计</h4><p>　　<code>细节会弄乱我们整洁的代码——特别是如果它们经常变化</code>。每当我们必须去改动代码，以适应商业逻辑、法律或管理人员个人一时的口味的某种变化时，我们都有破坏系统或引入新bug的危险。所以我们说“把细节赶出去！”把它们赶出代码。当我们在与它作斗争时，我们可以让我们的代码变得高度可配置和“柔软”——就就是，容易适应变化。<br>　　要用元数据（metadata）描述应用的配置选项：调谐参数、用户偏好、安装目录等等。元数据是数据的数据，最为常见的例子可能是数据库schema或数据词典。</p>
<blockquote>
<p>Configure,Don’t Integrate<br>要配置，不要集成</p>
</blockquote>
<p>　　但我们不只是想把元数据用于简单的偏好。我们想要尽可能多地通过元数据配置和驱动应用：为一般情况编写程序，把具体情况放在别处——在编译的代码库之外。</p>
<blockquote>
<p>Put Abstractions in Code,Details in Metadata<br>将抽象放进代码，细节放进元数据</p>
</blockquote>
<h4 id="曳-ye-光弹"><a href="#曳-ye-光弹" class="headerlink" title="曳(yè)光弹"></a>曳(yè)光弹</h4><p>　　译著中对曳光弹的描述有点难懂，百科中的解释：曳光弹是一种装有能发光的化学药剂的炮弹或枪弹，用于指示弹道和目标。曳光弹在光源不足或黑暗中可显示出弹道，协助射手进行弹道修正，甚至作为指引以及联络友军攻击方向与位置的方式与工具。<br>　　这个类比也许有点暴力，但它适用于新的项目，特别是当你构建从未构建过的东西时。与枪手一样，你也设法在黑暗中击中目标。因为你的用户从未见过这样的系统，他们的需求可能会含糊不清。因为你在使用不熟悉的算法、技术、语言或库，你面对着大量未知的事物。同时，因为完成项目需要时间，在很大程度上你能够确知，你的工作环境将在你完成之前发生变化。<br>　　经典的做法是把系统定死。制作大量文档，逐一列出每项需求、确定所有未知因素、并限定环境。根据死的计算射击。预先进行一次大量计算，然后射击并企望击中目标。<br>　　然而，注重实效的程序员往往更喜欢使用曳光弹。</p>
<blockquote>
<p>Use Tracer Bullets toFind the Target<br>用曳光弹找到目标</p>
</blockquote>
<p>　　曳光代码并非用过就扔的代码：你编写它，是为了保留它。它含有任何一段产品代码都拥有的完整的错误检查、结构、文档、以及自查。它只不过功能不全而已。但是，一旦你在系统的各组件间实现了端到端（end-to-end）的连接，你就可以检查你离目标还有多远，并在必要的情况下进行调整。一旦你完全瞄准，增加功能将是一件容易的事情。<br>　　曳光开发与项目永不会结束的理念是一致的：总有改动需要完成，总有功能需要增加。这是一个渐进的过程。<br>　　曳光开发其实大家或多或少都在参与。新项目创建时搭建框架代码，逐渐为框架添加功能正是这样一个过程。我们会在框架中让关键流程能够运行，以检验新技术在真实环境中的表现与预研的结果是否一致；检验整体设计是否有明显的性能问题；让用户尽早看到可工作的产品以提供反馈；为整个团队提供可以工作的结构与集成平台，大家只需要关心增加功能代码让框架更丰满。<br>　　曳光开发和原型模式有明显区别。原型中的代码是用过就扔的，寻求以最快的速度展示产品，甚至会采用更高级的语言。曳光代码虽然简约，但却是完成的，它拥有完整的错误检查与异常处理，只不过是功能不全而已。</p>
<h4 id="Bug与Debug"><a href="#Bug与Debug" class="headerlink" title="Bug与Debug"></a>Bug与Debug</h4><p>　　自从14世纪以来，bug一词就一直被用于描述“恐怖的东西”。COBOL的发明者，海军少将Grace Hopper博士据信观察到了第一只计算机bug——真的是一只虫子，一只在早期计算机系统的继电器里抓到的蛾子。在被要求解释机器为何未按期望运转时，有一位技术人员报告说，“有一只虫子在系统里”，并且负责地把它——翅膀及其他所有部分——粘在了日志簿里。<br><strong>调试的心理学</strong><br>　　发现了他人的bug之后，你可以花费时间和精力去指责让人厌恶的肇事者。但bug是你的过错还是别人的过错，并不是真的很有关系。它仍然是你的问题。</p>
<blockquote>
<p>Fix the Problem, Not theBlame<br>要修正问题，而不是发出指责</p>
</blockquote>
<p>　　人很容易恐慌，特别是如果你正面临最后期限的到来、或是正在设法找出bug的原因，有一个神经质的老板或客户在你的脖子后面喘气。但非常重要的事情是，要后退一步，实际思考什么可能造成你认为表征了bug的那些症状。</p>
<blockquote>
<p>Don’t Panic<br>不要恐慌</p>
</blockquote>
<p>　　bug有可能存在于OS、编译器、或是第三方产品中——但这不应该是你的第一想法。有大得多的可能性的是，bug存在于正在开发的应用代码中。记住，如果你看到马蹄印，要想到马，而不是斑马（这个比喻太棒了！）。OS很可能没有问题。数据库也很可能情况良好。<br>　　我们参加过一个项目的开发，有位高级工程师确信select系统调用在Solaris上有问题。再多的劝说或逻辑也无法改变他的想法（这台机器上的所有其他网络应用都工作良好这一事实也一样无济于事）。他花了数周时间编写绕开这一问题的代码，因为某种奇怪的原因，却好像并没有解决问题。当最后被迫坐下来、阅读关于select的文档时，他在几分钟之内就发现并纠正了问题。现在每当有人开始因为很可能是我们自己的故障而抱怨系统时，我们就会使用“select没有问题”作为温和的提醒。</p>
<blockquote>
<p>Select” Isn’t Broken<br>“Select”没有问题</p>
</blockquote>
<p>　　基于越是新添加的代码越可能引起问题的怀疑，书中推荐了二分查找的方法不断缩小范围，最终定位问题。这方法看起来很老土，但实践中往往很有效，在毫无头绪时不妨试一试。<br>　　在发现某个bug让你吃惊时（也许你在用我们听不到的声音咕哝说：“那不可能。”），你必须重新评估你确信不疑的“事实”。某样东西出错时，你感到吃惊的程度与你对正在运行的代码的信任及信心成正比。这就是为什么，在面对“让人吃惊”的故障时，你必须意识到你的一个或更多的假设是错的。不要因为你“知道”它能工作而轻易放过与bug有牵连的例程或代码。证明它。用这些数据、这些边界条件、在这个语境中证明它。<br>　　说到让人惊讶的bug，最近刚好经历了一次。关于PC千牛插件最大化行为的bug，我和杯酒电话中如何讨论都无法理解对方，最后到现场看了才明白。这个问题只会发作在低分辨率的电脑上，他是便携笔记本分辨率低，而我是高分屏的开发机。如果你目睹bug或见到bug报告时的第一反应是“那不可能”，你就完全错了。<strong>一个脑细胞都不要浪费在以“但那不可能发生”起头的思路上，因为很明显，那不仅可能，而且已经发生了</strong>。</p>
<blockquote>
<p>Don’t Assume it– Prove It<br>不要假定，要证明</p>
<h4 id="断言式编程"><a href="#断言式编程" class="headerlink" title="断言式编程"></a>断言式编程</h4><p>在自责中有一种满足感。当我们责备自己时，会觉得再没人有权责备我们。<br>　　——奥斯卡·王尔德：《多里安·格雷的画像》</p>
</blockquote>
<p>　　每一个程序员似乎都必须在其职业生涯的早期记住一段曼特罗（mantra）。它是计算技术的基本原则，是我们学着应用于需求、设计、代码、注释——也就是我们所做的每一件事情——的核心信仰。那就是：<code>这决不会发生……</code><br>　　“这些代码不会被用上30年，所以用两位数字表示日期没问题。”“这个应用决不会在国外使用，那么为什么要使其国际化？”“count不可能为负。”“这个printf不可能失败。”我们不要这样自我欺骗，特别是在编码时。</p>
<blockquote>
<p>If It Can’t Happen, Use Assertions to Ensure That It Won’t<br>如果它不可能发生，用断言确保它不会发生</p>
</blockquote>
<p>　　断言可能会引起副作用，因为断言可能会在编译时被关闭——决不要把必须执行的代码放在assert中。这个问题就是一种“海森堡虫子”（Heisenbug）——调试改变了被调试系统的行为。<br>　　断言的好处不言而喻，可以提高调试的效率，可以尽早的发现问题。调试的时候应该保持对断言敏感，如果自己没有时间去调查断言发生的原因，也应该把问题抛出来及时解决。如果对断言视而不见，也就失去了断言的意义。可以考虑在输出错误日志的方法中直接加入断言，往往需要记录错误的问题也是我们认为不应该发生或者需要引起关注的问题。到现在我还清晰的记得以前的一个Bug就是因为断言副作用引起的，因为我写了这样的代码：ASSERT(SUCCEEDED(Initialize()));，调试时一切正常，当以release编译发布测试包时就出现了问题。</p>
<h4 id="靠巧合编程"><a href="#靠巧合编程" class="headerlink" title="靠巧合编程"></a>靠巧合编程</h4><p>　　你有没有看过老式的黑白战争片？一个疲惫的士兵警觉地从灌木丛里钻出来，前面有一片空旷地：那里有地雷吗？还是可以安全通过？没有任何迹象表明那是雷区——没有标记、没有带刺的铁丝网、也没有弹坑。士兵用他的刺刀戳了戳前方的地面，又赶紧缩回来，以为会发生爆炸。没有，于是他紧张地向前走了一会儿，刺刺这里，戳戳那里。最后，他确信这个地方是安全的，于是直起身来，骄傲地正步向前走去，结果却被炸成了碎片。士兵起初的探测没有发现地雷，但这不过是侥幸。他由此得出了错误的结论——结果是灾难的。<br>　　作为开发者，我们也工作在雷区里，每天都有成百的陷阱在等着抓住我们。记住士兵的故事，我们应该警惕，不要得出错误的结论。我们应该避免靠巧合编程——依靠运气和偶然的成功——而要深思熟虑地编程。</p>
<blockquote>
<p>Don’t Program by Coincidence<br>不要靠巧合编程</p>
</blockquote>
<p>　　书中提到两种依靠巧合编程的典型：实现的偶然与隐含的假定。实现的偶然就是在使用新技术、三方库或者其它人写的模块时，拼凑的代码碰巧工作了，那么我们就宣告胜利结束编码。当这些代码出问题时，通常会一头雾水，因为当初根本不明白它为什么会工作。隐含的假定是开发者使用自以为的前提，而实际上没有任何文档或者现实数据可以依靠。我曾经遇到过这样让人哭笑不得的经历：代码依赖了某个存在已久的bug的错误表现，当这个bug最终被修复时，原本运行良好的代码反而出现了问题。我们常说“踩坑”，这些坑可能是前人用巧合编程留下的，也可能是因为我们依靠了巧合编程而引起的。<br>　　避免实现的偶然，要求我们谨慎对待不熟悉的依赖，仔细阅读文档，代码虽然可以工作，但并不一定正确。避免隐含的假定，要求我们只依靠可靠的事物，针对暂时无法获知的可能，代码要以最坏的假定来对待，不能给自己盲目的乐观的条件。下次有什么东西看起来能工作，而你却不知道为什么，要确定它不是巧合。<br>　　书中另一个主题“邪恶的向导”，适合在这里提一下。向导产生的代码往往和我们编写的代码交织在一起，这要求我们去理解它，否则我们怎么敢去依靠它来让代码工作呢？</p>
<blockquote>
<p>Don’t Use Wizard Code You Don’t Understand<br>不要使用你不理解的向导代码</p>
<h4 id="需求之坑"><a href="#需求之坑" class="headerlink" title="需求之坑"></a>需求之坑</h4><p>Don’t Gather Requirements- Dig for Them<br>不要搜集需求——挖掘它们</p>
</blockquote>
<p>　　用户的需求描述可能是：只有员工的上级和人事部门才可以查看员工的档案。经过挖掘的需求：只有指定的人员才能查看员工档案。前者把规则硬性的写入了需求，但规则经常会改变。后者的优点是需求描述为一般性陈述，规则独立描述，这样规则可以成为应用中的元数据。在实现时可以把需求理解为：只有得到授权的用户可以访问员工档案，开发者就可能会实现某种访问控制系统。规则改变时，只有系统的元数据需求更新，以这样的角度去实现需求，得到的自然就是支持元数据、得到了良好分解的系统。但也要注意避免过度设计，需求也许就是那么简单。</p>
<blockquote>
<p>Abstractions Live Longerthan Details<br>抽象比细节活得更长久</p>
</blockquote>
<p>　　“投资”于抽象，而不是实现。抽象能在来自不同的实现和新技术的变化的“攻击”之下存活下去。书中反复举了Y2K问题的例子，认为其发生有两个主要原因：没有超出当时的商业实践往前看，以及对DRY原则的违反。即使需求要求把两个数字的年份用于数据输入、报表、以及存储，本来也应该设计一种DATE抽象，“知道”两个数据的年份只是真实日期的一种缩略形式。</p>
<h4 id="极大的期望"><a href="#极大的期望" class="headerlink" title="极大的期望"></a>极大的期望</h4><p>　　如果你和用户紧密协作，分享他们的期望，工同他们交流你正在做的事情，那么当项目交付时，就不会发生多少让人吃惊的事情了。这是一件糟糕的事情。要设法让你的用户惊讶。请注意，不是惊吓他们，而是要让他们产高兴。给他们的东西要比他们期望的多一点。</p>
<blockquote>
<p>Gently Exceed Your Users’ Expectations<br>温和地超出用户的期望</p>
</blockquote>
<p>　　做到这一点的前提是要理解用户的期望。可以借助“曳光弹”和“原型”与用户交流。永远不要把我们认为好的东西当成是用户想要的。</p>
<h4 id="足够好的软件"><a href="#足够好的软件" class="headerlink" title="足够好的软件"></a>足够好的软件</h4><blockquote>
<p>欲求更好，常把好事变糟。<br>　　——李尔王 1.4</p>
</blockquote>
<p>　　有一个老的笑话，说一家美国公司向一家日本制造商订购100 000片集成电路。规格说明中有次品率：10 000片中只能有1片。几周过后订货到了：一个大盒子，里面装有数千片IC，还有一个小盒子，里面只装有10片IC。在小盒子上有一个标签，上面写着：“这些是次品”。要是我们真的能这样控制质量就好了。但现实世界不会让我们制作出十分完美的产品，特别是不会有无错的软件。时间、技术和急躁都在合谋反对我们。<br>　　软件何时“足够好”？客户会比开发人员更有发言权。他们可能尽早需要一个还可以的版本，但不想为了一个完美的版本再等上一年。虽然这里倡导我们不要追求极端的完美，但也不意味着我们可以交付充满瑕疵的半成品。引用耗子兄在《Rework》摘录及感想中的一段话：平衡Done和Perfect的方式正好就是这句话——“与其做个半成品，不好做好半个产品”，因为，<code>一个半成品会让人绝望，而半个好产品会让人有所期望，这就是其中的不同</code>。 
　　</p>
]]></content>
      
        
        <tags>
            
            <tag> reading </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-633. Sum of Square Numbers]]></title>
      <url>/leetcode-633-sum-of-square-numbers.html</url>
      <content type="html"><![CDATA[<p>Given a non-negative integer c, your task is to decide whether there’re two integers a and b such that a2 + b2 = c.<br><a id="more"></a></p>
<p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 5</span><br><span class="line">Output: True</span><br><span class="line">Explanation: 1 * 1 + 2 * 2 = 5</span><br></pre></td></tr></table></figure></p>
<p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: False</span><br></pre></td></tr></table></figure></p>
<p><strong>題意</strong></p>
<p>给一个数字 c，判断是否满足 <code>a^2 + b^2 = c</code></p>
<p><strong>思路</strong></p>
<p>从 0 到 sqrt（c）之间进行遍历，检测剩下的数开方后是不是整数。</p>
<p><strong>代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">boolean judgeSquareSum(int c) &#123;</span><br><span class="line">        int limit = (int) Math.sqrt(c);</span><br><span class="line">        for (int n = 0; n &lt;= limit; n++) &#123;</span><br><span class="line">            double test = Math.sqrt(c - n * n);</span><br><span class="line">            if (test - (int)test == 0)</span><br><span class="line">                return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-1. Two Sum]]></title>
      <url>/leetcode-1-two-sum.html</url>
      <content type="html"><![CDATA[<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution, and you may not use the same element twice.<br><a id="more"></a></p>
<p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure></p>
<p><strong>思路</strong></p>
<p>利用hashmap，key存放数值，value存放出现的位置。从前到后进行遍历，将target值减去当前的值,看是否存在map中,若存在map中则取出相应的标号，退出。</p>
<p><strong>代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        int result[] = new int[2];</span><br><span class="line">        for (int i = 0; i &lt; nums.length; i++)&#123;</span><br><span class="line">            int num = target - nums[i];</span><br><span class="line">            if(map.containsKey(num))&#123;</span><br><span class="line">                result[0] = map.get(num);</span><br><span class="line">                result[1] = i;</span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx 初探]]></title>
      <url>/nginx-learn.html</url>
      <content type="html"><![CDATA[<p>分享一篇关于Nginx介绍的好文。<br><a id="more"></a></p>
<blockquote>
<p>Reference:</p>
<ul>
<li><a href="http://blog.csdn.net/xlgen157387/article/details/49781487" target="_blank" rel="noopener">徐刘根的专栏 -《Nginx初探》</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-35. Search Insert Position]]></title>
      <url>/leetcode-35-search-insert-position.html</url>
      <content type="html"><![CDATA[<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.<br><a id="more"></a><br>You may assume no duplicates in the array.</p>
<p>Here are few examples.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1,3,5,6], 5 → 2</span><br><span class="line">[1,3,5,6], 2 → 1</span><br><span class="line">[1,3,5,6], 7 → 4</span><br><span class="line">[1,3,5,6], 0 → 0</span><br></pre></td></tr></table></figure></p>
<p><strong>思路</strong></p>
<p>二分查找,还需要考虑到边界的问题。</p>
<p><strong>代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        int[] arr = &#123;1, 3, 5, 6&#125;;</span><br><span class="line">        int result = new Test().searchInsert(arr, 6);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int searchInsert(int[] arr, int target) &#123;</span><br><span class="line">        if (arr == null || arr.length == 0) &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        int start = 0;</span><br><span class="line">        int end = arr.length - 1;</span><br><span class="line">        while (start + 1 &lt; end) &#123;</span><br><span class="line">            int mid = start + (end - start) / 2;</span><br><span class="line">            if (target == arr[mid]) &#123;</span><br><span class="line">                return mid;</span><br><span class="line">            &#125; else if (arr[mid] &gt; target) &#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125; else if (arr[mid] &lt; target) &#123;</span><br><span class="line">                start = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (arr[start] == target) &#123;</span><br><span class="line">            return start;</span><br><span class="line">        &#125;</span><br><span class="line">        if (arr[end] == target) &#123;</span><br><span class="line">            return end;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-7. Reverse Integer]]></title>
      <url>/leetcode-7-reverse-integer.html</url>
      <content type="html"><![CDATA[<p>Reverse digits of an integer.<br><a id="more"></a></p>
<p>Example1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = 123, return 321</span><br></pre></td></tr></table></figure></p>
<p>Example2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = -123, return -321</span><br></pre></td></tr></table></figure></p>
<p>Note:</p>
<p>The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public long reverse(int x)&#123;</span><br><span class="line">    long y=0;</span><br><span class="line">    int n;</span><br><span class="line">    while( x != 0)&#123;</span><br><span class="line">        n = x%10;</span><br><span class="line">        y = y*10 + n;</span><br><span class="line">        x /= 10;</span><br><span class="line">    &#125;</span><br><span class="line">    return y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-50. Pow(x,n)]]></title>
      <url>/leetcode-50-pow-x-n.html</url>
      <content type="html"><![CDATA[<p>Implement pow(x, n).<br><a id="more"></a></p>
<p><strong>思路</strong></p>
<p>利用递归求解。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public double myPow(double x, int n)</span><br><span class="line">&#123;</span><br><span class="line">    if(n == 0) return 1D;</span><br><span class="line">    long N = n; //use long to avoid overflow.</span><br><span class="line">    return solve(n &lt; 0 ? (1 / x) : x, N &lt; 0 ? (N * -1) : N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public double solve(double x, long n)</span><br><span class="line">&#123;</span><br><span class="line">    if(n == 1) return x;</span><br><span class="line">    double val = solve(x, n / 2);</span><br><span class="line">    return val * val * ((n % 2) == 0 ? 1 : x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dict-命令行下中英文翻译工具]]></title>
      <url>/dict.html</url>
      <content type="html"><![CDATA[<p>命令行下中英文翻译工具（Chinese and English translation tools in the command line）<br><a id="more"></a></p>
<p><a href="http://asciinema.org/a/123670" target="_blank" rel="noopener"><img src="http://asciinema.org/a/123670.png?v=2" alt="asciicast"></a></p>
<h3 id="安装-Install"><a href="#安装-Install" class="headerlink" title="安装(Install)"></a>安装(Install)</h3><h4 id="ubuntu-安装-pip"><a href="#ubuntu-安装-pip" class="headerlink" title="ubuntu 安装 pip"></a>ubuntu 安装 pip</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip python-dev build-essential </span><br><span class="line">sudo pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<h4 id="安装-dict"><a href="#安装-dict" class="headerlink" title="安装 dict"></a>安装 dict</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install dict-cli</span><br></pre></td></tr></table></figure>
<h3 id="用法-Usage"><a href="#用法-Usage" class="headerlink" title="用法(Usage)"></a>用法(Usage)</h3><h4 id="英译中-English-To-Chinese"><a href="#英译中-English-To-Chinese" class="headerlink" title="英译中(English To Chinese)"></a>英译中(English To Chinese)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ dict <span class="built_in">test</span></span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"><span class="comment">#  test 测试</span></span><br><span class="line"><span class="comment">#  (U: tɛst E: test)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  n. 试验；检验</span></span><br><span class="line"><span class="comment">#  vt. 试验；测试</span></span><br><span class="line"><span class="comment">#  vi. 试验；测试</span></span><br><span class="line"><span class="comment">#  n. (Test)人名；(英)特斯特</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Test : 测试</span></span><br><span class="line"><span class="comment">#          测验</span></span><br><span class="line"><span class="comment">#          检验</span></span><br><span class="line"><span class="comment">#  Test Drive : Test Drive</span></span><br><span class="line"><span class="comment">#                Test Drive</span></span><br><span class="line"><span class="comment">#                无限狂飙</span></span><br><span class="line"><span class="comment">#  Test Engineer : 测试员</span></span><br><span class="line"><span class="comment">#                   测试工程师</span></span><br><span class="line"><span class="comment">#                   软件测试工程师</span></span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"></span><br><span class="line">$ dict I love you</span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"><span class="comment">#  I love you 我爱你</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  我爱你。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  I love you : 我爱你</span></span><br><span class="line"><span class="comment">#                ILOVEYOU蠕虫</span></span><br><span class="line"><span class="comment">#                寻找伴郎</span></span><br><span class="line"><span class="comment">#  I really love you : 真的爱你</span></span><br><span class="line"><span class="comment">#                       其实很爱你</span></span><br><span class="line"><span class="comment">#                       我是真的爱你</span></span><br><span class="line"><span class="comment">#  I Do love you : 我是爱你的</span></span><br><span class="line"><span class="comment">#                   真的爱你</span></span><br><span class="line"><span class="comment">#                   爱你我该怎么办</span></span><br><span class="line"><span class="comment">###################################</span></span><br></pre></td></tr></table></figure>
<h4 id="中译英-Chinese-To-English"><a href="#中译英-Chinese-To-English" class="headerlink" title="中译英(Chinese To English)"></a>中译英(Chinese To English)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ dict 测试</span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"><span class="comment">#  测试 test</span></span><br><span class="line"><span class="comment">#  (Pinyin: cè shì)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  [试验] test</span></span><br><span class="line"><span class="comment">#  measurement</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  测试 : Test</span></span><br><span class="line"><span class="comment">#          test</span></span><br><span class="line"><span class="comment">#          TST test</span></span><br><span class="line"><span class="comment">#  集成测试 : Integration testing</span></span><br><span class="line"><span class="comment">#              Test d'intégration</span></span><br><span class="line"><span class="comment">#              통합 시험</span></span><br><span class="line"><span class="comment">#  ANOVA测试 : Gage R&amp;amp;R</span></span><br><span class="line"><span class="comment">#             ANOVA gauge R&amp;amp;R</span></span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"></span><br><span class="line">$ dict 我爱你</span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"><span class="comment">#  我爱你 I love you</span></span><br><span class="line"><span class="comment">#  (Pinyin: wǒ ài nǐ)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  I love you</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  我爱你 : I love you</span></span><br><span class="line"><span class="comment">#            Ich liebe dich</span></span><br><span class="line"><span class="comment">#            Wuh that I love you</span></span><br><span class="line"><span class="comment">#  我也爱你 : I Love You Too</span></span><br><span class="line"><span class="comment">#              And I Love You So</span></span><br><span class="line"><span class="comment">#              Ik ook van jou</span></span><br><span class="line"><span class="comment">#  我就爱你 : The Arrangement</span></span><br><span class="line"><span class="comment">#              gou couh gyaez mwngz muengh</span></span><br><span class="line"><span class="comment">#              I'll just be love you</span></span><br><span class="line"><span class="comment">###################################</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Reference:</p>
<ul>
<li><a href="https://github.com/wufeifei/dict" target="_blank" rel="noopener">github.com/wufeifei/dict</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网易云音乐命令行版本]]></title>
      <url>/netease-musicbox.html</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/darknessomi/musicbox/graphs/contributors" target="_blank" rel="noopener">感谢</a>为 <code>MusicBox</code> 的开发付出过努力的每一个人！<br>高品质网易云音乐命令行版本，简洁优雅，丝般顺滑，基于Python编写。<br>使用起来不会觉得折腾，感觉很酷。<br><a id="more"></a></p>
<h4 id="NetEase-MusicBox"><a href="#NetEase-MusicBox" class="headerlink" title="NetEase-MusicBox"></a>NetEase-MusicBox</h4><p><a href="https://pypi.python.org/pypi/NetEase-MusicBox/" target="_blank" rel="noopener"><img src="http://7j1yv3.com1.z0.glb.clouddn.com/preview.gif" alt="NetEase-MusicBox"></a></p>
<h4 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h4><ol>
<li>功能特性</li>
<li>320kbps的高品质音乐</li>
<li>歌曲，艺术家，专辑检索</li>
<li>网易22个歌曲排行榜</li>
<li>网易新碟推荐</li>
<li>网易精选歌单</li>
<li>网易主播电台</li>
<li>私人歌单，每日推荐</li>
<li>随心打碟</li>
<li>本地收藏，随时加❤</li>
<li>播放进度及播放模式显示</li>
<li>现在播放及桌面歌词显示</li>
<li>歌曲评论显示</li>
<li>一键进入歌曲专辑</li>
<li>定时退出</li>
<li>Vimer式快捷键让操作丝般顺滑</li>
<li>可使用数字快捷键</li>
<li>可使用自定义全局快捷键</li>
</ol>
<h4 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h4><table>
<thead>
<tr>
<th style="text-align:center">J</th>
<th style="text-align:center">Down</th>
<th style="text-align:center">下移</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">K</td>
<td style="text-align:center">Up</td>
<td style="text-align:center">上移</td>
</tr>
<tr>
<td style="text-align:center">H</td>
<td style="text-align:center">Back</td>
<td style="text-align:center">后退</td>
</tr>
<tr>
<td style="text-align:center">L</td>
<td style="text-align:center">Forword</td>
<td style="text-align:center">前进</td>
</tr>
<tr>
<td style="text-align:center">U</td>
<td style="text-align:center">Prev page</td>
<td style="text-align:center">上一页</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">Next page</td>
<td style="text-align:center">下一页</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">Search</td>
<td style="text-align:center">快速搜索</td>
</tr>
<tr>
<td style="text-align:center">[</td>
<td style="text-align:center">Prev song</td>
<td style="text-align:center">上一曲</td>
</tr>
<tr>
<td style="text-align:center">]</td>
<td style="text-align:center">Next song</td>
<td style="text-align:center">下一曲</td>
</tr>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">Volume +</td>
<td style="text-align:center">音量增加</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">Volume -</td>
<td style="text-align:center">音量减少</td>
</tr>
<tr>
<td style="text-align:center">Space</td>
<td style="text-align:center">Play/Pause</td>
<td style="text-align:center">播放/暂停</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:center">Shuffle</td>
<td style="text-align:center">手气不错</td>
</tr>
<tr>
<td style="text-align:center">M</td>
<td style="text-align:center">Menu</td>
<td style="text-align:center">主菜单</td>
</tr>
<tr>
<td style="text-align:center">P</td>
<td style="text-align:center">Present/History</td>
<td style="text-align:center">当前/历史播放列表</td>
</tr>
<tr>
<td style="text-align:center">I</td>
<td style="text-align:center">Music Info</td>
<td style="text-align:center">当前音乐信息</td>
</tr>
<tr>
<td style="text-align:center">⇧+P</td>
<td style="text-align:center">Playing Mode</td>
<td style="text-align:center">播放模式切换</td>
</tr>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">Add</td>
<td style="text-align:center">添加曲目到打碟</td>
</tr>
<tr>
<td style="text-align:center">⇧+A</td>
<td style="text-align:center">Enter album</td>
<td style="text-align:center">进入专辑</td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td style="text-align:center">To the first</td>
<td style="text-align:center">跳至首项</td>
</tr>
<tr>
<td style="text-align:center">⇧+G</td>
<td style="text-align:center">To the end</td>
<td style="text-align:center">跳至尾项</td>
</tr>
<tr>
<td style="text-align:center">Z</td>
<td style="text-align:center">DJ list</td>
<td style="text-align:center">打碟列表</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">Star</td>
<td style="text-align:center">添加到收藏</td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">Collection</td>
<td style="text-align:center">收藏列表</td>
</tr>
<tr>
<td style="text-align:center">R</td>
<td style="text-align:center">Remove</td>
<td style="text-align:center">删除当前条目</td>
</tr>
<tr>
<td style="text-align:center">⇧+J</td>
<td style="text-align:center">Move Down</td>
<td style="text-align:center">向下移动当前项目</td>
</tr>
<tr>
<td style="text-align:center">⇧+K</td>
<td style="text-align:center">Move Up</td>
<td style="text-align:center">向上移动当前项目</td>
</tr>
<tr>
<td style="text-align:center">⇧+C</td>
<td style="text-align:center">Cache</td>
<td style="text-align:center">缓存歌曲到本地</td>
</tr>
<tr>
<td style="text-align:center">,</td>
<td style="text-align:center">Like</td>
<td style="text-align:center">喜爱</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">Trash FM</td>
<td style="text-align:center">删除 FM</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:center">Next FM</td>
<td style="text-align:center">下一FM</td>
</tr>
<tr>
<td style="text-align:center">Q</td>
<td style="text-align:center">Quit</td>
<td style="text-align:center">退出</td>
</tr>
<tr>
<td style="text-align:center">T</td>
<td style="text-align:center">Timing Exit</td>
<td style="text-align:center">定时退出</td>
</tr>
<tr>
<td style="text-align:center">W</td>
<td style="text-align:center">Quit&amp;Clear</td>
<td style="text-align:center">退出并清除用户信息</td>
</tr>
</tbody>
</table>
<h4 id="PyPi安装"><a href="#PyPi安装" class="headerlink" title="PyPi安装"></a>PyPi安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip(3) install NetEase-MusicBox</span><br></pre></td></tr></table></figure>
<h4 id="Git-clone最新版"><a href="#Git-clone最新版" class="headerlink" title="Git clone最新版"></a>Git clone最新版</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/darknessomi/musicbox.git &amp;&amp; cd musicbox</span><br><span class="line">$ python(3) setup.py install</span><br></pre></td></tr></table></figure>
<h4 id="macOS安装"><a href="#macOS安装" class="headerlink" title="macOS安装"></a>macOS安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip(3) install NetEase-MusicBox</span><br><span class="line">$ brew install mpg123</span><br></pre></td></tr></table></figure>
<h4 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h4><h5 id="Fedora"><a href="#Fedora" class="headerlink" title="Fedora"></a>Fedora</h5><p>首先添加<a href="https://github.com/FZUG/repo/wiki" target="_blank" rel="noopener">FZUG</a>源，然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install musicbox</span><br></pre></td></tr></table></figure></p>
<h5 id="Ubuntu-Debian"><a href="#Ubuntu-Debian" class="headerlink" title="Ubuntu/Debian"></a>Ubuntu/Debian</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install NetEase-MusicBox</span><br><span class="line">$ sudo apt-get install mpg123</span><br></pre></td></tr></table></figure>
<h5 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacaur -S netease-musicbox-git #or use $ yaourt musicbox</span><br></pre></td></tr></table></figure>
<h4 id="可选功能依赖"><a href="#可选功能依赖" class="headerlink" title="可选功能依赖"></a>可选功能依赖</h4><ol>
<li><code>aria2</code> 用于缓存歌曲</li>
<li><code>python-keybinder</code> 用于支持全局快捷键</li>
<li><code>libnotify-bin</code> 用于支持消息提示</li>
<li><code>pyqt python-dbus dbus qt</code> 用于支持桌面歌词 (Mac 用户需要 <code>brew install qt --with-dbus</code> 获取支持 DBus 的 Qt)</li>
</ol>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>配置文件地址: <code>~/.netease-musicbox/config.json</code><br>可配置缓存，快捷键，消息，桌面歌词。<br>由于歌曲 API 只接受中国大陆地区访问，港澳台及海外用户请自行设置代理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;mpg123_parameters&quot;: &#123;</span><br><span class="line">    &quot;default&quot;: [],</span><br><span class="line">    &quot;describe&quot;: &quot;The additional parameters when mpg123 start.&quot;,</span><br><span class="line">    &quot;value&quot;: [&quot;-p&quot;, &quot;http://ip:port&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="已测试的系统兼容列表"><a href="#已测试的系统兼容列表" class="headerlink" title="已测试的系统兼容列表"></a>已测试的系统兼容列表</h4><table>
<thead>
<tr>
<th style="text-align:center">macOS</th>
<th style="text-align:center">10.12 / 10.11</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Ubuntu</td>
<td style="text-align:center">14.04</td>
</tr>
<tr>
<td style="text-align:center">Kali</td>
<td style="text-align:center">1.1.0 / 2.0 / Rolling</td>
</tr>
<tr>
<td style="text-align:center">CentOS</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">openSUSE</td>
<td style="text-align:center">13.2</td>
</tr>
<tr>
<td style="text-align:center">Fedora</td>
<td style="text-align:center">22</td>
</tr>
<tr>
<td style="text-align:center">Arch</td>
<td style="text-align:center">Rolling</td>
</tr>
</tbody>
</table>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>　　如遇到在特定终端下不能播放问题，首先检查<strong>此终端</strong>下mpg123能否正常使用，其次检查<strong>其他终端</strong>下musicbox能否正常使用，报告issue的时候请告知以上使用情况以及出问题终端的报错信息。</p>
<h4 id="已知问题及解决方案"><a href="#已知问题及解决方案" class="headerlink" title="已知问题及解决方案"></a>已知问题及解决方案</h4><ul>
<li><a href="https://github.com/darknessomi/musicbox/issues/374" target="_blank" rel="noopener">#374</a> i3wm下播放杂音或快进问题，此问题常见于Arch Linux。尝试更改mpg123配置。</li>
<li><a href="https://github.com/darknessomi/musicbox/issues/404" target="_blank" rel="noopener">#404</a> 某些环境缺乏lxml。尝试利用包管理器安装lxml或者直接<code>pip install lxml</code>。</li>
<li><a href="https://github.com/darknessomi/musicbox/issues/405" target="_blank" rel="noopener">#405</a> 32位Python下cookie时间戳超出了32位整数最大值。尝试使用64位版本的Python或者拷贝cookie文件到对应位置。</li>
<li><a href="https://github.com/darknessomi/musicbox/issues/347" target="_blank" rel="noopener">#347</a> 暂停时间超过一定长度（数分钟）之后mpg123停止输出，导致切换到下一首歌。此问题是mpg123的bug，暂时无解决方案。</li>
</ul>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ musicbox</span><br></pre></td></tr></table></figure>
<p>Enjoy it !</p>
<blockquote>
<p>Reference:</p>
<ul>
<li><a href="https://github.com/darknessomi/musicbox" target="_blank" rel="noopener">github.com/darknessomi/musicbox</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-49. Group Anagrams]]></title>
      <url>/leetcode-49-group-anagrams.html</url>
      <content type="html"><![CDATA[<p>Given an array of strings, group anagrams together.<br><a id="more"></a></p>
<p>For example, given:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],</span><br></pre></td></tr></table></figure></p>
<p>Return:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [&quot;ate&quot;, &quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>Note:</p>
<p>For the return value, each inner list’s elements must follow the lexicographic order.<br>All inputs will be in lower-case.</p>
<p><strong>思路</strong></p>
<p>将每一个字符串里面的字符进行排序放到HashMap中。</p>
<p><strong>代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ll = new ArrayList&lt;&gt;();</span><br><span class="line">        if (strs.length &lt;= 0) return ll;</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        for (String str : strs) &#123;</span><br><span class="line">            String sstr = sortStr(str);</span><br><span class="line">             if (map.containsKey(sstr)) &#123;</span><br><span class="line">                map.get(sstr).add(str);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                List&lt;String&gt; l = new ArrayList&lt;&gt;();</span><br><span class="line">                l.add(str);</span><br><span class="line">                map.put(sstr, l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return new ArrayList&lt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String sortStr(String str) &#123;</span><br><span class="line">        char[] cc = str.toCharArray();</span><br><span class="line">        Arrays.sort(cc);</span><br><span class="line">        return String.valueOf(cc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-46. Permutations]]></title>
      <url>/leetcode-46-permutations.html</url>
      <content type="html"><![CDATA[<p>Given a collection of distinct numbers, return all possible permutations.<br><a id="more"></a></p>
<p>For example,<br>[1,2,3] have the following permutations:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p><strong>思路</strong></p>
<p>对于nums数组中的每一个数，都依次放入结果集中，如果结果集中已经包含这个数，就继续下一次循环。</p>
<p>以数组[1,2,3]为例，每次循环的结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3]</span><br><span class="line">[1,3,2]</span><br><span class="line">[2,1,3]</span><br><span class="line">[2,3,1]</span><br><span class="line">[3,1,2]</span><br><span class="line">[3,2,1]</span><br></pre></td></tr></table></figure></p>
<p><strong>代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123;</span><br><span class="line">   List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">   backtrack(list, new ArrayList&lt;&gt;(), nums);</span><br><span class="line">   return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void backtrack(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, int [] nums)&#123;</span><br><span class="line">   if(tempList.size() == nums.length)&#123;</span><br><span class="line">      list.add(new ArrayList&lt;&gt;(tempList));</span><br><span class="line">   &#125; else&#123;</span><br><span class="line">      for(int i = 0; i &lt; nums.length; i++)&#123; </span><br><span class="line">         if(tempList.contains(nums[i])) continue;</span><br><span class="line">         tempList.add(nums[i]);</span><br><span class="line">         backtrack(list, tempList, nums);</span><br><span class="line">         tempList.remove(tempList.size() - 1);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[慕课网 Oracle 高级教程]]></title>
      <url>/imooc-oracle-course.html</url>
      <content type="html"><![CDATA[<p>　　高级查询在数据库的开发过程中应用广泛，本教程通过大量的案例和老师的详细讲解，从分组查询、多表查询和子查询三个方面介绍Oracle的高级查询，也介绍了一些查询的应用场景。<br><a id="more"></a> </p>
<h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><ol>
<li>分组函数的概念：<br>分组函数作用于一组数据，并对一组数据返回一个值。</li>
<li>分组函数的使用：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- avg()　/**求平均值**/　eg: select avg(sal)　from emp;</span><br><span class="line">- sum()  /**求总和**/　eg: select sum(sal)　from emp;</span><br><span class="line">- min()  /**求最小值**/　eg: select min(sal)　from emp;</span><br><span class="line">- max()  /**求最大值**/　eg: select max(sal)　from emp;</span><br><span class="line">- count()  /**求个数**/　eg: select count(deptno)　from emp;</span><br><span class="line">- distinct  /**剔除重复**/  eg: select count(distinct deptno) from emp;</span><br><span class="line">- WM_CONCAT  /**行转列**/  eg: select deptno ，wm_concat(ename) from emp group by deptno;  </span><br><span class="line">/**按照部门号分组，将相同部门号的员工以逗号分隔的形式展示到一行中**/</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意</strong>：<br>　　分组函数会自动忽略空值，要用<code>nvl()</code> 函数转换空值才行.<br><strong>NVL（表达式1，表达式2）</strong><br>　　如果表达式1为空值，NVL返回值为表达式2的值，否则返回表达式1的值。 该函数的目的是把一个空值（null）转换成一个实际的值。其表达式的值可以是数字型、字符型和日期型。但是表达式1和表达式2的数据类型必须为同一个类型。</p>
<ol>
<li>group by字句分组：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 查询不同部门，不同职位的员工工资</span><br><span class="line">select deptno ,job,sum(sal) from emp group by deptno, job;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意</strong>：<br>　　在select 列表中所有未包含在组函数中的列都应该包含在group by子句中，不然属于非法使用组函数。</p>
<ol>
<li>使用having 字句过滤分组：<br><code>having</code> 字句和 <code>where</code>一样，可以进行条件过滤。</li>
</ol>
<p><strong>注意</strong>：<br> 　　<code>having</code>先分组在过滤；<code>where</code>先过滤在分组。<code>where</code>效率更高，<code>where</code>中不能使用分组函数。<br>　　两者可以通用的话。我们尽量先过滤再分组，即尽量使用where,优化，提高性能</p>
<ol>
<li><p>在分组查询中使用排序：<br>order by 子句可以跟 字段名 别名 表达式（聚合函数）以及 字段的位置序号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select deptno avg(sal) from emp group by deptno order by deptno;</span><br></pre></td></tr></table></figure>
</li>
<li><p>group by 语句的增强：<br>group by语句的增强，主要用于报表中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select deptno,job,sum(sal) from emp group by deptno,job;</span><br><span class="line">select deptno,sum(sal) from emp group by deptno;</span><br><span class="line">select sum(sal) from emp;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>上面的三条语句合起来的效果与下面的一条语句相同,下面是 group by 语句的加强<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select deptno,job,sum(sal) from emp group by rollup(deptno,job);</span><br><span class="line">// 语法</span><br><span class="line">select 列名1,列名2,组函数(x) from tablename group by rollup(列名1,列名2);</span><br></pre></td></tr></table></figure></p>
<ol>
<li>sql*plus的报表功能：</li>
</ol>
<ul>
<li>使用ttitle命令设置报表的名称，col表示列的意思，15表示空15列显示“我的报表”这个标题，然后再空35个列，显示sql.pno,sql.pno表示报表的页码。</li>
<li>col也可以用来设置列的别名，比如第二行把deptno标题设置为部门号</li>
<li>break on deptno skip 1，在上一节课程已经介绍过，表示遇见重复的部门号就只显示一次，不同的部门号之间空一行</li>
<li>set pagesize 10  每页显示10行<h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4></li>
</ul>
<ol>
<li>什么是多表查询？<br>从多个表中获取数据就称为多表查询<br><img src="/img/58b782c80001238f12800720.jpg" alt="duobiao"></li>
<li>笛卡尔积<br>两张表进行<code>笛卡尔积</code>运算，最终结果的列数等于各表中列数之和，行数等于各个表中行数之积。<br><img src="/img/591c6eb300015ae512800720.jpg" alt="duobiao"><br>为了避免使用<code>笛卡尔全集</code>，使用where加入有效的连接条件<br>多表链接条件个数至少为<code>（n-1）</code>n为表的个数。</li>
<li><p>等值连接<br>等值连接，连接条件用等号相连。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.empno,e,ename,e.sal,d.dname from emp e,deptno d where e.deptno=d.deptno;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不等值连接<br>连接条件中间不是由等号相连</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.empno,e.ename,e.sal,s.grade from emp e,salgrade s where e.sal between s.losal and s.hisal;</span><br></pre></td></tr></table></figure>
</li>
<li><p>外连接<br><strong>外连接</strong>：通过外连接，把对于连接条件不成立的记录，仍然包含在最后的结果中<br><strong>左外连接</strong>：当连接条件不成立的时候，等号左边的表仍然被包含 a = b（+）<br><strong>右外连接</strong>：当连接条件不成立的时候，等号右边的表仍然被包含  a（+）= b</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 按部门统计员工人数，要求显示：部门号，部门名称，人数</span><br><span class="line">select d.deptno 部门号,d.dname 部门名称,count(e.empno) 人数</span><br><span class="line">from emp e,dept d</span><br><span class="line">where e.deptno(+)=d.deptno</span><br><span class="line">group by d.deptno,d.dname;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自连接<br>通过表的别名，将一张表视为多张表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查询验工姓名和员工老板的姓名</span><br><span class="line">select e.ename 员工姓名，b.ename 老板</span><br><span class="line">from emp e,emp b</span><br><span class="line">where e.mgr=b.empno;//员工的老板号 = 老板的员工号</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意</strong><br>自连接存在的问题:不适合操作大表,会产生笛卡尔积<br>层次查询优点:本质是一个单表查询,不涉及笛卡尔乘积原理,便于查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select level,empno,ename,sal,mgr </span><br><span class="line">from emp </span><br><span class="line">connect by prior empno=mgr</span><br><span class="line">start with mgr is null order by 1;</span><br></pre></td></tr></table></figure></p>
<h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><ol>
<li><p>子查询概述：<br>使用子查询解决不能一步完成的查询（查询的嵌套）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 查询比scott工资高的员工信息</span><br><span class="line">select  * from emp </span><br><span class="line">where sal&gt;(select * from emp where ename = &apos;SCOTT&apos;)；</span><br></pre></td></tr></table></figure>
</li>
<li><p>子查询需要注意的10个问题：</p>
</li>
</ol>
<ul>
<li>子查询语法中的小括号</li>
<li>子查询的书写风格（方便阅读）</li>
<li>可以使用子查询的位置：where,select,having,from</li>
<li>不可以使用子查询的位置：group by</li>
<li>强调：from 后面的子查询</li>
<li>子查询和主查询可以不是同一张表</li>
<li>一般不在子查询中使用排序；但在Top-N分析问题中必须对子查询排序</li>
<li>一般先执行子查询再执行主查询；但是相关子查询例外</li>
<li>单行子查询只能使用单行操作符；多行使用多行</li>
<li>注意:子查询中是null的问题</li>
</ul>
<ol>
<li>可以使用子查询的位置：where 、select、having、from</li>
<li><p>相关子查询：将主查询中的值作为参数传递给子查询</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 找出员工薪水大于本部门的平均薪水的员工</span><br><span class="line">select empno,ename,sal,(select avg(sal) from emp where deptno=e.deptno) avgsal </span><br><span class="line">from emp e where sal &gt; (select avg(sal) from emp where deptno=e.deptno);</span><br></pre></td></tr></table></figure>
</li>
<li><p>不可以使用not in 来判断存在空值的集合。只要有空值，使用not in 永远都是假。</p>
</li>
</ol>
<blockquote>
<p>Reference: </p>
<ul>
<li><a href="http://www.imooc.com/video/8494" target="_blank" rel="noopener">慕课网－oracle 高级查询</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VIM 的分屏功能]]></title>
      <url>/vim-split-screen.html</url>
      <content type="html"><![CDATA[<p>　　  整理并收集了一些<code>Vim</code>相关使用教程，人类史上最好的文本编辑器Vim，只有用过才知道。<br><a id="more"></a></p>
<h4 id="分屏启动-Vim"><a href="#分屏启动-Vim" class="headerlink" title="分屏启动 Vim"></a>分屏启动 Vim</h4><ol>
<li><p>使用大写的<code>O</code>参数来垂直分屏:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -On file1 file2 ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用小写的<code>o</code>参数来水平分屏:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -on file1 file2 ...</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注释</strong>：n是数字，表示分成几个屏。</p>
<h4 id="关闭分屏"><a href="#关闭分屏" class="headerlink" title="关闭分屏"></a>关闭分屏</h4><ol>
<li><p>关闭当前窗口:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W c</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭当前窗口，如果只剩最后一个了，则退出Vim:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W q</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h4><ol>
<li><p>上下分割当前打开的文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W s</span><br></pre></td></tr></table></figure>
</li>
<li><p>上下分割，并打开一个新的文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:sp filename</span><br></pre></td></tr></table></figure>
</li>
<li><p>左右分割当前打开的文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W v</span><br></pre></td></tr></table></figure>
</li>
<li><p>左右分割，并打开一个新的文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:vsp filename</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h4><p>　　Vi中的光标键是h, j, k, l，要在各个屏间切换，只需要先按一下Ctrl+W</p>
<ol>
<li><p>把光标移到右边的屏:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W l</span><br></pre></td></tr></table></figure>
</li>
<li><p>把光标移到左边的屏中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W h</span><br></pre></td></tr></table></figure>
</li>
<li><p>把光标移到上边的屏中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W k</span><br></pre></td></tr></table></figure>
</li>
<li><p>把光标移到下边的屏中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W j</span><br></pre></td></tr></table></figure>
</li>
<li><p>把光标移到下一个的屏中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W w</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="移动分屏"><a href="#移动分屏" class="headerlink" title="移动分屏"></a>移动分屏</h4><p>　　这个功能还是使用了Vim的光标键，只不过都是大写。当然了，如果你的分屏很乱很复杂的话，这个功能可能会出现一些非常奇怪的症状。</p>
<ol>
<li><p>向右移动:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W L</span><br></pre></td></tr></table></figure>
</li>
<li><p>向左移动:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W H</span><br></pre></td></tr></table></figure>
</li>
<li><p>向上移动:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W K</span><br></pre></td></tr></table></figure>
</li>
<li><p>向下移动:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W J</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h4><p>　　下面是改变尺寸的一些操作，主要是高度，对于宽度你可以使用[Ctrl+W &lt;]或是[Ctrl+W &gt;]，但这可能需要最新的版本才支持。</p>
<ol>
<li><p>让所有的屏都有一样的高度:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W =</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加高度:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W +</span><br></pre></td></tr></table></figure>
</li>
<li><p>减少高度:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W -</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="升级教程"><a href="#升级教程" class="headerlink" title="升级教程"></a>升级教程</h4><blockquote>
<p>以下是一篇比较好的<code>Vim</code>升级教程：<a href="https://www.molloc.com/archives/483" target="_blank" rel="noopener">简明Vim练级攻略</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日志还是调试？]]></title>
      <url>/logs-or-debug.html</url>
      <content type="html"><![CDATA[<p>　　在这段时间的面试过程中，印象比较深的是一个面试官问到了关于 java 日志的问题，我当时只想了SLF4J 和 log4j，就简单说了一些日志在工作环境中的一些作用和日志的级别设置。面试官也主要提到了一些打日志的规范。这儿我想说一下日志打印的一些看法。<br><a id="more"></a><br>　　<br><strong>线程名</strong><br>　　就像Ringo一样，线程名应该是Java里最被低估的功能之一了。因为其实它的表述性很强。那又怎样？就像我们的名字一样，我们会给它赋予一个含义。<br>　　线程名最有用的时候应该就是多线程的情况下了。许多日志框架都会记录当前方法调用所在线程的名字。不幸的是，一般看起来都是这样的：“http-nio-8080-exec-3″，这是线程池或者容器自动分配的线程名。<br>　　我经常听到有谣传称线程名是不可变的。当然不是。线程名就是你日志中最优质的不动产，你得确保自己能正确的使用它们。通常给它赋值会带上上下文的详细信息，比如说Servlet或者任务的名字之类的，以及一些动态的上下文信息比如用户ID。<br>　　这么做的话，你的代码看起来应该是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().setName(ProcessTask.class.getName() + “: “+ message.getID);</span><br></pre></td></tr></table></figure></p>
<p>更高级的做法是引入一个ThreadLocal的变量，然后配置一个appender，自动把里面的信息输出到日志中。<br>　　当多个线程同时在往文件中写入日志而你需要关注其中某个线程的时候，这个功能尤其有用。如果你在一个分布式或者SOA环境中运行的话，这么做还会有一个额外的好处，下面我们很快就会看到。<br>　　<br><strong>分布式标识符</strong><br>　　在SOA或者消息驱动的架构中，某个任务的执行可能会涉及到多台机器。这种架构下如果出了错要进行处理的话，要想知道到底发生了什么，这里所牵涉到的相关机器以及它们的状态就显得至关重要。很多日志分析器只是帮你把这些日志收集起来，它们假设你已经有一个唯一的标志符，可以用它来进行过滤。<br>　　从设计的角度来看，这意味着系统中每一个入站操作都需要有一个唯一的ID，处理过程中会一直携带着这个ID直到处理结束。这里如果使用持久性标识比如说用户ID之类的可能并不适合，因为在一个日志文件中一个用户可能会有多个请求在同时进行处理，这就很难提取出具体的某个处理流。UUID是个不错的选择，你可以把它存储到线程名或者TLS——ThreadLocal Storage里面。<br>　　<br><strong>不要使用循环</strong><br>　　你经常会看到有在循环体中进行日志打印，这么做的前提是循环的次数是有限的。<br>　　如果不出什么问题的话当然还好。不过如果代码碰到一些异常的输入导致循环无法退出的话，这就不妙了。这可不止是循环无法结束的问题了，你的程序还一直在往磁盘或者网络中写入数据。<br>　　如果只是写到自己的设备中，结果可能就只是挂了一台服务器，但如果是一个分布式的环境，就可能就是一整个集群都瘫了。所以最好还是不要在循环里面打印日志，尤其是当涉及到异常处理的时候。<br>　　我们来看一个例子，这里是在循环中来打印异常的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void read() &#123;</span><br><span class="line">    while (hasNext()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            readData();</span><br><span class="line">        &#125; catch &#123;Exception e) &#123;</span><br><span class="line">            // this isn’t recommend</span><br><span class="line">            logger.error(“error reading data“, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果readData()抛出异常并且hasNext()返回true，这段代码就会不停在打印日志。一个解决方法就是不要每次都打印出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void read() &#123;</span><br><span class="line">    int exceptionsThrown = 0;</span><br><span class="line">    while (hasNext()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            readData();</span><br><span class="line">        &#125; catch &#123;Exception e) &#123;</span><br><span class="line">            if (exceptionsThrown &lt; THRESHOLD) &#123;</span><br><span class="line">                logger.error(“error reading data&quot;, e);</span><br><span class="line">                exceptionsThrown++;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // Now the error won’t choke the system.</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>还有一个方法就是把日志操作从循环中去掉，在另外的地方进行打印，只记录第一个或者最后一个异常就好了。</p>
<p><strong>未捕获的异常</strong><br>　　维斯特洛有一道最后的防御墙，而你有Thread.uncaughtExceptionHandler。请确认你已经用上它们了。如果没有的话，你的异常可能这么没了，而你只能拿到很少的一些上下文信息，同时这些异常在哪打印，是否打印，你也不好控制。<br>　　如果你的代码出现异常却没有记录下来，或者记录下来了却没有相关的状态信息，那真是非常失败。<br>　　尽管在uncaughtExceptionHandler里面看似已经访问不了线程里面的任何变量了（它已经挂了），但你至少还有一个当前线程的引用。如果结合刚才提到的第一条建议的话，至少日志中还能打印出一个有意义的thread.getName()的值。<br>　　<br><strong>捕获外部调用的异常</strong><br>　　只要你调用到了JVM以外的接口，那么发生异常的概率就大大提升了。这包括WEB服务，HTTP,数据库，文件系统，操作系统或者其它的一些JNI调用。你得把每一个调用都当成一个定时炸弹来处理。<br>　　大多数情况下，外部调用之所以会失败是因为传入了错误的参数。为了修复这些问题，把这些请求参数记录到日志中是非常有必要的。<br>　　你可能不想记录错误信息，而是直接去抛出异常，这样做也没有问题。不过这么做的话，你要尽可能把相关的参数都收集起来，放到异常信息里面去。<br>　　你得确保在上一层调用中捕获了异常并且记录到了日志里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    return s3client.generatePresignedUrl(request);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    String err = String.format(“Error generating request: %s bucket: %s key: %s. method: %s&quot;, request, bucket, path, method);</span><br><span class="line">    log.error(err, e); //这里你也可以抛出一个异常，记得把ERR信息带上。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="日志还是调试？"><a href="#日志还是调试？" class="headerlink" title="日志还是调试？"></a>日志还是调试？</h4><p>　　在合适的时候你可以使用调试。如果你一直都是用调试的话，那就继续吧。我个人倾向于使用日志，尽管有的时候环境允许我进行实时的调试。当我找到我在苦苦追寻的问题的原因后，我会检查一遍记录日志的语句，然后删掉它们。它们已经完成了自己调试的使命，现在已经不再需要它们了。不过后来我发现，我自己在写一些以前删掉过的日志记录的语句，至少我自己是有这样的经历。为什么呢？这是因为修复一个BUG并不意味着所有的BUG都修复了。BUG是永远也改不完的。但是散落在文件各处的日志记录给查找下一个BUG的相关信息增加了难度。换句话说，日志文件中的干扰信息太多了，这就是为什么我删掉它们的原因。那同样的，我们是不是可以把已经通过的单元测试也给删掉呢？这会节省掉很多编译的时间，不是吗？当然，我们不会这么做。<br>　　用一句话来总结下？选择日志还是调试，随你个人的喜好吧，也得看你在查找什么类型的问题。</p>
<blockquote>
<p>Reference:</p>
<ul>
<li><a href="http://it.deepinmind.com/java/2014/05/03/5-techniques-2-improve-your-server-logging.html" target="_blank" rel="noopener">日志打印的5点建议</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Logs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈 MySQL 分页]]></title>
      <url>/analysis-mysql-limit.html</url>
      <content type="html"><![CDATA[<p>为什么想去说一下这个问题，一言以蔽之，就是越往后分页，LIMIT语句的偏移量就会越大，速度也会明显变慢。<br><a id="more"></a><br>　　因为 MySQL 提供了<code>Limit</code>语法，相比于<code>Top</code>语法，<code>Limit</code>语法要显得优雅了许多。使用它来分页是再自然不过的事情了。<br><strong>最开始的写法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table ORDER BY id LIMIT offset, rows;</span><br></pre></td></tr></table></figure></p>
<p>　　第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目，所以当数据量达到百万级的时候，查询效率会明显很慢。<br><strong>以下是我总结的一些优化方法：</strong></p>
<ul>
<li>通过子查询的方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table WHERE id &gt;= (SELECT id FROM table LIMIT 1000000, 1) LIMIT 10;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>子查询的方式要设置<code>id</code>为索引。因为子查询是在索引上完成的，而普通查询是在数据文件上完成的，所以子查询的效率会远高于普通的查询。</p>
<ul>
<li><p>通过 between…and 的方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table WHERE id BETWEEN 1000000 AND 1000010;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要查询 id 不是连续的一段，最佳的方法就是先找出 id ，然后用 in 查询 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table WHERE id IN(10000, 100000, 1000000...);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>索引对 MySQL 的<code>in</code>语句也是有效的。<br>　　所以优化查询搜索的关键还是看检索字段有没有走索引，我们可以通过查看 sql 语句的执行计划对 sql性能进行调优。</p>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[手机IMEI失效或者显示null的处理方式]]></title>
      <url>/reset-imei-code.html</url>
      <content type="html"><![CDATA[<p>　　刷机有风险，发烧友们需谨慎。看我是如何把我的一块即将变砖的手机拯救回来的。<br><a id="more"></a><br>　　话说刷机带来的危害，我觉得的最大是一些深度定制的机型，你如果强制刷机，有可能会造成IEMI丢失，变为null，IEMI是国际移动设备身份码的缩写，国际移动装备辨识码，是由15位数字组成的”电子串号”，它与每台手机一一对应，而且该码是全世界唯一的。而IEMI的丢失，会导致移动运营商不能够识别手机型号，从而出现手机无法使用移动数据，不能读取SIM卡的现象。<br>　　解决方式：重新生成串号，恢复IMEI。</p>
<ul>
<li><a href="http://www.piaodown.com/soft/91504.htm" target="_blank" rel="noopener">MTK65XX国产机写串号工具</a></li>
<li>在手机端安装【移动叔叔工具箱】。</li>
<li>将串号工具生成的MPOB-001文件重命名为IMEI.bak并移动到手机SD卡的根目录下，然后配合移动叔叔工具箱来用，运行移动叔叔工具箱，恢复IMEI，重启即可。</li>
<li>注意，使用【移动叔叔工具箱】手机需要有 root 权限。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我毕业了也离职了]]></title>
      <url>/graduated-and-quit.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>祝贺大家毕业了，你们不一定会因为学校感到自豪，但是学校永远以你们为荣。　　　　　　　　                      　<br>　　　　　　　　　　　　　　　　　 　　　　　　　　　　　　　　　– 《哈师大软件学院毕业典礼》</p>
</blockquote>
<a id="more"></a>
<h4 id="毕业了"><a href="#毕业了" class="headerlink" title="毕业了"></a>毕业了</h4><p>　　其实说到学校的好坏牛逼，我虚荣心最强的时候也就是高考结束后在县城高中张榜的时候，觉得考到好大学的学生前途将会多么多么的无限风光，而我当时只想把贴出来的我的名字撕掉。现在觉得好的大学确实可以得到更好的社会资源分配和更高标准的对学生的要求，我越来越觉得一个人的精神内核才是最根本的，你颓唐就是颓唐，你顽强就是顽强。<br>　　写这篇博文的时候，我已经收到了学弟从学校寄过来的毕业证学位证，仪式感还是很强的，毕业了，大学的句号也就此画上了。大学室友的兄弟们，从呼兰的＃506 到江北的＃203，一起创业，一起探讨，我相信历久铭心的兄弟情义，天南海北，愿我们都有为梦想负责的勇气。</p>
<h4 id="小吐槽"><a href="#小吐槽" class="headerlink" title="小吐槽"></a>小吐槽</h4><p>　　当然，我还是想去吐槽一下所谓的软件工程专业，有人把这个领域的本质总结为：“How to program if you cannot？”（如果你不会编程，那么你如何编程？）我觉得这句话说得很好，因为我发现软件工程这整个领域，基本就是吹牛扯淡卖“减肥药”的，所以才会有那么多的人，学了计算机专业，还会再去报个培训班。总有人提出一套套的所谓“方法论”或者“原则，似乎标榜这些就可以写出高质量低成本的软件，这就跟减肥药的广告一样：不用运动，不用节食，一个星期瘦20斤。实习了一年，对这种感觉越来越深，我觉得所有的方法论都应该像程序一样，需要结合上下文，需要特定的应用环境。想起一个笑话：两夫妻睡觉发现床上有跳蚤，身上被咬了好多大包。去买了号称“杀伤率100%”的跳蚤药，撒了好多在床上。第二天早上起来，发现又被咬了好多新的大包。妻子责怪丈夫，说他没看说明书就乱撒。结果丈夫打开说明书一看，内容如下：</p>
<p>本跳蚤药使用方法：</p>
<ul>
<li>抓住跳蚤</li>
<li>掰开跳蚤的嘴</li>
<li>把药塞进跳蚤嘴里</li>
<li>合上跳蚤的嘴</li>
</ul>
<p>我发现很多软件工程的所谓方法论失败之后的借口，跟这跳蚤药的说明书很像。</p>
<h4 id="我离职了"><a href="#我离职了" class="headerlink" title="我离职了"></a>我离职了</h4><p>　　很多人都不理解为什么我会刚毕业就离职，天时地利人和我似乎一样没占到。可是就在跟老板提完辞职，并且被允许可以在下个月办理离职手续的时候，我的开心已经溢于言表。我当然承认<a href="http://imbotao.top/2017/03/08/safe-and-sound/">在这儿的实习</a>一年有多超值，学习了很多技能，交了很多朋友，影响最深的还是做事的态度。我是个默默无闻的人，风吹草动我都会探头张望，又有朋友要离职了，都会让我内心波澜，沉寂好一阵子，和老板 one to one 谈话的时候，也很庆幸老板会以一个朋友的身份跟我讲一些琐碎的杂事和他自己的程序员生涯，我很感激这份缘分。<br>　　归根结底我为什么要离开呢？我需要一些自己的时间，并去做一些自己喜欢的事情，我需要一些臭味相投的朋友，这又让我想起我了我的大学，很多个日日夜夜熬夜看视频学编程，我不想辜负那份努力，也喜欢那个方向。 小白说，语言不该是选择工作的决定性因素，语言只是个工具。我倒觉得，语言更像是一种材料，举个例子，一个做木匠的让他去做铁匠，不一定能做好，或者说根本就是完全不同的两种职业。语言有特性，就像每种材料的属性一样，都是不一样的，一些应用广泛的语言，更是被开源社区发展成了一种平台，比如 html5，java 都是一个平台。<br>　　感谢小白的挽留，感谢极宇舟天的同学们的信任，感谢学长的指导，很惭愧，只做了一点微小的工作，谢谢大家。</p>
<h4 id="做一个好工程师"><a href="#做一个好工程师" class="headerlink" title="做一个好工程师"></a>做一个好工程师</h4><blockquote>
<p>　　工程的本质不是创造，而是去风险化，有时候一个好的解决方案，未必采用了最新的技术和框架，而是看上去朴实无华，功力都包涵在背后的细节里。就像顶尖高手打的斯洛克台球，每一杆都平淡无奇，只是因为上一杆的回球太到位。<br>　　有了锤子想找钉子是很正常的原始冲动，但我们必须认识到，创造力对于程序员这个职业来讲，是锦上添花的东西。如果你没有强大的工程能力，那么创造力也不过是无本之木。所以扎扎实实的把工程基础打好，这是最根本的。<br>　　在此基础上，我比较推荐程序员采用内外两条线来培养自己。在公司内的项目上采取相对保守的策略，尽力把稳定性做到最好，培养出自己卓越的工程能力；然后在公司外的开源项目和自己的独立项目上，采用一些新的技术、实践一些新的想法、充分发挥自己的创造力，梦想还是要有的，对吧。<br>　　这样做最明显的好处是，你可以了解到新技术和激进方案的优缺点，从而在进行方案选型时，有更多的依据；还有一个职业发展上的好处：如果不是主负责人，公司的项目往往不能代表你的能力；但独立项目却可以作为一个非常好的能力证明出现在你的简历里边。<br>　　你可以是一个身怀绝技的手艺人，在自己家里你尝试各种手法各种风格的个人作品；但当你参与颐和园这种级别的工程时，好好的把自己负责的石头雕成总设计师要求的样子就好 —— 毕竟这个时代一个人已经很难负责整个项目了。这就是我所理解的程序员的工匠精神。<br>　　　　　　　　　　　摘自：<a href="https://mp.weixin.qq.com/s?__biz=MzI5OTI5Njg2Mg==&amp;mid=2247483667&amp;idx=1&amp;sn=d6e5953c7a7835148e3822b919b82416#rd" target="_blank" rel="noopener">《程序员到底是一个什么职业？》</a></p>
</blockquote>
<p>我早就开始了四海为家的程序员生活，不是么？</p>
]]></content>
      
        
        <tags>
            
            <tag> Life-Talk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu 环境下markdown转pdf]]></title>
      <url>/ubuntu-markdown-to-pdf.html</url>
      <content type="html"><![CDATA[<p>方法一：在 chrome 上使用马克飞象编辑器对markdown 文件进行编写预览，完成之后在预览模式一侧右键，选择打印，然后就可以选择纸张大小，margin，打印页数，然后默认保存为PDF格式即可。我是我认为比较方便快捷的一种方式。<br><a id="more"></a><br>方法二：安装 retext<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install retext</span><br></pre></td></tr></table></figure></p>
<p>软件安装成功后，ctrl+L 即可进入实时预览模式，点击菜单栏中的打印，也可以保存为PDF格式的文件。</p>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 将字段中首字母大写]]></title>
      <url>/mysql-upcase-first-letter.html</url>
      <content type="html"><![CDATA[<p>　　英文的单纯一般首个字母都是大写的，虽然MySQL中有转换大小写字母的函数，但是那是对整个字段都进行转换，如果需要将字段中首字母大写却没有直接的函数，不过我们可以使用其它的函数将字符串切割，再转换为大写，最后再拼接字符串即可。<br><a id="more"></a></p>
<h4 id="一使用到的函数："><a href="#一使用到的函数：" class="headerlink" title="一使用到的函数："></a>一使用到的函数：</h4><ul>
<li>CONCAT(str1,str2)：字符连接函数 </li>
<li>UPPER(str)：将字符串改为大写字母 </li>
<li>LOWER(str)：将字符串改为小写字母 </li>
<li>LENGTH(str)：判定字符串长度 </li>
<li>SUBSTRING(str,a,b)：提取字段中的一段，从字符串str的第a位开始提取，提取b个字符 </li>
<li>LEFT(str,n)：提取字符串最左边的n个字符 </li>
<li>RIGHT(str,n)：提取字符串最右边的n个字符（该例未用到） <h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4></li>
</ul>
<ol>
<li>用LEFT单独将首字母取出并用UPPER换成大写 </li>
<li>确定字段的长度，并用SBUSTRING取出从第二位到最后一位的所有字段备用。 </li>
<li>用CONCAT连接上边的两个值 </li>
<li>update表中字段的值即可。 </li>
</ol>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update table set field = concat(UPPER(left(field,1)),substring(field,2,(length(field)-1)));</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse Maven Spring SpringMVC Mybatis 整合]]></title>
      <url>/eclipse-maven-spring-springmvc-mybatis-example.html</url>
      <content type="html"><![CDATA[<p>看慕课网【<a href="http://www.imooc.com/index/search?words=%E7%A7%92%E6%9D%80" target="_blank" rel="noopener">Java高并发秒杀API</a>】的系列课程时很受益。所以想着仿着来使用：Mavan-Spring-SpringMVC-Mybatis 的架构。本示例是在：Ubuntu15 上实现的；Windows 上安装 Maven 将不太相同。<br><a id="more"></a></p>
<h2 id="Maven-Install"><a href="#Maven-Install" class="headerlink" title="Maven Install"></a>Maven Install</h2><blockquote>
<p>2016年09月10日 更新：较新版 Eclipse 都有集成 Maven，所以并不需要安装</p>
</blockquote>
<ol>
<li>Run command <code>sudo apt-get install maven</code>, to install the latest Apache Maven.</li>
<li>Run command <code>mvn -version to verify</code> your installation.</li>
<li>Where is Maven installed?<br>The command <code>apt-get</code> install the Maven in <code>/usr/share/maven</code><br>The Maven configuration files are stored in <code>/etc/maven</code></li>
</ol>
<h2 id="Eclipse-Maven-Plugin-m2e"><a href="#Eclipse-Maven-Plugin-m2e" class="headerlink" title="Eclipse Maven Plugin - m2e"></a>Eclipse Maven Plugin - m2e</h2><blockquote>
<p>2016年09月10日 更新：较新版 Eclipse 都有集成 Maven，所以并不需要安装</p>
</blockquote>
<ol>
<li>open Eclipse -&gt; Help -&gt; click “Install New Software” -&gt; click “add”<ul>
<li>Name:m2e</li>
<li>Location:<a href="http://download.eclipse.org/technology/m2e/releases" target="_blank" rel="noopener">http://download.eclipse.org/technology/m2e/releases</a></li>
</ul>
</li>
<li>click “ok” -&gt; click “Maven Integration for Eclipse” -&gt; click “Next”</li>
<li>restrat Eclipse</li>
<li>config m2e -&gt; Window -&gt; Preferences -&gt; Maven -&gt; Installations -&gt; click “Add…” -&gt; select Maven</li>
</ol>
<!-- more -->
<h2 id="Create-a-Maven-Project"><a href="#Create-a-Maven-Project" class="headerlink" title="Create a Maven Project"></a>Create a Maven Project</h2><ol>
<li>File -&gt; New -&gt; New Maven project</li>
<li>select “Use default Workspace location”</li>
<li>select “maven-archetype-j2ee-simple”</li>
<li>input info -&gt; Finish</li>
<li>选中项目右键菜单中选择Properties -&gt; Project Facets -&gt; select “Dynamic Web Module” Version “3.1”</li>
</ol>
<p>Tips:</p>
<ul>
<li>如果在 <code>Project Facets</code> 选择版本时“can not change”，可以在项目目录下手动修改 <code>.settings/org.eclipse.wst.common.project.facet.core.xml</code> 文件配置</li>
<li>项目自动生成的 <code>web.xml</code> 版本较低，手动修改</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">version</span>=<span class="string">"3.1"</span> <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>项目结构</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">    ├── main</span><br><span class="line">    |   ├── java //java源代码</span><br><span class="line">    |   ├── resources //配置资源文件</span><br><span class="line">    |   └── webapp //web文件</span><br><span class="line">    |</span><br><span class="line">    └── test</span><br><span class="line">	    └── java //junit测试</span><br></pre></td></tr></table></figure>
<h2 id="pom-xml-Config"><a href="#pom-xml-Config" class="headerlink" title="pom.xml Config"></a>pom.xml Config</h2><p><a href="https://github.com/imzyf/maven-mybatis-spring-springmvc/blob/master/pom.xml" target="_blank" rel="noopener">Github-maven-mybatis-spring-springmvc pom.xml</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- junit4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 实现slf4j接口整合 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JDBC MySQL Driver --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DAO框架 mybatis --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet API --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1 Spring 核心依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 Spring DAO依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 Spring web相关依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4 Spring Test相关依赖 --&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="logback-xml-Config"><a href="#logback-xml-Config" class="headerlink" title="logback.xml Config"></a>logback.xml Config</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder</span></span><br><span class="line"><span class="comment">			by default --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</span><br><span class="line">			<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Mybatis-Config"><a href="#Mybatis-Config" class="headerlink" title="Mybatis Config"></a>Mybatis Config</h2><p><a href="https://github.com/imzyf/maven-mybatis-spring-springmvc/blob/master/src/main/resources/mybatis-config.xml" target="_blank" rel="noopener">Github-maven-mybatis-spring-springmvc mybatis-config.xml</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 使用jdbc的getGeneratedKays 获取数据库自增主键 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 使用列别名替换列名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Spring-Config"><a href="#Spring-Config" class="headerlink" title="Spring Config"></a>Spring Config</h2><p><a href="https://github.com/imzyf/maven-mybatis-spring-springmvc/tree/master/src/main/resources/spring" target="_blank" rel="noopener">Github-maven-mybatis-spring-springmvc spring</a></p>
<h3 id="Spring-DAO-Config"><a href="#Spring-DAO-Config" class="headerlink" title="Spring-DAO Config"></a>Spring-DAO Config</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 数据库配置文件位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2 数据库连接池 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Employee DB data source. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.dburl&#125;"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- c3p0连接池 私有属性 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.maxPoolSize&#125;"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.minPoolSize&#125;"</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"1000"</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 获取连接失败重试次数 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设计原则：约定大于配置 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3 配置 SqlSessionFactory 对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置mybitis 全局配置文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.moma.dmv.entity"</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 扫描sql配置文件 mapper 需要的xml --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 注入sqlsessionFactory --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.moma.dmv.dao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Spring-Service-Config"><a href="#Spring-Service-Config" class="headerlink" title="Spring-Service Config"></a>Spring-Service Config</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 扫描service包下 所有使用注解的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.moma.dmv.service"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置基于注解的声明式事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用注解控制事务方法的优点</span></span><br><span class="line"><span class="comment">1：开发团队达成一致约定，明确标注事务方法的编程风格</span></span><br><span class="line"><span class="comment">2：保证事务方法的执行时间尽可能短，不要穿插其他网络操作RPC/HTTP请求或者剥离到事务方法外部</span></span><br><span class="line"><span class="comment">3：不是所有的方法都需要事务，比如只有一条修改操作，只读操作不需要事务控制</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Spring-Web-Config"><a href="#Spring-Web-Config" class="headerlink" title="Spring-Web Config"></a>Spring-Web Config</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1:开启springMVC 注解模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2 静态资源默认servlet配置 1 加入对静态资源的处理 js gif png 2 允许使用“/”做整体映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3:配置jsp 显示ViewResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 决定视图类型，如果添加了jstl支持（即有jstl.jar），那么默认就是解析为jstl视图 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/resources/"</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4:扫描web相关的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.moma.dmv.web"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="DAO-Mapper-Example"><a href="#DAO-Mapper-Example" class="headerlink" title="DAO Mapper Example"></a>DAO Mapper Example</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.moma.dmv.dao.InfoDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryById"</span> <span class="attr">resultType</span>=<span class="string">"Info"</span> <span class="attr">parameterType</span>=<span class="string">"long"</span>&gt;</span></span><br><span class="line">		&lt;![CDATA[</span><br><span class="line">		select id,`key`,`value` from info where id = #&#123;id&#125;</span><br><span class="line">		]]&gt;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAll"</span> <span class="attr">resultType</span>=<span class="string">"Info"</span>&gt;</span></span><br><span class="line">		&lt;![CDATA[</span><br><span class="line">		select id,key,value</span><br><span class="line">		from info</span><br><span class="line">		limit #&#123;offset&#125;,#&#123;limit&#125;</span><br><span class="line">		]]&gt;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="web-xml-Config"><a href="#web-xml-Config" class="headerlink" title="web.xml Config"></a>web.xml Config</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dmv-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置springMVC需要加载的配置文件 spring-dao.xml spring-service.xml spring-web.xml</span></span><br><span class="line"><span class="comment">		mybatis -&gt; spring -&gt; springMVC --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dmv-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 默认匹配所有的请求 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="JUnit-Example"><a href="#JUnit-Example" class="headerlink" title="JUnit Example"></a>JUnit Example</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.moma.dmv.dao.InfoDao;</span><br><span class="line"><span class="keyword">import</span> com.moma.dmv.entity.Info;</span><br><span class="line"></span><br><span class="line">RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">ContextConfiguration(locations = &#123; <span class="string">"classpath:spring/spring-dao.xml"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> InfoDao infoDao;</span><br><span class="line">	<span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> id = <span class="number">1</span>;</span><br><span class="line">		Info info = infoDao.queryById(id);</span><br><span class="line">		logger.info(info.toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Reference:</p>
<ul>
<li><a href="https://zyf.im/2016/06/27/eclipse-maven-spring-springmvc-mybatis-example/" target="_blank" rel="noopener">zyf.im</a></li>
<li><a href="http://www.mkyong.com/maven/how-to-install-maven-in-ubuntu/" target="_blank" rel="noopener">MKyong-How to install Maven on Ubuntu</a></li>
<li><a href="http://blog.csdn.net/qjyong/article/details/9098213" target="_blank" rel="noopener">Java之道-使用Eclipse构建Maven项目 (step-by-step)</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[给网站添加保存到移动设备主屏的 icon]]></title>
      <url>/add-website-icons-to-the-home-screen.html</url>
      <content type="html"><![CDATA[<p>By adding an iOS icon, anyone who decides to save your webpage to the home screen of their iPhone, iPad, or Android will see a nice app-like icon rather than an image of your page.<br><a id="more"></a></p>
<p>Here is a table of the current <a href="https://developer.apple.com/ios/human-interface-guidelines/graphics/app-icon/" target="_blank" rel="noopener">iOS icon sizes from Apple</a>:</p>
<table>
<thead>
<tr>
<th style="text-align:center">iPhone 6/7, iPhone SE</th>
<th style="text-align:center">iPad / iPad Mini</th>
<th style="text-align:center">iPad Pro</th>
<th style="text-align:center">iPhone 6/7 Plus</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">120×120</td>
<td style="text-align:center">152×152</td>
<td style="text-align:center">167×167</td>
<td style="text-align:center">180×180</td>
</tr>
</tbody>
</table>
<p>For Android icons you’ll want to follow these specifications:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Android Regula</th>
<th style="text-align:center">Android Hi-Res</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1128×128</td>
<td style="text-align:center">192×192</td>
</tr>
</tbody>
</table>
<!-- more -->
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;http://www.yoursite.com/apple-touch-icon.png&quot; rel=&quot;apple-touch-icon&quot; /&gt;</span><br><span class="line">&lt;link href=&quot;http://www.yoursite.com/apple-touch-icon-152x152.png&quot; rel=&quot;apple-touch-icon&quot; sizes=&quot;152x152&quot; /&gt;</span><br><span class="line">&lt;link href=&quot;http://www.yoursite.com/apple-touch-icon-167x167.png&quot; rel=&quot;apple-touch-icon&quot; sizes=&quot;167x167&quot; /&gt;</span><br><span class="line">&lt;link href=&quot;http://www.yoursite.com/apple-touch-icon-180x180.png&quot; rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; /&gt;</span><br><span class="line">&lt;link href=&quot;http://www.yoursite.com/icon-hires.png&quot; rel=&quot;icon&quot; sizes=&quot;192x192&quot; /&gt;</span><br><span class="line">&lt;link href=&quot;http://www.yoursite.com/icon-normal.png&quot; rel=&quot;icon&quot; sizes=&quot;128x128&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>Make the first apple one the 120 x 120.</p>
<p>If you don’t want to create all these images, you should at least create the larger resolution ones. That way they’ll look good on the hi-res devices.</p>
<blockquote>
<p>Reference:</p>
<ul>
<li><a href="https://zyf.im/2017/03/15/add-website-icons-to-the-home-screen/" target="_blank" rel="noopener">zyf.im</a></li>
<li><a href="http://www.kylejlarson.com/blog/adding-an-icon-for-iphone-ipad-android-to-your-website/" target="_blank" rel="noopener">How to Add Icons to iPhone, iPad &amp; Android to Your Website</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> front-end </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 修改提交历史]]></title>
      <url>/git-modify-commit-history.html</url>
      <content type="html"><![CDATA[<p>　　在使用 Git 时，我们经常会遇到修改本地提交记录的情况。比如：修改最近一次提交记；<br>　　还比如：将多次小的 commit 合并成一个大的 commit。这种做发有利也有弊，利在：review 代码时，可以按功能看，可以省去 review 一些前期写的无效的代码；弊是：一次提交修改过多，如果有问题，不利于调试。<br><a id="more"></a></p>
<h3 id="修改最近一次提交记录"><a href="#修改最近一次提交记录" class="headerlink" title="修改最近一次提交记录"></a>修改最近一次提交记录</h3><h4 id="修改提交说明"><a href="#修改提交说明" class="headerlink" title="修改提交说明"></a>修改提交说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>
<p>然后就可以进入 vim 编辑提交信息，保存退出即可。</p>
<h4 id="改被提交的快照"><a href="#改被提交的快照" class="headerlink" title="改被提交的快照"></a>改被提交的快照</h4><p>　　如果你完成 commit 后又想修改被提交的快照，增加或者修改其中的文件。先执行 git add 命令，将修改的文件添加到缓存区，然后运行 git commit -amend 命令，该命令会获取你当前的暂存区的内容一并提交到最后一次 commit<br>　　例如：新加了一个文件 new_file.cpp ，想要合并到最后一次提交，过程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add new_file.cpp</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure></p>
<p>也可以直接运行下面的命令，不过要小心，不要提交了多余的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -- amend</span><br></pre></td></tr></table></figure></p>
<h4 id="将文件从本次提交中移除、"><a href="#将文件从本次提交中移除、" class="headerlink" title="将文件从本次提交中移除、"></a>将文件从本次提交中移除、</h4><p>　　如果想把已经 commit 的文件从这次 commit 移除的话，运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset [-soft] HEAD~1 # -soft可加可不加，默认就是soft选项</span><br><span class="line">git checkout -filename # 要从本次提交移除的文件名</span><br><span class="line">git commit -m &quot;new commit&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="修改多个提交记录"><a href="#修改多个提交记录" class="headerlink" title="修改多个提交记录"></a>修改多个提交记录</h3><p>　　要修改历史中更早的提交，你必须采用更复杂的工具。Git 没有一个修改历史的工具，但是你可以使用 rebase 工具来衍合一系列的提交到它们原来所在的 HEAD 上。<br>　　依靠这个交互式的 rebase 工具，你就可以停留在每一次提交后，如果你想修改或改变说明、增加文件或任何其他事情。你可以通过给 git rebase -i 命令以交互方式进行 rebase。<br>　　例如，你想修改最近三次的提交说明，或者其中任意一次，你必须给 “git rebase -i提供一个参数，指明你想要修改的提交的父提交。例如HEAD~3是指从 HEAD 指针到 HEAD+3 的位置，也就是最近第 4 次提交。所以想修改最近 3 次提交，你需要指明第 3 次提交的父提交（第4次提交）即HEAD~3`。运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure></p>
<p>　　再次提醒这是一个衍合命令，也就是 HEAD~3 到 HEAD 范围内的每一次提交都会被重写，不管你是否修改提交说明 SHA-1 的值都会发生变化。所以千万不要涵盖你已经推送到中心服务器的提交。这么做会使其他开发者产生混乱，因为你提供了同样变更的不同版本。运行该命令后进入交互界面，类似：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pick fecb551 Init the view model</span><br><span class="line">pick bb199a0 Update the version</span><br><span class="line">pick bc5cd9d Add new method</span><br><span class="line"></span><br><span class="line"># Rebase f77f585..fecb551 onto f77f585</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line">#  p, pick = use commit</span><br><span class="line">#  r, reword = use commit, but edit the commit message</span><br><span class="line">#  e, edit = use commit, but stop for amending</span><br><span class="line">#  s, squash = use commit, but meld into previous commit</span><br><span class="line">#  f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</span><br><span class="line">#  x, exec = run command (the rest of the line) using shell</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure></p>
<p>　　根据命令提示，就可以进行历史更改了。很重要的一点是你得注意这些提交的顺序与你通常通过 log 命令看到的是相反的。如果你运行 log，你会看到下面这样的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick bc5cd9d Add new method</span><br><span class="line">pick bb199a0 Update the version</span><br><span class="line">pick fecb551 Init the view model</span><br></pre></td></tr></table></figure></p>
<h4 id="修改指定提交"><a href="#修改指定提交" class="headerlink" title="修改指定提交"></a>修改指定提交</h4><p>　　例如：只修改最近第3次提交说明可以进行如下更改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reword fecb551 Init the view model</span><br><span class="line">pick bb199a0 Update the version</span><br><span class="line">pick bc5cd9d Add new method</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>　　保存并退出编辑器，rebase 命令在衍合到第 3 次提交时会进入提交说明编辑页面，在此进行编辑新的提交说明，保存并退出即可，rebase 命令继续进行直至完成全部衍合操作。<br>  如果你不仅想要修改提交说明，还要更改提交，可以进行如下更改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit fecb551 Init the view model</span><br><span class="line">pick bb199a0 Update the version</span><br><span class="line">pick bc5cd9d Add new method</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>　　保存并退出编辑器，rebase 命令在衍合到第三次提交时会等待你提交新的更改，并提示你修改完成后运行 git commit –amend 命令，然后运行 git rebase –continue 继续进行 rebase 直至完成全部衍合。</p>
<h4 id="重排提交"><a href="#重排提交" class="headerlink" title="重排提交"></a>重排提交</h4><p>　　你也可以使用 git rebase -i 命令对提交历史彻底重排或删除提交。例如你想删除”Update the version”这个提交，并且修改其他两次提交的顺序，可以将：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick fecb551 Init the view model</span><br><span class="line">pick bb199a0 Update the version</span><br><span class="line">pick bc5cd9d Add new method</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pick bc5cd9d Add new method</span><br><span class="line">pick fecb551 Init the view model</span><br></pre></td></tr></table></figure></p>
<p>　　然后保存并退出编辑器，此时 rebase 命令会先应用 bc5cd9d (Add new method)，然后应用 fecb551 (Init the view model) bb199a0 Update the version这次提交。 然后保存并退出编辑器，此时 rebase 命令会先应用 bc5cd9d (Add new method)，然后应用 fecb551 (Init the view model)，接着停止。执行完上诉操作，你已经修改了这些提交的顺序，并且删除了bb199a0 (Update the version) 这次提交。</p>
<h4 id="合并提交"><a href="#合并提交" class="headerlink" title="合并提交"></a>合并提交</h4><p>　　git rebase -i 命令还可以将一系列提交合并成一个提交。从上面的脚本提示中可以看到 s, squash = use commit, but meld into previous commit 提示。如果用 squash 修饰提交就可以进行提交之间的合并，例如可以将脚本修改成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick fecb551 Init the view model</span><br><span class="line">squash bb199a0 Update the version</span><br><span class="line">squash bc5cd9d Add new method</span><br></pre></td></tr></table></figure></p>
<p>　　保存并退出编辑器，rebase 命令会应用全部三次变更然后进入编辑器来归并三次提交说明。当你保存之后，你就拥有了一个包含前三次提交的全部变更的单一提交。</p>
<h4 id="拆分提交"><a href="#拆分提交" class="headerlink" title="拆分提交"></a>拆分提交</h4><p>　　拆分提交实际上就是撤销一次提交，然后分多次进行重新提交。例如你想将三次提交中的中间一次拆分。将 ”Update the version” 拆分成两次提交：”Update the version1” 和 ”Update the version2”，可以进行如下修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick fecb551 Init the view model</span><br><span class="line">edit bb199a0 Update the version</span><br><span class="line">pick bc5cd9d Add new method</span><br></pre></td></tr></table></figure></p>
<p>　　当 rebase 到 bb199a0 时，会进入等待你提交新 commit 的状态，这时看可以运行 git reset HEAD^ 对当前提交进行重置，然后分别运行 git add 命令添加想要提交的文件，分别进行 git commit，最后运行 git rebase –continue 完成所有衍合。整体过程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^</span><br><span class="line">git add file1</span><br><span class="line">git commit -m &apos;Update the version1&apos;</span><br><span class="line">git add file2</span><br><span class="line">git commit -m &apos;Update the version2&apos;</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure></p>
<p>执行完上诉操作，提交历史看起来就像这样了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1c002dd Add new method</span><br><span class="line">9b29157 Update the version2</span><br><span class="line">35cfb2b Update the version1</span><br><span class="line">f3cc40e Init the view model</span><br></pre></td></tr></table></figure></p>
<p>　　再次提醒，这会修改你列表中的提交的 SHA 值，所以请确保这个列表里不包含你已经推送到共享仓库的提交。
　　</p>
<blockquote>
<p>Reference:　<a href="http://glgjing.github.io/blog/2015/01/06/git-xiu-gai-ti-jiao-li-shi/" target="_blank" rel="noopener">GLGJing’s Blog</a>　　</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人民的名义]]></title>
      <url>/the-name-of-the-people.html</url>
      <content type="html"><![CDATA[<p>　　这次回学校毕业答辩，空闲时间追了一个剧《人民的名义》,随着剧情一点一点地推进，突然开始很心疼，心疼的不是别人，也不是剧中的人物，因为那毕竟是虚构的，不是真实的人生，而是我们自己，这才是真真实实的生活与生命。<a id="more"></a>看了剧中的情节，真是大开眼界，不论是祁同伟的一人得道，鸡犬升天，还是赵瑞龙的草菅人命亦或是丁义珍在饭局上左右逢源，逢场作戏，近似人生赢家。甚至一个处级干部赵德汉，都能狂贪几个亿，要知道，除了国家级领导人，下面就是部司厅局处科，小小一个处级干部，都能贪污几个亿？你知道天朝有多少处级干部吗？呵呵，我还真查了下，毛爷爷说，没有调查就没有发言权，参考链接在这里，处级干部约60万，一个人一亿的话，不敢想象，当然了，不能这么悲观，要相信党相信政府，我还是有这觉悟的。现如今大家都说日子难过，现在知道了吧？为什么我们日子难过了，在人民的名义中各种现象也只是社会真实情况的冰山一角吧？假设现实情况比电视剧中所要努力描绘的良好社会略槽糕一点点，那么日子难就很正常了，我想说，不正常才奇怪哩。<br>　　现在好多人都说房价高，那么房价为什么会高呢？只有两种情况，一种是你赚钱的速度赶不上房价的上涨速度，另一种是货币贬值了，房价虚高，只不过刚需接盘侠们是货币贬值的最后承受者，没有享受到任何一点点货币贬值带来的收益，要知道货币贬值对所有人来说并不是公平的，有人说，我手里的钱贬值了，那有钱人手里的钱一样也贬值了呀？只能说你too young，too simple，钱就像是流水，就像一条河，同样的一河水，在水的上游和下游能一样吗？同样货币这个贬值链，就像一条河水一样，也分上游下游，货币流到上游的人的手里的时候，并没有贬值，而是和以前价值一样，那么这些占据上游的都是哪些人呢？发大水的是央行，上游的人是各大国有银行、国企、国家各部委、权力掌控者等，中游是商业银行、民营企业、利益既得者等，经过层层盘剥，当这个贬值链流到下游的时候，又是哪些人呢？就是这个底层劳动人民、刚需接盘侠，之所以房价会高涨，是因为没有任何一个产业能够锁住这么海量的贬值货币，唯有将这些海量的货币存之于楼市，才能尽量减少对其他行业的伤害，试想通胀不是流向楼市，而是流向日常生活必须品，那个个吃不上饭可是天大的问题了，但是一部分人住不上房却不是致命的，即使这些住不上房的人闹腾也不用操心，因为那些有房的会代政府来管教他们，你说此话怎讲，君不见，房价略降，全国各地的售楼处都出现了业主打杂情况吗？这不就是有房产者、既得利益者在代国家管教这些无房产者吗？房价想降很难，一是政府不愿意，房价降了，海量的贬值货币往哪藏呢？二是有产者不愿意，买不起房，大家不会联合起来打杂售楼处，但是房价下降，已买房的人则会联合起来上书政府，要求政府救市，更有甚者，直接联合起来打杂售楼处，还有天理吗？法制社会存在这种流氓行径？没有任何理由，就是因为房价下降，就可以任意耍流氓了？呵呵，这些人没有得到严肃的处理，已经代表了政府的态度，睁一只眼闭一只眼，这些人就都没事了。<br>　　追剧的过程中，一把手在剧中出现了无数遍，我英文不好，不要欺负我，我想请问一把手英文怎么翻译呢？大英帝国、美帝国家人民的词典中，有一把手这个词吗？有海外待过的人，还望不吝赐教。民选政府与任命制有着本质的区别，民选出来的领导人要对人民负责，同理，任命制选出来的领导人只对任命他的人负责。这种本质的区别，注定了人民有着本质的不同地位，该得到什么样的对待都是自己争取而来，你笑着看资本主义国家人民游行、示威、罢工，那就不要忽视人家赢得的地位。有付出才有收获，老祖宗留下来的话，是有道理的。任命制在我看来只能听天由命了，就像古代皇帝一样，如果是个雄才大略、英明神武的皇帝，那么人民生活相对来说更幸福一点，如果碰到昏庸无能、荒淫无度的主，那人民的生活能不水深火热吗？这不就是靠天吃饭吗？和现在的任命制有啥区别？一把手喜欢你，就提拔你，至于你对人民来说是福是祸，又有几个一把手会关心呢？<br>　　这部剧叫《人民的名义》，恕我愚钝，我不知道这里面哪一点代表了人民的名义，我只看到草根出身的处长在第一集就被干掉了，我只看到同样草根出身的祁同伟和高小琴最后同样被干掉了，而那个利用权势不断打压祁同伟的人呢？梁璐包括他的父亲最后毫发无损，这就是人民的名义吗？人民的孩子总是最先和最后被干掉吗？我分明看到的就是有权有势同样能逍遥法外，我不知道现实中有多少丁义珍，但是我敢保证现实中的丁义珍绝对不会在国外的餐馆刷盘子，处处美化、处处讨喜，编剧们都不觉得恶心吗？像沙瑞金和侯亮平在现实中毕竟是少数，再进一步讲，现实中有多少丁义珍、赵立春（副国级，国家领导人啊、领导人啊、领导人啊）、赵瑞龙、刘新建、陈清泉等等这些人呢？恐怕远不止电视中所表现的那些吧？<br>　　在剧情最后部分，侯亮平劝降祁同伟，莫名的心疼起祁同伟来，那个和天下棋，愿用自己的命去胜天半子的人，也许在祁的心中是这么想的，你侯亮平算什么东西，也敢来劝降我？在祁的身边，虽然不乏师长，以及同一师门的师弟师妹，但是又有几个打心眼里瞧得起看得起他的呢？他想过靠自己的努力来出人头地，在大学里学习努力，成绩优异，并且还是校学生会主席，但是有什么用呢？毫无关系背景的他，眼睁睁的看着那些能力平平甚至低于他的的校友们分配到了大城市，而他却被掌控权力的梁璐的父亲下放到了穷山沟沟里，只因他没接受梁璐的追求，即便他没有放弃，主动请缨去做缉毒工作，因为这个工作更危险，更容易立功，凭借着过人的勇气和努力，他成为了缉毒英雄，但是结果呢？梁璐的父亲，凭借手握大权，借着权力以惜才为名义，阻止让他升迁，硬生生的将他继续困于穷山沟之中。最终，这个内心孤傲的人向现实屈服了，这才有了那在汉东大学的著名一跪，祁同伟啊是个被时代抛弃的人、是个被权力毁掉的人、是个草根出身不断向上爬却死在权力脚下的人，直到最后事发败露，他也没有屈服，用他的话说，这个世界上没有人能够审判他，即便可能被判无期徒刑，苟延残喘，但是并没有，他没有投降，没有屈服，而是选择自杀结束生命。<br>　　剧中还有一个现象被大家忽略了，那就是高育良和李达康的女儿都出国了，这就是官二代的命啊。而侯亮平和陈海这种所谓的中产呢？孩子只能挤在国内上些垃圾学校，甚至侯亮平妻子给孩子报的一个补习班，那老师居然是个电工，但是招生工作火热火热的，这和现代的学区房、各种补习班真是不谋而合。幸好这个老师被侯亮平一眼识破，谁又能说现实中存在诸多没有被识破的呢？如果现实中没有侯亮平去戳穿老师的嘴脸呢？岂不是依然可以大摇大摆的顶着补习班的名义继续招摇撞骗。如果现实中的所有官员子女都在国外接受教育，他们对人民又怎么会负责呢？从小接受资本主义国家的理念、文化、习俗、教育等等，怎么比得了土生土长的中国人对人民的了解程度呢？这些人谁又能保证其不在官爸爸富爸爸的扶持下走上统治人民的路子呢？当他们成长为了统治阶级，只要自我舒适，谁管你人民死活，大不了贪了几个亿全家移民罢了。</p>
]]></content>
      
        
        <tags>
            
            <tag> Life-Talk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读《如何高效学习》]]></title>
      <url>/reading-how-to-efficient-learning.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>Learn More, Study Less？<br><code>&lt;!-- more --&gt;</code></p>
</blockquote>
<p>　　最近两天读了斯科特·扬的《如何高效学习》这本书，至于为什么会去读这本书，因为关于这本书的介绍和这本书自己的引言都让我觉得它能为我创造实际的价值。读过了之后也觉得作者的很多观点我在不同的好书中都见过，让我深深感觉到大牛的学习方式都是很相似的，牛人都是通过把知识联系到实际问题，联系到自己，联系到现实生活，来更好地理解知识或解决问题。<br>　　这本书主要介绍 <strong>整体学习法</strong>，我的理解就是在知识之间建立关联，形成信息网络，有助于更好地理解知识。同时介绍了整体学习的一些方法，比喻法和内在化是作者认为比较好的方法；整体学习的顺序是 <strong>获取-&gt; 理解-&gt;扩展-&gt;纠错-&gt;应用</strong>。应用和给人讲解（费曼技巧）能更好地帮助我们掌握知识，接下来我以全书的顺序捋一下本书的主要思路和观点。</p>
<h5 id="第一章：整体性学习法"><a href="#第一章：整体性学习法" class="headerlink" title="第一章：整体性学习法"></a>第一章：整体性学习法</h5><p>　　整体性学习法可以归纳为这样的顺序：获取—理解—拓展—纠错—应用—测试。我觉得作者用了大量的语言和配图就是想表达的观点就是学习的时候要善于联想，把相关的知识由点连成线，连成面。当然，上面归纳的这种学习顺序不是死的，是需要学习者把这种精神领悟到，不断内化，形成自己的东西。 要发挥想象力，思考的越多，这部分知识点你理解的越深刻，以后也会实际运用的更好。 </p>
<h5 id="第二章：整体性学习技术"><a href="#第二章：整体性学习技术" class="headerlink" title="第二章：整体性学习技术"></a>第二章：整体性学习技术</h5><p>　　这一章主要是很多技巧性的东西，对于技巧这个话题，每个人都有自己的技巧，不用生搬硬套别的方式方法，作者只提供了一些思路，当然你觉得作者的提供的技巧不错也可以学习，包括获取阶段的速度技巧等等。<br>　　作者将信息分类，针对不同类别提出了不同的技巧来记忆。介绍了四个部分的方法：</p>
<ul>
<li>获取知识:<ol>
<li>快速阅读</li>
<li>笔记流联系观点</li>
<li>比喻</li>
<li>内在法</li>
</ol>
</li>
<li>图表法随意信息的处理<ol>
<li>联想法</li>
<li>挂钩法</li>
<li>信息压缩技术知识拓展</li>
</ol>
</li>
<li>实际应用<ol>
<li>模型纠错</li>
<li>以项目为基础学习</li>
</ol>
</li>
</ul>
<h5 id="第三章：超越整体性学习"><a href="#第三章：超越整体性学习" class="headerlink" title="第三章：超越整体性学习"></a>第三章：超越整体性学习</h5><p>　　这一章主要是强调优秀的学习习惯对学习的重要性，其中有三点给我印象很深：<strong>能量管理、绝不拖延和批处理</strong> 。还有关于费曼技巧的介绍，下面是费曼技巧的流程：</p>
<blockquote>
<p>第一步：选择要学习的概念首先选好你打算深入理解的概念，拿一张空白纸，在最上方写下概念的名称。<br>第二步：设想你是老师，正在试图教会一名新生这个知识点这一步你要假想自己费尽口舌让一名毫无这方面知识的学生听懂，并把你的解释记录下来。这一步至关重要，因为在自我解释那些你理解或不理解的知识过程中，你会理解得更好，而原先不明白的地方也得以理清。<br>第三步：当你感到疑惑时，返回去吧每当你碰到难题感到疑惑时，别急着往下走，学习不是单行道，回过头来，重新阅读参考材料、听讲座或找老师解答，直到你觉得搞懂了为止，然后把解释记到纸上。<br>第四步：简单化和比喻如果你的解释很啰唆或者艰涩，尽量用简单直白的语言重新表述它，或者找到一个恰当的比喻以更好地理解它。</p>
</blockquote>
<p>最后想说的话：<br>　　现在都流行什么番茄工作法，一次工作25分钟，就好像很厉害了的样子。其实想想高中的时候，一坐一晚上几个小时都能精力高度集中完成任务。只是随着智能手机和互联网的发展，我们经常被一些无关痛痒的消息打断，导致我们难以集中精力，注意力阀值降低。提高自己的注意力阀值，be focus，你最终发现番茄工作法什么的弱爆了。</p>
]]></content>
      
        
        <tags>
            
            <tag> reading </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 目录树]]></title>
      <url>/linux-directory-tree.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>　　linux有那么多目录，总是让新手摸不清头脑，其实，等你用了一段linux后，再去看一下它的文件组织方式，也没有第一眼看到的那么复杂。而且，各个linux发行版本都遵循相同的标准，所以，就算了解它的各个文件如何组织是一次痛苦的重生，那也是只需要痛苦一次的，这是值得的。<br><a id="more"></a></p>
</blockquote>
<p>　　由于linux发行版本众多，如果每个人都按自己的想法来组织文件，那么，必然造成管理上的混乱，而且没有人希望自己接触到一个新的linux发行版本，发现目录配置方法居然跟以前自己学的完全不一样。所以，关于linux下文件组织方式的标准就在大家翘足企首，忘眼欲穿中出炉了——即FHS(Filesystem Hierarchy Standard)。</p>
<p><strong>FHS 定义了三层目录下面应该放什么：</strong></p>
<ul>
<li>/ (root，根目录) 与开机系统有关</li>
<li>/usr (UNIX software resource) 与软件安装/执行有关</li>
<li>/var (variable) 与系统运作过程有关</li>
</ul>
<p>FHS定义文件的组织方式如图所示：<br><img src="http://i.imgur.com/RVX81.gif" alt="alt text"></p>
<p><strong>根目录(/)</strong><br>　　根目录是整个系统最重要的目录，主要与开机，还原，系统修复等操作相关。<br><img src="http://i.imgur.com/orMiD.png" alt="alt text"></p>
<p><img src="http://i.imgur.com/E9DNx.png" alt="alt text"></p>
<p><strong>/usr</strong><br>　　/usr 是UNIX Software Resource 的缩写，而不是user 的缩写！FHS建议所有软件开发者应该将他们的数据合理地放置在该目录的子目录下，而不要自行新建该软件自己独立的目录。这个目录有点类似与Windows 系统的C:\Windows\和C:\Program files\这两个目录的综合体，系统刚安装完毕时，这个目录会占用最多的硬盘空间。<br><img src="http://i.imgur.com/7tJjZ.png" alt="alt text"></p>
<p><strong>/var</strong><br>　　/usr是安装时会占用较多的硬盘空间，而/var则是在系统运行以后，逐渐占用硬盘空间。因为/var目录主要针对常态性变动的文件，包括缓存(cache)，登陆文件(logfile)以及某些软件运行所产生的文件，包括程序文件(lockfile，runfile)，或者MySql的数据库文件等。</p>
<p><img src="http://i.imgur.com/USLvN.png" alt="alt text"></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 日常应用安装总结]]></title>
      <url>/ubuntu-install-daily-application.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>ubuntu 日常应用安装总结<br><a id="more"></a></p>
</blockquote>
<h4 id="壹-中文输入法"><a href="#壹-中文输入法" class="headerlink" title="壹. 中文输入法"></a>壹. 中文输入法</h4><ol>
<li>搜狗输入法下载地址： <a href="http://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="noopener">http://pinyin.sogou.com/linux/?r=pinyin</a></li>
<li><p>进入到搜狗输入法下载位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i sogoupinyin_*.deb</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果报错，需要联网，通过下面这条命令修复缺失的组件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新执行安装命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i sogoupinyin_*.deb</span><br></pre></td></tr></table></figure>
</li>
<li><p>需要修改系统默认输入法，点击桌面右上角的开关按钮，系统设置（System Config）-&gt;语言支持（Language Support）-&gt; 键盘输入法系统从ibus改成fcitx(fcitx是支持搜狗输入法的中国人自制的输入法系统) ，找到“添加或删除语言…”打开后找到Chinese(Simple)（简体中文是也），打钩。应用到整个系统，桌面右上角，找到并点击注销（log out），即可。</p>
</li>
</ol>
<h4 id="二-Google-chrome"><a href="#二-Google-chrome" class="headerlink" title="二. Google chrome"></a>二. Google chrome</h4><ol>
<li><p>将下载源加入到系统的源列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://repo.fdzh.org/chrome/google-chrome.list -P /etc/apt/sources.list.d/</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入谷歌软件的公钥，用于下面步骤中对下载软件进行验证</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -</span><br></pre></td></tr></table></figure>
</li>
<li><p>对当前系统的可用更新列表进行更新</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行对谷歌 Chrome 浏览器（稳定版）的安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="三-netease-cloud-music"><a href="#三-netease-cloud-music" class="headerlink" title="三. netease-cloud-music"></a>三. netease-cloud-music</h4><ol>
<li>下载地址：<a href="http://s1.music.126.net/download/pc/netease-cloud-music_0.9.0-2_amd64.deb" target="_blank" rel="noopener">http://s1.music.126.net/download/pc/netease-cloud-music_0.9.0-2_amd64.deb</a> </li>
<li>依次执行以下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i netease-cloud-music*</span><br><span class="line">sudo apt-get -f install</span><br><span class="line">netease-cloud-music</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="四-aptitude"><a href="#四-aptitude" class="headerlink" title="四. aptitude"></a>四. aptitude</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install aptitude</span><br></pre></td></tr></table></figure>
<h4 id="五-vim"><a href="#五-vim" class="headerlink" title="五. vim"></a>五. vim</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install vim</span><br></pre></td></tr></table></figure>
<h4 id="六-git"><a href="#六-git" class="headerlink" title="六.  git"></a>六.  git</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install git</span><br></pre></td></tr></table></figure>
<h4 id="七-mysql"><a href="#七-mysql" class="headerlink" title="七. mysql"></a>七. mysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install mysql-server</span><br></pre></td></tr></table></figure>
<h4 id="八-java"><a href="#八-java" class="headerlink" title="八. java"></a>八. java</h4><p><a href="http://www.oracle.com/technetwork/java/javase/archive-139210.html" target="_blank" rel="noopener">jdk download</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java    </span><br><span class="line">sudo apt-get update    </span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure>
<h4 id="九-unrar"><a href="#九-unrar" class="headerlink" title="九. unrar"></a>九. unrar</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install unrar</span><br></pre></td></tr></table></figure>
<h4 id="十-Unity启动器可以移到屏幕底部"><a href="#十-Unity启动器可以移到屏幕底部" class="headerlink" title="十. Unity启动器可以移到屏幕底部"></a>十. Unity启动器可以移到屏幕底部</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gsettings set com.canonical.Unity.Launcher launcher-position Bottom </span><br><span class="line">恢复到左侧</span><br><span class="line">gsettings set com.canonical.Unity.Launcher launcher-position Left</span><br></pre></td></tr></table></figure>
<h4 id="十一-安装atom"><a href="#十一-安装atom" class="headerlink" title="十一. 安装atom"></a>十一. 安装atom</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/atom  </span><br><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install atom</span><br></pre></td></tr></table></figure>
<h4 id="安装-IDEA"><a href="#安装-IDEA" class="headerlink" title="安装 IDEA"></a>安装 IDEA</h4><ul>
<li><a href="https://www.jetbrains.com/idea/download/#section=linux" target="_blank" rel="noopener">下载地址</a></li>
<li>这里我选择 <code>Ultimate</code> <code>without jdk</code> 版下载</li>
<li><p>下载完成，解压到 <code>/opt/</code>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf ideaIU-20* -C /opt</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后进入它的 <code>bin</code> 目录，执行 <code>./idea.sh</code> 启动</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何阅读书籍]]></title>
      <url>/how-to-reading.html</url>
      <content type="html"><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>这篇文章从如何阅读书籍出发，简单讨论了如何选择书籍、是否阅读原版和阅读数量这几个常见问题，然后自己的阅读问题进行了分析和总结。<br><a id="more"></a></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>“如何阅读” 指 “What to read” 而非 “How to read”，Mortimer J. Adle r的 怎样阅读一本书 对How to read有着精彩的描述。</li>
<li>“书籍”指非小说（Non-fiction）类书籍。<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4>我是一个功利主义者（Utilitarianism），因此我认为阅读的目标在于为自己创造实际价值，所以：<ol>
<li>我不会因为某本书看起来很有趣就去阅读（机会成本）。</li>
<li>也不会因为很多人推荐某本书就去阅读（从众）。</li>
<li>更不会因为某本书难就去阅读（追求智商优越感）。</li>
</ol>
</li>
</ol>
<p>一本书值得阅读，当且仅当：</p>
<ol>
<li>它可以直接为我创造价值。</li>
<li>它可以间接为我创造价值。</li>
</ol>
<p>我的阅读目标：<br><strong>形成T型知识结构：专业知识尽可能深入，专业周边知识尽可能精炼。</strong></p>
<h4 id="专业书籍"><a href="#专业书籍" class="headerlink" title="专业书籍"></a>专业书籍</h4><p>专业知识尽可能深入。</p>
<p>我是一个软件开发者（Software Developer），因此这里的专业书籍均和软件开发有关。</p>
<p>从一本经典书籍出发，深度优先遍历它的引用列表，通过书评和摘要了解这些引用书籍，再根据自己的实际情况决定自己的阅读次序。</p>
<p>这里以 代码大全 为例（为了方便和一致性，这里使用英文书名）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Code Complete：软件构建全程最佳实践指南。</span><br><span class="line">|</span><br><span class="line">|----How to Solve it：系统解决问题。</span><br><span class="line">|</span><br><span class="line">|----Conceptual Blockbusting：跳出思维的壁垒。</span><br><span class="line">|</span><br><span class="line">|----Mythical Man Month：软件工程不能做什么。</span><br><span class="line">|</span><br><span class="line">|----Programming Pearls：极简算法手册。</span><br><span class="line">     |</span><br><span class="line">     |----The Science of Programming：编写正确的程序。</span><br><span class="line">     |</span><br><span class="line">     |----Writing Efficient Programs：编写高效的程序。</span><br><span class="line">|</span><br><span class="line">|----Pragmatic Programmer：高效程序员的实践。</span><br><span class="line">|</span><br><span class="line">|----Refactoring：如何改进自己的代码。</span><br><span class="line">|</span><br><span class="line">|----Programming on Purposes：用正确的编程模式处理问题。</span><br><span class="line">|</span><br><span class="line">|----Software Tools：用合适的抽象封装复杂度。</span><br><span class="line">     |</span><br><span class="line">     |----The Practice of Programming：极简编程风格指南。</span><br><span class="line">          |</span><br><span class="line">          |---- Writing Solid Code：减少调试的时间。</span><br><span class="line">          |</span><br><span class="line">          |---- Elements of Programming Style：极简编程风格指南。</span><br></pre></td></tr></table></figure></p>
<p>可以发现，通过 代码大全 一本书，经过短短两层引用联系，几乎可以找到2004年以前所有软件开发的经典书籍。事实上，我阅读的80%以上的软件开发经典书籍，都源自于 代码大全 的引用列表。</p>
<p>这种方法的好处：</p>
<ul>
<li>简单直接：相对于从茫茫书海里找出10本经典书籍，找1本经典书籍再从它的引用列表里面找到20本经典书籍要容易的多；</li>
<li>质量保证：靠谱书籍的引用书籍的质量一般都很高；</li>
<li>发现一些被忽视的经典：相当一部分的书籍随着时间的流逝而淡出人们的视野，但这并不代表它们本身没有价值，例如：<br>Programming on Purposes<br>Software Tools<br>The Science of Programming<br>Writing Solid Code<br>Writing Efficient Programs<br>等等… 这些书或者绝版，但它们都对我的软件开发理念产生了巨大影响。</li>
<li>形成知识体系：引用书籍彼此具有天然的联系，这使得创建知识体系更加容易。<br>我认为这种方法适用于任何需要严肃阅读的领域：</li>
</ul>
<ol>
<li>锚点：找到一本经典书籍。</li>
<li>撒网：了解该书引用列表中的书籍。</li>
<li>收网：根据自己实际需要，精读相关书籍。</li>
</ol>
<h4 id="非本专业书籍"><a href="#非本专业书籍" class="headerlink" title="非本专业书籍"></a>非本专业书籍</h4><p><strong>专业周边知识尽可能精炼。</strong></p>
<ol>
<li>对于专业周边知识，了解关键概念及指导思想即可。</li>
<li>不需要，也没有必要对专业周边知识进行深入了解。</li>
<li>“Know what” is enough, “Know how” is expensive.</li>
</ol>
<p>以我2年前编写手机应用，学习用户体验为例：</p>
<ol>
<li>分别在现实中（身边有几个很不错的交互设计师）和线上（Quora和知乎）进行提问和搜索，得到一个书单。</li>
<li>按照下面的原则过滤书单：</li>
</ol>
<ul>
<li>去掉教科书和大部头。</li>
<li>去掉包含大量原理或论证的书籍。</li>
<li>保留结论型书籍。</li>
<li>保留指南型书籍。</li>
</ul>
<ol>
<li>总结出书单，迅速的阅读并找到关键点。</li>
</ol>
<ul>
<li>给大家看的设计书：CRAP原则，字体与配色。</li>
<li>设计心理学：心智模型，心智摩擦，最小惊讶。</li>
<li>交互设计之路：为什么需要交互，交互有哪些坑。</li>
<li>Tapworthy：具有实际操作性的移动平台交互设计指南。’</li>
</ul>
<p>了解设计的人可能认为上面的书单过于初级——没错，它们都是结论型或指南型书籍，没有原理，也没有论证——但这正是对于我这样的非专业者所需要的书籍：我不需要知道这些知识是怎么来的，知道怎么用足矣。</p>
<p>此外，受价值驱动，而非兴趣——大多数情况下兴趣只是把自己脱离当前困境的接口。</p>
<h4 id="学习型书籍"><a href="#学习型书籍" class="headerlink" title="学习型书籍"></a>学习型书籍</h4><p>学习型书籍是一种元（Meta）方法书籍：这类书籍用于提升学习能力，换句话说，就是缩短吸收知识所需要的时间。</p>
<p>这类书籍我只读过下面的几本，效果有但不明显：</p>
<ol>
<li>学习之道：冥想，体会。</li>
<li>如何阅读一本书：检视阅读，主题阅读。</li>
<li>Learn more, study less：建立知识体系及联系。</li>
</ol>
<p>需要注意的是，不要陷入到寻求最优学习方法的误区——Best is the worthest enemy of better。</p>
<h4 id="如何在翻译版和原版做选择？"><a href="#如何在翻译版和原版做选择？" class="headerlink" title="如何在翻译版和原版做选择？"></a>如何在翻译版和原版做选择？</h4><ol>
<li>优先选择翻译版。计算机书籍这种描述精确知识的书籍更是如此。</li>
<li><p>此外，如果阅读中出现难以理解的问题，不要下意识的把其归咎于翻译问题——多数情况是理解问题。</p>
<h4 id="为什么还有那么多人阅读原版？"><a href="#为什么还有那么多人阅读原版？" class="headerlink" title="为什么还有那么多人阅读原版？"></a>为什么还有那么多人阅读原版？</h4></li>
<li><p>因为翻译版还没出版。</p>
</li>
<li>知识的价值有其时效性。</li>
<li>逼格。<h4 id="越多越好？"><a href="#越多越好？" class="headerlink" title="越多越好？"></a>越多越好？</h4>我经常逛豆瓣，豆瓣有一个很有意思的现象就是人们喜欢去比较自己每年读书的数量，或者是截图炫耀自己读过几千本书云云。</li>
</ol>
<p>我在这里酸一下：书的数量并没有什么参考价值，就好比无法用盖一栋大楼的砖数评价这栋大楼的质量；换个说法，Effort 不等于 Progress。</p>
<p><strong>关键在于读过书的质量，吸收的程度，以及创造的价值。</strong></p>
<p>此外，盲目追求读书的数量会带来另一个问题——浅尝辄止。本应花在专业书籍上的时间被分配到其它无关紧要的事情上，导致该学好的没学好，没必要的学了一滩但用不上。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>形成 T 型知识结构：专业知识尽可能深入，专业周边知识尽可能精炼。</li>
</ol>
<ul>
<li>按照引用列表和作者深入阅读专业书籍。</li>
<li>利用结论型/指南型书籍精炼阅读专业周边书籍。</li>
<li>不断强化自己的按需学习能力。</li>
</ul>
<ol>
<li>不一定非要阅读原版。</li>
<li>读书并非多多益善。</li>
<li>读书之前回答下面几个问题：</li>
</ol>
<ul>
<li>这本书能给自己带来什么改变？</li>
<li>自己是否需要这种改变？</li>
<li>如果均为 Yes，继续；如果有一个 No，砍掉。</li>
</ul>
<blockquote>
<p>转载出处:  <a href="http://lucida.me/blog/on-reading-books/" target="_blank" rel="noopener">http://lucida.me/blog/on-reading-books/</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> reading </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网站图片轮播淡入淡出]]></title>
      <url>/website-picture-carousel-fade.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>基于bootstrap 的图片轮播，也可以用div 替换图片，灵活性很好。<br><a id="more"></a> </p>
</blockquote>
<p>html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;carousel&quot; class=&quot;carousel slide carousel-fade&quot; data-ride=&quot;carousel&quot;&gt;</span><br><span class="line">  &lt;ol class=&quot;carousel-indicators&quot;&gt;</span><br><span class="line">      &lt;li data-target=&quot;#carousel&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li data-target=&quot;#carousel&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li data-target=&quot;#carousel&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;</span><br><span class="line">  &lt;/ol&gt;</span><br><span class="line">  &lt;!-- Carousel items --&gt;</span><br><span class="line">  &lt;div class=&quot;carousel-inner&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;active item&quot;&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;/special/black-friday&quot;&gt;&lt;img src=&quot;static/new_index/image/black-friday.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;item&quot;&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;/out/1356720817746&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;static/new_index/image/Bloomingdales.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;item&quot;&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;/out/1356722837948&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;static/new_index/image/asos.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;!-- Carousel nav --&gt;</span><br><span class="line">  &lt;a class=&quot;carousel-control left&quot; href=&quot;#carousel&quot; data-slide=&quot;prev&quot;&gt;&lt;img src=&quot;static/new_index/image/left.png&quot;&gt;&lt;/a&gt;</span><br><span class="line">  &lt;a class=&quot;carousel-control right&quot; href=&quot;#carousel&quot; data-slide=&quot;next&quot;&gt;&lt;img src=&quot;static/new_index/image/right.png&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>css<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">.carousel-fade .carousel-inner .item &#123;</span><br><span class="line">  -webkit-transition-property: opacity;</span><br><span class="line">  transition-property: opacity;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-fade .carousel-inner .item,</span><br><span class="line">.carousel-fade .carousel-inner .active.left,</span><br><span class="line">.carousel-fade .carousel-inner .active.right &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-fade .carousel-inner .active,</span><br><span class="line">.carousel-fade .carousel-inner .next.left,</span><br><span class="line">.carousel-fade .carousel-inner .prev.right &#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-fade .carousel-inner .next,</span><br><span class="line">.carousel-fade .carousel-inner .prev,</span><br><span class="line">.carousel-fade .carousel-inner .active.left,</span><br><span class="line">.carousel-fade .carousel-inner .active.right &#123;</span><br><span class="line">  left: 0;</span><br><span class="line">  -webkit-transform: translate3d(0, 0, 0);</span><br><span class="line">          transform: translate3d(0, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"> .item:hover&#123;</span><br><span class="line">  cursor: pointer;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.carousel-control &#123;</span><br><span class="line">  display: none;</span><br><span class="line">  height: 96px;</span><br><span class="line">  width: 72px;</span><br><span class="line">  opacity: 0.3;</span><br><span class="line">  color: #fff;</span><br><span class="line">  margin: 7%;</span><br><span class="line">  background-color: #000000;</span><br><span class="line">  border: #000000;</span><br><span class="line">  padding-top: 20px;</span><br><span class="line">  z-index: 2;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control:hover &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    outline: 0;</span><br><span class="line">    opacity: 0.6;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-indicators li&#123;</span><br><span class="line">  height: 16px;</span><br><span class="line">  width: 16px;</span><br><span class="line">  margin:0 8px;</span><br><span class="line">  background-color: #fff !important;</span><br><span class="line">  opacity:0.8 !important;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-indicators .active &#123;</span><br><span class="line">    width: 16px;</span><br><span class="line">    height: 16px;</span><br><span class="line">    margin:0 8px;</span><br><span class="line">    background-color: #68c4cb !important;</span><br><span class="line">    border-color: #68c4cb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">    $(&apos;.carousel&apos;).carousel(&#123;</span><br><span class="line">    interval: 5000</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&apos;.carousel-fade&apos;).hover(function()&#123;</span><br><span class="line">        $(&apos;.carousel-control&apos;).css(&quot;display&quot;,&quot;block&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&apos;.carousel-fade&apos;).mouseleave(function()&#123;</span><br><span class="line">        $(&apos;.carousel-control&apos;).css(&quot;display&quot;,&quot;none&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> front-end </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php mail 函数发送邮件]]></title>
      <url>/php-mail-function.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>当然你可以通过php ,在自己的站点制作一个反馈表单.<br><a id="more"></a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 收件人地址(此处只可以写一个地址,写多个地址,只有最后一个地址生效)</span><br><span class="line">      $to = &apos;xxxx@qq.com&apos;;</span><br><span class="line">      // 邮件标题</span><br><span class="line">      $subject = &apos;botao email&apos;;</span><br><span class="line">      // 邮件正文</span><br><span class="line">      $message = &quot;some message...&quot;;</span><br><span class="line">      // 当发送 HTML 电子邮件时，请始终设置 content-type</span><br><span class="line">      $headers = &apos;MIME-Version: 1.0&apos;.&quot;\r\n&quot;;</span><br><span class="line">      $headers .= &apos;Content-type:text/html;charset=iso-8859-1&apos;.&quot;\r\n&quot;;</span><br><span class="line">      // 更多报头</span><br><span class="line">      //from 这个地址 是对方可以看到邮件是谁发出的,填写正确邮件地址的话,这个邮件可以回复</span><br><span class="line">      $headers .= &apos;From: &lt;xxxx@qq.com&gt;&apos;.&quot;\r\n&quot;;</span><br><span class="line">      // 所以,如果要想给多人群发邮件,可以 cc 如下</span><br><span class="line">      $headers .= &apos;Cc: xxx@qq.com&apos;.&quot;\r\n&quot;;</span><br><span class="line">      $headers .= &apos;Cc: xxx@qq.com&apos;.&quot;\r\n&quot;;</span><br><span class="line">      //调用 mail函数,执行发送</span><br><span class="line">      mail($to, $subject, $message, $headers);</span><br></pre></td></tr></table></figure>
<p><strong>Tips</strong>: 邮件正文部分是可以拼接 html 元素的, 这样就可以发送数据报表了,而不是采用附件的形式发送报表,既然可以拼接html ,当然也可以去写一些行内样式了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$message = &quot;</span><br><span class="line">    &lt;table style=&apos;这儿可以写一些样式&apos;&gt;</span><br><span class="line">     &lt;tr&gt;</span><br><span class="line">      &lt;td&gt; some data.. &lt;td&gt;</span><br><span class="line">     &lt;tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&quot;;</span><br></pre></td></tr></table></figure></p>
<p>参考： <a href="http://www.w3school.com.cn/php/php_mail.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/php/php_mail.asp</a></p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu安装navicat及常见问题解决]]></title>
      <url>/ubuntu-install-navicat.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>如果系统中没有安装wine组件则执行./start_navicat命令则系统毫无反应，没有错误日志等，因此需要安装wine和修改脚本…<br><a id="more"></a> </p>
</blockquote>
<ol>
<li>安装navicat<ul>
<li>下载Navicat，网址：<a href="http://www.navicat.com/en/download/download.html" target="_blank" rel="noopener">http://www.navicat.com/en/download/download.html</a> </li>
<li>进入下载目录，解压压缩包：tar -zxvf  navicat11_mysql_en.tar.gz</li>
<li>打开解压后的目录，会看到 start_navicat文件  运行他就可以了</li>
<li>执行命令： ./start_navicat  。执行命令后便启动navicat</li>
</ul>
</li>
<li>常见问题解决：<br>如果系统中没有安装wine组件则执行./start_navicat命令则系统毫无反应，没有错误日志等，因此需要安装wine和修改脚本：<ul>
<li>安装wine：sudo apt-get install wine</li>
<li>修改start_navicat文件：找到winboot，改成wineboot后保存，然后重新执行./start_navicat命令</li>
</ul>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL 语句优化方法]]></title>
      <url>/mysql-optimization-method.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>以下是对sql语句优化方法的一些总结。<br><a id="more"></a></p>
</blockquote>
<ol>
<li>尽量避免非操作符的使用，在索引上使用 <strong>NOT</strong>，<strong>&lt;&gt;</strong> 等操作符，数据库管理系统是不会使用索引的，可以将查询语句转化为可以使用索引的查询。</li>
<li>避免对查询的列的操作，任何对列的操作都可能导致全表扫描，这里所谓的操作包括数据库函数，计算表达式，查询时要尽可能将操作移至等式的右边，甚至去掉函数。</li>
<li>避免不必要的类型转化，需要注意的是，尽量避免潜在的数据类型转换。如将字符型数据与数值型数据比较，会自动将字符进行转换，从而导致全表扫描。</li>
<li>增加查询的范畴限制。避免全范围的搜索。</li>
<li><p>合理使用<strong>IN</strong> 与<strong>EXISTS</strong>。例如：有A，B两个表，他们分别使用如下的情况：</p>
<ul>
<li><p>当只显示一个表的数据如 A，关系条件只加一个ID时，使用IN更合适，SQL语句如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from A where id in (select id from B)</span><br></pre></td></tr></table></figure>
</li>
<li><p>当只显示一个表的数据如 A，关系条件不只一个列，例如关系条件涉及到的列为ID，col1 时，使用IN 就不方便了，可以使用EXISTS，SQL语句如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from A where EXISTS (select 1 from B where id = A.id and col1 = A.col1)</span><br></pre></td></tr></table></figure>
</li>
<li><p>in 与 exists 的区别：in 是把外表和内表作hash连接，而exists 是对外表作loop 循环，每次loop循环再对内表进行查询。一直来认为exists 比in 效率高的说法是不准确的。如果查询的两个表大小相当，那么用in 和exists 差别不大。如果两个表中一个较小，一个是大表，则子查询大表用exists，子查询小表用in。</p>
</li>
</ul>
</li>
<li>尽量去掉<strong>&lt;&gt;</strong>。尽量去掉&lt;&gt;，避免全表扫描，如果数据是枚举值，且取值范围固定，则修改OR 或者 IN a&lt;&gt;0 改为a&gt;0 or a<0 a<="">‘’ 改为a &gt;’’。</0></li>
<li>去掉where子句中的is null 和 is not null。where子句中的is null 和 is not null 将不会使用索引而是进行全表搜索，因此需要通过改变查询方式，分情况讨论等方法，去掉where子句中的is null 和 is not null ，is not null 改为A&gt;0 或者 A&gt;’’。</li>
<li>尽量不要使用前导模糊查询。由于前导模糊查询（前面有%的like查询）不能利用索引，所以速度会比较慢。</li>
<li>select 子句中避免使用 ‘ <em> ‘。当你想在select 子句中列出所有的column时，使用动态SQL列引用 ‘ </em> ‘ 是一个方便的方法，不幸的是，这是一个非常低效的方法。实际上，数据库在解析的过程中，会将’ * ‘ 依次转换成所有的列名，这个工作是通过查询数据字典完成的，这意味着将耗费更过的时间。</li>
<li>规范所有SQL关键字的书写，比如 select，update，delete，from等，要么全部大写，要么全部小写，不要大小写混写。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[说说 Java 集合类:HashMap 是如何设计的? 是如何解决什么冲突的?]]></title>
      <url>/java-hashmap.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>说说 Java 集合类:HashMap 是如何设计的? 是如何解决什么冲突的?<br><a id="more"></a></p>
</blockquote>
<ol>
<li>HashMap 是基于哈希表的Map接口的非同步实现,在Java 编程语言中,最基本的结构就是两种，一个是数组，另一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造,HashMap 也不例外,HashMap 实际上是一个<strong>链表的数组</strong>的数据结构，每个元素存放链表头节点的数组,即数组和链表的结合体.HashMap 底层就是一个数组结构,数组中的每一项又是一个链表。 当新建一个 HashMap 的时候，就会初始化一个数组，Entry 就是数组中的元素，每个Map.Entry 其实是一个 key-value 对，它持有一个指向下一个元素的引用，这就构成了链表。</li>
<li>HashMap 的存储。当我们往HashMap 中put 元素的时候，先根据key的hashCode 重新计算hash 值，根据hash值得到这个元素在数组中的位置（即下标），如果数组该位置已经存放其他元素了，那么在这个位置上的元素将以<strong>链表</strong>的形式存放，新加入的放在链头，最先加入的放在链尾。如果该数组位置上没有元素，就直接将元素放到数组中的位置上。</li>
<li>HashMap 的读取。从HashMap 中 get 元素时，首先计算key 的hashCode，找到数组中对应位置的某一元素，然后通过key 的equals 方法在对应位置的链表中找到需要的元素。</li>
<li>HashMap 的 resize（rehash）。当HashMap 中的元素越来越多的时候，hash 冲突的几率也就越来越高，因为数组的长度是固定的。所以为了提高查询的效率，就要对HashMap 的数组进行扩容，数组扩容这个操作也会出现在ArrayList 中，这是一个常用的操作，而在HashMap 数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize。那么HashMap什么时候进行扩容呢？当 HashMap中的元素的个数超过数组大小<em>loadFactor 时，就会进行扩容，loadFactor 的默认值为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小为16，那么当HashMap中元素个数超过16</em>0.75 = 12 的时候，就把数组大小扩展为2*16 = 32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知 HashMap 中元素的个数，那么预设元素的个数能够有效提高 HashMap 的性能。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[几种排序算法]]></title>
      <url>/some-sort-algorithm.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>排序方法有： 插入排序（直接插入排序，希尔排序），交换排序（冒泡排序，快速排序），选择排序（直接选择排序，堆排序），归并排序，分配排序（箱排序，基数排序）。<br><a id="more"></a></p>
</blockquote>
<ol>
<li><p>选择排序算法实现10个1~100 随机数字的排序，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class SelectSort&#123;</span><br><span class="line">  // 选择排序方法</span><br><span class="line">	public static void SelectionSort(int[] num) &#123;</span><br><span class="line">	  for (int i =0;i&lt;num.length -1;i++) &#123;</span><br><span class="line">	    int m = i;</span><br><span class="line">	    for (int j = i+1;j&lt;num.length;j++) &#123;</span><br><span class="line">	      if (num[j] &lt; num[m])</span><br><span class="line">	        m = j;</span><br><span class="line">	    &#125;</span><br><span class="line">	    if (i != m)</span><br><span class="line">	      swap(num,i,m);</span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">  // 用于交换数组中索引为 i,j 的元素</span><br><span class="line">	private static void swap(int[] num,int i,int j) &#123;</span><br><span class="line">	  int t;</span><br><span class="line">	  t = num[i];</span><br><span class="line">	  num[i] = num[j];</span><br><span class="line">	  num[j] = t;</span><br><span class="line">	&#125;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">	  // 定义一个数组</span><br><span class="line">	  int[] num = new int[100];</span><br><span class="line">	  for (int i = 0;i &lt; num.length; i++) &#123;</span><br><span class="line">	    num[i] = (int) (Math.random() * 100) + 1;</span><br><span class="line">	  &#125;</span><br><span class="line">	  // 排序</span><br><span class="line">	  SelectionSort(num);</span><br><span class="line">	  for (int i = 0;i &lt; num.length; i++) &#123;</span><br><span class="line">	    System.out.println(i);</span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>冒泡排序算法代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Random;</span><br><span class="line">import java.util.Array;</span><br><span class="line"></span><br><span class="line">public class BubbleSort &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">	  int[] arr = new int[100];</span><br><span class="line">	  for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">	    Random ran = new Random();</span><br><span class="line">	    arr[i] = ran.nextInt(100);</span><br><span class="line">	  &#125;</span><br><span class="line">	  System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">	// 冒泡排序</span><br><span class="line">	for (int i = 0;i &lt; arr.length -1;i++) &#123;</span><br><span class="line">	  for (j = 0; j &lt; arr.length -i-1;j++) &#123;</span><br><span class="line">	    if (arr[j] &gt; arr[j+1]) &#123;</span><br><span class="line">	      int t = arr[j];</span><br><span class="line">	      arr[j] = arr[j+1];</span><br><span class="line">	      arr[j+1] = t;</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	 // 冒泡排序结束</span><br><span class="line">	 System.out.println(Arrays.toString(arr));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>快速排序算法代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class QuickSort &#123;</span><br><span class="line">  public static void sort(int[] num) &#123;</span><br><span class="line">    quickSort(num,0,num.length -1);</span><br><span class="line">  &#125;</span><br><span class="line">  // 快速排序方法</span><br><span class="line">  private static void quickSort(int[] num,int left,int right) &#123;</span><br><span class="line">    if (left &lt; right) &#123;</span><br><span class="line">      int s = num[left];</span><br><span class="line">      int i = left;</span><br><span class="line">      int j = right +1;</span><br><span class="line">      while (true) &#123;</span><br><span class="line">        // 向右找大于s的数的索引</span><br><span class="line">        while (i +1 &lt; num.length &amp;&amp; num[++i] &lt; s)</span><br><span class="line">          ;</span><br><span class="line">        while (j-1 &gt; -1 &amp;&amp; num[--j] &gt; s)</span><br><span class="line">          ;</span><br><span class="line">        // 如果 i &gt;= j, 退出循环</span><br><span class="line">        if (i &gt;= j) &#123;</span><br><span class="line">          break;</span><br><span class="line">        &#125;</span><br><span class="line">        // 否则交换索引 i和j 的元素</span><br><span class="line">        swap(num,i,j);</span><br><span class="line">      &#125;</span><br><span class="line">      num[left] = num[j];</span><br><span class="line">      num[j] = s;</span><br><span class="line">      // 对左边进行递归</span><br><span class="line">      quickSort(num,left,j-1);</span><br><span class="line">      // 对右边进行递归</span><br><span class="line">      quickSort(num,j+1,right);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 交换 数组中索引为i,j 的元素</span><br><span class="line">  private static void swap(int[] num,int i,int j) &#123;</span><br><span class="line">    int t;</span><br><span class="line">    t = num[j];</span><br><span class="line">    num[i] = num[j];</span><br><span class="line">    num[j] = t;</span><br><span class="line">  &#125;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    int[] arr = new int[100];</span><br><span class="line">    for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">      Random ran = new Random();</span><br><span class="line">      arr[i] = ran.nextInt(100);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr);</span><br><span class="line">    for (int i =0;i&lt;arr.length;i++) &#123;</span><br><span class="line">      System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单了解递归函数]]></title>
      <url>/understanding-recursive-functions.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>什么是递归？什么情况下会使用递归?<br><a id="more"></a></p>
</blockquote>
<ol>
<li>递归作为一种算法在程序设计语言中广泛使用，是指函数/过程/子程序在运行过程中直接或间接调用自身而产生的重入现象。</li>
<li>递归算法一般用于解决三类问题<ul>
<li>数据的定义是按递归定义的。（Fibonacci 函数）</li>
<li>问题解决按递归算法实现。（回溯）</li>
<li>数据的结构形式是按递归定义的。（树的遍历，图的搜索）</li>
</ul>
</li>
<li><p>下面两个程序是使用递归实现的小栗子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 计算二进制中1的个数</span><br><span class="line">* N为奇数，二进制中的1的个数等于N/2的个数</span><br><span class="line">* 例子</span><br><span class="line">* num =13</span><br><span class="line">* 1. getBinary(13/2=6)+1;</span><br><span class="line">* 2. getBinary(6/2=3)+1;</span><br><span class="line">* 3. getBinary(3/2=1)+1+1;</span><br><span class="line">* 4. getBinary(1)+1+1;  getBinary(1) 返回1，所以与后面两个1相加是3</span><br><span class="line">**/</span><br><span class="line">public static int getBinary(int num)&#123;</span><br><span class="line">	if (num == 1)</span><br><span class="line">		return 1;</span><br><span class="line">	if (0 == num%2)&#123;</span><br><span class="line">    // 为偶数</span><br><span class="line">	    return getBinary(num/2);</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">	    return getBinary(num/2)+1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 求 n!</span><br><span class="line">*</span><br><span class="line">**/</span><br><span class="line">public class Factorial &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">	    long n = 7;</span><br><span class="line">	    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    public static long doFactorial(long n) &#123;</span><br><span class="line">	    if (n &lt; 1) &#123;</span><br><span class="line">		    System.out.println(&quot;error&quot;);</span><br><span class="line">		    return 0;</span><br><span class="line">	    &#125; else if (n == 1 || n ==2 ) &#123;</span><br><span class="line">			return n;</span><br><span class="line">	    &#125; else &#123;</span><br><span class="line">	        return n * doFactorial(n-1);</span><br><span class="line">	    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安利一些好用的在线工具]]></title>
      <url>/share-some-good-tools.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>这里收集一些开发中很好用的在线工具，会不断补充，欢迎大家补充。<br><a id="more"></a></p>
</blockquote>
<h2 id="markdown-转-微信公众号格式"><a href="#markdown-转-微信公众号格式" class="headerlink" title="markdown 转 微信公众号格式"></a>markdown 转 微信公众号格式</h2><ul>
<li><a href="http://blog.didispace.com/tools/online-markdown/" target="_blank" rel="noopener">程序员DD - 在线工具</a></li>
</ul>
<h2 id="Linux-学习手册"><a href="#Linux-学习手册" class="headerlink" title="Linux 学习手册"></a>Linux 学习手册</h2><ul>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">支持搜索，特别好用</a></li>
<li><a href="http://man.linuxde.net/shell-script" target="_blank" rel="noopener">Linux shell 脚本攻略</a></li>
</ul>
<h2 id="前端调试"><a href="#前端调试" class="headerlink" title="前端调试"></a>前端调试</h2><ul>
<li><a href="http://tools.seobook.com/robots-txt/analyzer/" target="_blank" rel="noopener">Analyze robots.txt</a> 分析 robots.txt 文件</li>
<li><a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">Google PageSpeed Insights</a> 谷歌 页面速度分析</li>
<li><a href="https://search.google.com/structured-data/testing-tool" target="_blank" rel="noopener">Google Strctured Data Test</a> 谷歌 结构化数据检测</li>
<li><a href="https://gtmetrix.com/" target="_blank" rel="noopener">gtmetrix.com - Analyze your site’s speed and make it faster.</a></li>
</ul>
<h2 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h2><ul>
<li><a href="http://naotu.baidu.com/" target="_blank" rel="noopener">百度脑图</a></li>
<li><a href="http://unbug.github.io/codelf/" target="_blank" rel="noopener">Codelf</a>  变量命名神器</li>
</ul>
<h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><ul>
<li><a href="https://www.digitalocean.com/?refcode=1b3119f769ad" target="_blank" rel="noopener">Digitalocean</a> （有推荐码）数据海洋</li>
<li><a href="https://bandwagonhost.com/aff.php?aff=5403" target="_blank" rel="noopener">BandwagonHost</a> （有推荐码）班瓦工</li>
<li><a href="https://www.ufovps.com" target="_blank" rel="noopener">UFOVPS</a> 有 HK 地区，自己在用</li>
</ul>
<h2 id="格式校验"><a href="#格式校验" class="headerlink" title="格式校验"></a>格式校验</h2><ul>
<li><a href="https://regex101.com/" target="_blank" rel="noopener">正则表达式测试和调试工具</a></li>
<li><a href="http://json.cn/" target="_blank" rel="noopener">json 校验工具</a></li>
<li><a href="http://cron.qqe2.com/" target="_blank" rel="noopener">cron 表达式生成器和反解析工具</a></li>
</ul>
<h2 id="服务器监控"><a href="#服务器监控" class="headerlink" title="服务器监控"></a>服务器监控</h2><ul>
<li><a href="https://uptimerobot.com/" target="_blank" rel="noopener">Uptime Robot 宕机监控</a></li>
</ul>
<h2 id="fake-data"><a href="#fake-data" class="headerlink" title="fake data"></a>fake data</h2><ul>
<li><a href="http://www.fakenamegenerator.com/gen-male-us-us.php" target="_blank" rel="noopener">随机生成美国人 identity</a></li>
</ul>
<ul>
<li><a href="http://www.chongbuluo.com/" target="_blank" rel="noopener">虫部落</a> 一个纯粹的搜索知识、技术和经验分享平台</li>
</ul>
<h2 id="bazier-贝塞尔曲线"><a href="#bazier-贝塞尔曲线" class="headerlink" title="bazier 贝塞尔曲线"></a>bazier 贝塞尔曲线</h2><ul>
<li><a href="http://myst729.github.io/bezier-curve/" target="_blank" rel="noopener">在线测试</a></li>
</ul>
<h2 id="冷熊简历"><a href="#冷熊简历" class="headerlink" title="冷熊简历"></a>冷熊简历</h2><ul>
<li><a href="http://cv.ftqq.com" target="_blank" rel="noopener">MarkDown 简历工具，整合了内容模板，PDF 生成 …</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Safe And Sound]]></title>
      <url>/safe-and-sound.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>寻找和突破心障的方法是寻找一种对美好世界和美好人生的渐进解，首先我们承认对这个世界的终极一无所知，但是我们知道近一点儿比远一点儿更好，我们不知道完美世界的图景是什么，但是我们可以一点儿一点儿努力去接近它。我们不知道目标在哪里，但是从渐进解出发，我们永远可以找到一个方向，一个清晰的方向，它可以告诉我们，我们一直在前进，一直没有停息。<br><a id="more"></a></p>
</blockquote>
<p>　　如果要我一句话总结我的实习生活，我想应该是欢喜，毕竟乐在其中。像我这种菜得抠脚的毛头小子怎么会欢喜，16年7份到一家创业的互联网公司实习，接近八个月的时间，公司里人来人往，看多了也觉得不过如此吧，没什么大不了的，是我涉世未深。不大不小的需求也做了好多了，有时候也会觉得身心俱疲。跟老板谈过几次话，也得到了不少做事的心得，可以说，在北京实习我最大的收获就是做事的态度。<br>　　去年365天，在家５天，大三结束就来北京，我确实是幸运的，遇到了一个好的平台，遇到一个优秀的师兄Yifan，也遇到老友Jaden，这让我的工作生涯很平顺，也很愉快，优秀的人都有看书的习惯，跟这些优秀的人在一起，也会去模仿，去接近，去学会思考。看书不仅是一个追求数据增长的过程，最重要的是追求模型增长。这个世界没有绝对真理，所有的信息都散落在世界的各个角落。我们慢慢地读书学习成长的过程，就是一个不断汲取这些东西的一个过程，随着你越来越逼近这个世界的真相，你就会越来越有能力，所以核心还是怎么看待这个世界的问题。当然我也有一群关系很好的实习的小伙伴，后来，他们都离开了，让我沮丧了好一阵子，现在他们大都在新的公司入职，朝九晚六，替他们感到开心。<br>　　在这个碎片化的时代，我们花大量时间刷微信，微博，知乎，今日头条，把属于自己的时间财富交给各种各样的timeline，成为了在信息世界中等着被feed 的人，像被圈养…慢慢的，当我们习以为常，而信息渠道质量下降，则会让我们开始散失获取价值信息的能力，直至散失学习和思考能力，最根本的原因不是因为沉迷，所有沉迷于一种坏习惯的人都是因为没有真正值得做事情，如果真正有这样一种事情让他全情投入，那么根本不会沉迷于这么多无聊的事情之中而无法自拔。所以我已经开始有耐心去泡在博客园里，或者去读一些书，至少，开始行动是个好事。<br>　　公司里谁工作做的怎么样，别的人心里都清楚，甚至连和你技术毫不相关的运营的心里也清楚。所以就会有各种俯视和仰视，无论什么时候，首先自己要平视自己，要清楚你所做的一切哪些是你真正学习到的知识，哪些是在重复纠缠，哪些又是在做给别人看的。看了一些《重构》的时候，再回过头看看自己的写的代码，有一百个心思想去重写一下，为了让项目不繁琐可维护，为了以后不让项目组的同事在背后骂，为了自己做事的态度。但是能做的也是在一定的范围内努力做出一些改变，对于更大范围的事，挣扎也没用，还是要明白妥协和明哲保身，当然是指保证项目正常运行。<br>　　我一直自诩是一个理想主义者，和Cloud争执过很多次，想说服他来北京，他想让我去上海，我觉得必须知道每天工作的意义，究竟做的是什么，他的回应却是，在哪不都是写代码嘛，没什么不一样的，似乎觉得他说的没有什么不对，我们都建设互联网中的某一个节点。<br>　　再过一个月我就要回学校准备毕业答辩了，踏踏实实实习了这么久，进步很慢，但总是在持续进步，但愿自己刚刚开始的程序生涯能够无关风月，寂静欢喜，顺便说一句，这段在北京的日子简直过得太糟了，这应该不是生活本来的样子，至少不是我想要的生活的样子。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="352" height="52" src="//music.163.com/outchain/player?type=2&id=1934649&auto=1&height=32"></iframe>
]]></content>
      
        
        <tags>
            
            <tag> Life-Talk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 二维数组按照其中某个字段进行排序]]></title>
      <url>/php-array-sort-by-key.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>根据指定字段排序二位数组，保留原有键值，降序<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * @param $arr @输入二维数组</span><br><span class="line">  * @param $var @要排序的字段名</span><br><span class="line">  * return array</span><br><span class="line">  */</span><br><span class="line"> private function myArrsort($arr, $var)&#123;</span><br><span class="line"> $tmp=array();</span><br><span class="line"> $rst=array();</span><br><span class="line"> foreach($arr as $key=&gt;$trim)&#123;</span><br><span class="line"> $tmp[$key] = $trim[$var];</span><br><span class="line"> &#125;</span><br><span class="line"> arsort($tmp);</span><br><span class="line"> $i=0;</span><br><span class="line"> foreach($tmp as $key1=&gt;$trim1)&#123;</span><br><span class="line"> $rst[$i] = $arr[$key1];</span><br><span class="line"> $i++;</span><br><span class="line"> &#125;</span><br><span class="line"> return $rst;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 使用过程中的相关总结]]></title>
      <url>/git-about-use.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>Git是目前世界上最先进的分布式版本控制系统，尤其是它极其强大的分支管理，以下是我在开发中的一些总结，会不断补充。<br><a id="more"></a></p>
</blockquote>
<ul>
<li><p>git 忽略文件权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.filemode false</span><br></pre></td></tr></table></figure>
</li>
<li><p>回退到上一个版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>
</li>
<li><p>回退之后，想回到原来的版本，只要记得commit_id 就可以，commit_id 可以通过　git reflog 命令来找到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些常用的css相关总结]]></title>
      <url>/some-css-summary.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>在日常开发中，常用到的一些css 技巧总结，会不断补充。<br><a id="more"></a> </p>
</blockquote>
<ul>
<li><p>单行文本溢出显示省略号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">text-overflow:ellipsis;</span><br><span class="line">white-space: nowrap;</span><br></pre></td></tr></table></figure>
</li>
<li><p>多行文本溢出显示省略号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: 3;</span><br><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字体声明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">font-face &#123;</span><br><span class="line">    font-family: &apos;raleway-regular&apos;;</span><br><span class="line">    src:url(&quot;./fonts/Raleway-Regular.ttf&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>图片在容器中居中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.index-pic-div &#123;</span><br><span class="line">    display: table-cell;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    height: 150px;</span><br><span class="line">    width: 250px;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.index-pic-div&gt;img &#123;</span><br><span class="line">    max-width: 120px;</span><br><span class="line">    max-height: 100px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>背景图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background-image: url(/static/image/indexbrand/lanebryant.png);</span><br><span class="line">background-repeat: no-repeat;</span><br><span class="line">background-position: center;</span><br></pre></td></tr></table></figure>
</li>
<li><p>计算</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min-height: calc(100% - 152px);</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> front-end </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义滚动条样式]]></title>
      <url>/custom-scroll-bar-styles.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>如果觉得浏览器自动渲染的滚动条难看的话，你当然可以自定义滚动条样式。<br><a id="more"></a></p>
</blockquote>
<ul>
<li>自定义滚动条demo<blockquote>
<p><a href="http://www.xuanfengge.com/demo/201311/scroll/css3-scroll.html" target="_blank" rel="noopener">http://www.xuanfengge.com/demo/201311/scroll/css3-scroll.html</a></p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/</span><br><span class="line">::-webkit-scrollbar</span><br><span class="line">&#123;</span><br><span class="line">    width: 16px;</span><br><span class="line">    height: 16px;</span><br><span class="line">    background-color: #F5F5F5;</span><br><span class="line">&#125;</span><br><span class="line">/*定义滚动条轨道 内阴影+圆角*/</span><br><span class="line">::-webkit-scrollbar-track</span><br><span class="line">&#123;</span><br><span class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    background-color: #F5F5F5;</span><br><span class="line">&#125;</span><br><span class="line">/*定义滑块 内阴影+圆角*/</span><br><span class="line">::-webkit-scrollbar-thumb</span><br><span class="line">&#123;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);</span><br><span class="line">    background-color: #555;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> front-end </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[检测url是否含参数]]></title>
      <url>/check-url-has-parameters.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>检测url是否带参，并且补加参数的解决办法<br><a id="more"></a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((strpos($url, &apos;?&apos;) !== false) ? &apos;&amp;&apos; : &apos;?&apos;);</span><br></pre></td></tr></table></figure>
<p>以下是一个较为全面的检查方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//原始url</span><br><span class="line">$old_url = $_SERVER[&quot;REQUEST_URI&quot;];</span><br><span class="line">//检查链接中是否存在 ?</span><br><span class="line">$check = strpos($old_url, &apos;?&apos;);</span><br><span class="line">//如果存在 ?</span><br><span class="line">if($check !== false)</span><br><span class="line">&#123;</span><br><span class="line">    //如果 ? 后面没有参数，如 http://YITU.org/index.php?</span><br><span class="line">    if(substr($old_url, $check+1) == &apos;&apos;)</span><br><span class="line">    &#123;</span><br><span class="line">        //可以直接加上附加参数</span><br><span class="line">        $new_url = $old_url;</span><br><span class="line">    &#125; </span><br><span class="line">    else    //如果有参数，如：http://YITU.org/index.php?ID=12 </span><br><span class="line">    &#123;</span><br><span class="line">        $new_url = $old_url.&apos;&amp;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else    //如果不存在 ?</span><br><span class="line">&#123;</span><br><span class="line">    $new_url = $old_url.&apos;?&apos;;</span><br><span class="line">&#125;</span><br><span class="line">echo $new_url;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 相关总结]]></title>
      <url>/linux-summary.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>一些Linux常用命令相关总结，会不断补充。<br><a id="more"></a></p>
</blockquote>
<ul>
<li><p>修改文件夹权限（递归设置）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 765 filename -R</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找相关端口进程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8080</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过游览器共享文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 9999</span><br></pre></td></tr></table></figure>
</li>
<li><p>.gz.tar 解压/压缩</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 解压</span><br><span class="line">tar zxvf FileName.tar.gz</span><br><span class="line"># 压缩</span><br><span class="line">tar zcvf FileName.tar.gz DirName</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看内存情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看系统情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure>
</li>
<li><p>上一次ssh 连接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!ssh</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 开发技巧]]></title>
      <url>/mysql-dev-skill.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>主要涉及：JOIN 、JOIN 更新、GROUP BY HAVING 数据查重/去重<br><a id="more"></a></p>
</blockquote>
<h3 id="INNER-JOIN、LEFT-JOIN、RIGHT-JOIN、FULL-JOIN-MySQL-不支持-、CROSS-JOIN"><a href="#INNER-JOIN、LEFT-JOIN、RIGHT-JOIN、FULL-JOIN-MySQL-不支持-、CROSS-JOIN" class="headerlink" title="INNER JOIN、LEFT JOIN、RIGHT JOIN、FULL JOIN(MySQL 不支持)、CROSS JOIN"></a>INNER JOIN、LEFT JOIN、RIGHT JOIN、FULL JOIN(MySQL 不支持)、CROSS JOIN</h3><pre><code>- 这是在网上找到的非常好的一篇博文，图解 jion 语句
 [CODING HORROR-A Visual Explanation of SQL Joins](https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/)
- join 的数据选取范围
</code></pre><p>　<img src="http://7xs09x.com1.z0.glb.clouddn.com/160725-imooc-mysql-development-skills-notes-001.png" alt="alt text"></p>
<h3 id="更新使用过滤条件中包括本身的表"><a href="#更新使用过滤条件中包括本身的表" class="headerlink" title="更新使用过滤条件中包括本身的表"></a>更新使用过滤条件中包括本身的表</h3><pre><code>- 更新 t1 t2 表中 col_a 重复的字段
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t1 aa JOIN(</span><br><span class="line">SELECT b.col_a</span><br><span class="line">FROM t1 a INNER JOIN t2 b on</span><br><span class="line">a.col_a = b.col_a</span><br><span class="line">)bb on aa.col_a = bb.col_a</span><br><span class="line">SET col_a = &apos;hi&apos;</span><br><span class="line">;</span><br></pre></td></tr></table></figure>
</code></pre><h3 id="查询重复数据、删除重复数据"><a href="#查询重复数据、删除重复数据" class="headerlink" title="查询重复数据、删除重复数据"></a>查询重复数据、删除重复数据</h3><pre><code>- 利用 GROUP BY 和 HAVING 查询重复数据
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_a, COUNT(*)</span><br><span class="line">FROM t1</span><br><span class="line">GROUP BY col_a HAVING COUNT(*) &gt; 1</span><br></pre></td></tr></table></figure>

- 删除重复数据，对于相同数据保留 ID 最大的
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DELETE a</span><br><span class="line">FROM t1 a JOIN (</span><br><span class="line">SELECT col_a,COUNT(*),MAX(id) AS id</span><br><span class="line">FROM t1</span><br><span class="line">GROUP BY col_a HAVING COUNT(*) &gt; 1</span><br><span class="line">)b ON a.col_a = b.col_a</span><br><span class="line">WHERE a.id &lt; b.id</span><br><span class="line">;</span><br></pre></td></tr></table></figure>
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 相关总结]]></title>
      <url>/mysql-summary.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>一些MySQL常用命令相关总结，会不断补充。<br><a id="more"></a></p>
</blockquote>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>导出数据库全部表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p 数据库名 &gt; xxx.sql</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>导出数据库某张表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p 数据库名 表名 &gt; xxx.sql</span><br></pre></td></tr></table></figure>
</li>
<li><p>导出数据库某表的结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p -d 数据库名 表名 &gt; xxx.sql;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动压缩</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p 数据库名 | gzip &gt; xxx.sql.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>向数据库导入表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat aaa.sql | mysql -h192.168.8.1 -uroot -p 数据库名</span><br><span class="line">mysql -uroot -p dbname &lt; aaa.sql</span><br></pre></td></tr></table></figure>
</li>
<li><p>压缩的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip &lt; xxx.sql.gz | mysql -uroot -p 数据库名</span><br></pre></td></tr></table></figure>
</li>
<li><p>source 方式导入表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">show databases;</span><br><span class="line">use dbname;</span><br><span class="line">source ~/Documents/xxx.sql</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 新表 SELECT * FROM 旧表</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制表结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 新表 SELECT * FROM 旧表 WHERE 1=2</span><br><span class="line">CREATE TABLE 新表 LIKE 旧表</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看表结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc tablename</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看mysql的事务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM information_schema.INNODB_TRX\G;</span><br><span class="line">kill XXX</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="开启远程"><a href="#开启远程" class="headerlink" title="开启远程"></a>开启远程</h3><ul>
<li><p>允许所有ip访问</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;moma&apos; WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Ubuntu下还要修改 Mysql 配置文件 my.ini</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 bind-address = 127.0.0.1 这一行注释掉, 即修改为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启 MySQL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><ul>
<li><p>方法一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;root&apos;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user SET Password = PASSWORD(&apos;roothicc409&apos;) WHERE user = &apos;root&apos;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="长期使用Navicat-的方法"><a href="#长期使用Navicat-的方法" class="headerlink" title="长期使用Navicat 的方法"></a>长期使用Navicat 的方法</h3><blockquote>
<p>删除 ～/.navicat 文件夹，试用时间将重新计算，本地查询语句将丢失<br>可以使用 Navicat Cloud 服务（FREE），这样将永久保存查询语句</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[去除JSP页面中的空白行]]></title>
      <url>/remove-jsp-page-blank.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>由于JSP 页面里面往往会嵌套一些标签控制语句进行判断或者迭代，用Ctrl+u 查看源码时会看到代码很凌乱，会出现很多空白，所以下面是我遇到这种情况用到的方法<br><a id="more"></a></p>
</blockquote>
<ul>
<li><p>方法一：在Jsp页面head位置添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page trimDirectiveWhitespaces=&quot;true&quot; %&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：在项目web.xml中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.apache.jasper.servlet.JspServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;trimSpaces&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> jsp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat 80端口被占用的解决办法]]></title>
      <url>/tomcat-80-port-occupy.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>在企业版Eclipse中，在已经启动了Tomcat服务器后，准备运行页面或Servlet时，有时会出现这样的关于Tomcat服务器端口占用的问题：<br>“Several ports (8005, 8080, 8009) required by Tomcat v6.0 Server at localhost are already in use. The server may already be running in another process, or a system process may be using the port. To start this server you will need to stop the other process or change the port number(s).”<br><a id="more"></a></p>
</blockquote>
<ul>
<li><p>首先查看端口占用情况 ，使用以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i:8080</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java  1564 tomcat8  50u  IPv6  19336  0t0  TCP *:http-alt (LISTEN)</span><br></pre></td></tr></table></figure>
</li>
<li><p>kill 该进程 (pid) 即可，使用以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kill -9 1564</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
